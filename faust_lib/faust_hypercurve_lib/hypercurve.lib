/*=============================================================================
   Copyright (c) 2022 Johann Philippe
   Distributed under the MIT License (https://opensource.org/licenses/MIT)
=============================================================================*/

//############################## hypercurve.lib ##########################################
// Hypercurve library. Its official prefix is `hc`.
//########################################################################################

declare name "Faust Hypercurve Library";
declare version "0.1";

ba = library("basics.lib");

/*=============================================================================
Curve bases - implement different algorithms to be used as segments arguments
=============================================================================*/
/*
      diocles_curve(a), alias cissoid_curve(a)
      * a :  0.5 < a < inf
      e.g. `diocles_curve(0.51)`

      Some of them use arguments while others don't (linear, cubic...)
      Be careful that these arguments must be constant.
*/

diocles_curve = ffunction(int hc_diocles_curve (float), "hypercurve_faust.h", "");
power_curve = ffunction(int hc_power_curve (float), "hypercurve_faust.h", "");
gaussian_curve = ffunction(int hc_gaussian_curve (float, float), "hypercurve_faust.h", "");
toxoid_curve = ffunction(int hc_toxoid_curve (float), "hypercurve_faust.h", "");
catenary_curve = ffunction(int hc_catenary_curve (float), "hypercurve_faust.h", "");
tightrope_walker_curve = ffunction(int hc_tightrope_walker_curve(float, float), "hypercurve_faust.h", "");
typed_curve = ffunction(int hc_typed_curve (float), "hypercurve_faust.h", "");
bicorn_curve = ffunction(int hc_bicorn_curve (float), "hypercurve_faust.h", "");

// No arguments curve bases
linear_curve = linear_curve_proxy(0) with
{
      linear_curve_proxy = ffunction(int hc_linear_curve (float), "hypercurve_faust.h", "");
};
cubic_curve  = cubic_curve_proxy(0)
with {
      cubic_curve_proxy = ffunction(int hc_cubic_curve (int), "hypercurve_faust.h", "");
};
logarithmic_curve  = logarithmic_curve_proxy(0)
with {
      logarithmic_curve_proxy = ffunction(int hc_logarithmic_curve (int), "hypercurve_faust.h", "");
};
exponential_curve  = exponential_curve_proxy(0)
with {
      exponential_curve_proxy = ffunction(int hc_exponential_curve (int), "hypercurve_faust.h", "");
};
hanning_curve  = hanning_curve_proxy(0)
with {
      hanning_curve_proxy = ffunction(int hc_hanning_curve (int), "hypercurve_faust.h", "");
};
hamming_curve  = hamming_curve_proxy(0)
with {
      hamming_curve_proxy = ffunction(int hc_hamming_curve (int), "hypercurve_faust.h", "");
};
blackman_curve  = blackman_curve_proxy(0)
with {
      blackman_curve_proxy = ffunction(int hc_blackman_curve (int), "hypercurve_faust.h", "");
};
mouth_curve = mouth_curve_proxy(0)
with {
      mouth_curve_proxy = ffunction(int hc_mouth_curve (int), "hypercurve_faust.h", "");
};

// Splines
quadratic_bezier_curve = ffunction(int hc_quadratic_bezier_curve (int), "hypercurve_faust.h", "");
cubic_bezier_curve = ffunction(int hc_cubic_bezier_curve (int, int), "hypercurve_faust.h", "");
catmull_rom_spline_curve = ffunction(int hc_catmull_rom_spline_curve (int, int), "hypercurve_faust.h", "");
// Cubic spline curve takes a list of control points as argument. Max 32 control_points.
cubic_spline_curve(control_point_list) = cubic_spline_curve_proxy(args)
with {
      cubic_spline_curve_proxy = ffunction(int hc_cubic_spline_curve(
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int),
                        "hypercurve_faust.h", "");
      args = control_point_list, par(n, 32 - ba.count(control_point_list), 0);
};

// Lagrange polynomial curve
lagrange_polynomial_curve(control_point_list) = lagrange_polynomial_curve_proxy(args)
with {
      lagrange_polynomial_curve_proxy = ffunction(int hc_lagrange_polynomial_curve(
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int),
                        "hypercurve_faust.h", "");
      args = control_point_list, par(n, 32 - ba.count(control_point_list), 0);
};

// Polynomial curve defines a polynomial with user arguments. Max 32 arguments.
polynomial_curve(argument_list) = cubic_spline_curve_proxy(args)
with {
      polynomial_curve_proxy = ffunction(int hc_cubic_spline_curve(
                        float, float, float, float,
                        float, float, float, float,
                        float, float, float, float,
                        float, float, float, float,
                        float, float, float, float,
                        float, float, float, float,
                        float, float, float, float,
                        float, float, float, float),
                        "hypercurve_faust.h", "");
      args = argument_list, par(n, 32 - ba.count(argument_list), 0);
};
           
// Easing curves 
ease_in_sine_curve = hanning_curve_proxy(0) with 
{
      ease_in_sine_curve_proxy = ffunction(int hc_ease_in_sine_curve(int), "hypercurve_faust.h", "");
};
ease_out_sine_curve = hanning_curve_proxy(0) with 
{
      ease_out_sine_curve_proxy = ffunction(int hc_ease_out_sine_curve(int), "hypercurve_faust.h", "");
};
ease_inout_sine_curve = hanning_curve_proxy(0) with 
{
      ease_inout_sine_curve_proxy = ffunction(int hc_ease_inout_sine_curve(int), "hypercurve_faust.h", "");
};
ease_in_back_curve = hanning_curve_proxy(0) with 
{
      ease_in_back_curve_proxy = ffunction(int hc_ease_in_back_curve(int), "hypercurve_faust.h", "");
};
ease_out_back_curve = hanning_curve_proxy(0) with 
{
      ease_out_back_curve_proxy = ffunction(int hc_ease_out_back_curve(int), "hypercurve_faust.h", "");
};
ease_inout_back_curve = hanning_curve_proxy(0) with 
{
      ease_inout_back_curve_proxy = ffunction(int hc_ease_inout_back_curve(int), "hypercurve_faust.h", "");
};
ease_in_circ_curve = hanning_curve_proxy(0) with 
{
      ease_in_circ_curve_proxy = ffunction(int hc_ease_in_circ_curve(int), "hypercurve_faust.h", "");
};
ease_out_circ_curve =hanning_curve_proxy(0) with 
{
      ease_out_circ_curve_proxy = ffunction(int hc_ease_out_circ_curve(int), "hypercurve_faust.h", "");
};
ease_inout_circ_curve = hanning_curve_proxy(0) with 
{
      ease_inout_circ_curve_proxy = ffunction(int hc_ease_inout_circ_curve(int), "hypercurve_faust.h", "");
};
ease_in_elastic_curve = hanning_curve_proxy(0) with 
{
      ease_in_elastic_curve_proxy = ffunction(int hc_ease_in_elastic_curve(int), "hypercurve_faust.h", "");
};
ease_out_elastic_curve = hanning_curve_proxy(0) with 
{
      ease_out_elastic_curve_proxy = ffunction(int hc_ease_out_elastic_curve(int), "hypercurve_faust.h", "");
};
ease_inout_elastic_curve = hanning_curve_proxy(0) with 
{
      ease_inout_elastic_curve_proxy = ffunction(int hc_ease_inout_elastic_curve(int), "hypercurve_faust.h", "");
};
ease_in_bounce_curve = hanning_curve_proxy(0) with 
{
      ease_in_bounce_curve_proxy = ffunction(int hc_ease_in_bounce_curve(int), "hypercurve_faust.h", "");
};
ease_out_bounce_curve = hanning_curve_proxy(0) with 
{
      ease_out_bounce_curve_proxy = ffunction(int hc_ease_out_bounce_curve(int), "hypercurve_faust.h", "");
};
ease_inout_bounce_curve = hanning_curve_proxy(0) with 
{
      ease_inout_bounce_curve_proxy = ffunction(int hc_ease_inout_bounce_curve(int), "hypercurve_faust.h", "");
};

           
// Utility : control point (x, y) point
control_point = ffunction(int hc_control_point (float, float), "hypercurve_faust.h", "");

// Aliases
point = control_point;
cissoid_curve = diocles_curve;
gauss_curve = gaussian_curve;
duplicatrix_cubic_curve = toxoid_curve;
funicular_curve  = catenary_curve;
kiss_curve = mouse_curve;

/*=============================================================================
Hypercurve segment : defines a segment inside an hypercurve
=============================================================================*/
/*
      segment(fractional_size, y_destination, curve_base_index);
      * fractional_size = fractional size in the hypercurve (between 0 and 1)
      * y_destination = last y point in the segment
      * curve_base_index = return value of a curve_base algorithm

      e.g. : segment(1/2, 0.8, hc.catenary_curve(0.1));
      Segment arguments must be constant.
*/
segment = ffunction(int hc_segment (float, float, int), "hypercurve_faust.h", "");

/*=============================================================================
Hypercurve composer
=============================================================================*/
/*
      hypercurve(definition, y_start, (list_of_segments));
      * definition : number of samples in the curve (usually a power of 2)
      * y_start : start point of the curve in y axis
      * list_of_segments : a parallel list of segments - max 64 segments

      e.g. hypercurve(2048, 0, (hc.segment(1, 1, hc.cubic)));
      Hypercuve arguments must be constants
*/
MAX_SEGMENTS = 64;
hypercurve(definition, y_start, segs) =  hypercurve_proxy(definition, y_start, args)
with {
      hypercurve_proxy  = ffunction(int hc_hypercurve (int, float,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int,
                        int, int, int, int),
                        "hypercurve_faust.h", "");
        args = segs, par(n, MAX_SEGMENTS - ba.count(segs), 0);
};

/*=============================================================================
Hypercurve runtime reader
=============================================================================*/
/*
      run(hypercurve_index, read_index);
      * hypercurve_index : return value of hypercurve composer
      * read_index : value between 0 and 1 (e.g. phasor)
*/
run = ffunction(float hc_run (int, float), "hypercurve_faust.h", "");
// Same with linear interpolation
runi = ffunction(float hc_runi (int, float), "hypercurve_faust.h", "");

/*=============================================================================
Hypercurve operators
=============================================================================*/
/*
      Allows to make some maths on hypercurves. Arguments must be constants.
      add(hc1, hc2)
      * hc1 : first hypercurve to be added to the other
      * hc2 : second hypercurve

      Returns a new hypercurve
*/
add = ffunction(int hc_add (int, int), "hypercurve_faust.h", "");
sub = ffunction(int hc_sub (int, int), "hypercurve_faust.h", "");
mult = ffunction(int hc_mult (int, int), "hypercurve_faust.h", "");
div = ffunction(int hc_div (int, int), "hypercurve_faust.h", "");
addn = ffunction(int hc_addn (int, float), "hypercurve_faust.h", "");
subn = ffunction(int hc_subn (int, float), "hypercurve_faust.h", "");
multn = ffunction(int hc_multn (int, float), "hypercurve_faust.h", "");
divn = ffunction(int hc_divn (int, float), "hypercurve_faust.h", "");

/*=============================================================================
Hypercurve operations
=============================================================================*/
/*
      Scale, without copying the hypercurve, but returns the hypercurve index.
      scale(int hc, float min, float max);
      * hc : hypercurve to be scaled
      * min : minimum value in new scale
      * max : maximum value in new scale
      normalize, and norm are aliases for scale(0, 1)
*/
scale = ffunction(int hc_scale (int, float, float), "hypercurve_faust.h", "");
normalize(_hc) = scale(_hc, 0, 1);
norm(_hc) = scale(_hc, 0, 1);

/*
      Inverts a curve_base segment. It does not copy the curve_base, but still returns its index.
      invert(int curve_base_index);
      * curve_base_index : curve_base_index to be inverted


      Does not copy the hypercurve, but  returns the hypercurve index.
*/
invert = ffunction(int hc_invert_curve_base (int), "hypercurve_faust.h", "");

/*
      Mirrors a curve_base segment (axial symetry, where axis is a straight line between y_start and y_destination).
      It does not copy the curve_base, but still returns its index.
      mirror(int curve_base_index);
      * curve_base_index : curve_base_index to be mirrored


      Does not copy the hypercurve, but  returns the hypercurve index.
*/
mirror = ffunction(int hc_mirror_curve_base (int), "hypercurve_faust.h", "");
