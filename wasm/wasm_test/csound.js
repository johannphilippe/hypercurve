/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
var $jscomp=$jscomp||{};$jscomp.scope={};var COMPILED=!0,goog=goog||{};goog.global=this||self;goog.exportPath_=function(a,b,c,d){a=a.split(".");d=d||goog.global;a[0]in d||"undefined"==typeof d.execScript||d.execScript("var "+a[0]);for(var e;a.length&&(e=a.shift());)if(a.length||void 0===b)d=d[e]&&d[e]!==Object.prototype[e]?d[e]:d[e]={};else if(!c&&goog.isObject(b)&&goog.isObject(d[e]))for(var f in b)b.hasOwnProperty(f)&&(d[e][f]=b[f]);else d[e]=b};
goog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2020;goog.DEBUG=!0;goog.LOCALE="en";goog.getLocale=function(){return goog.LOCALE};goog.TRUSTED_SITE=!0;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;
goog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b,c){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var d=a;(d=d.substring(0,d.lastIndexOf(".")))&&!goog.getObjectByName(d);)goog.implicitNamespaces_[d]=!0}goog.exportPath_(a,b,c)};goog.NONCE_PATTERN_=/^[\w+/_-]+[=]{0,2}$/;
goog.getScriptNonce_=function(a){a=(a||goog.global).document;return(a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(a)?a:""};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module=function(a){if("string"!==typeof a||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");
goog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};goog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:"es6",GOOG:"goog"};goog.moduleLoaderState_=null;
goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?"function"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};
goog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0};
goog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(a in goog.loadedModules_)throw Error('Module with namespace "'+a+'" already exists.');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||"function"!=typeof b.getCurrentModulePath)throw Error('Module with namespace "'+
a+'" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&null!=goog.getObjectByName(a)},goog.implicitNamespaces_={"goog.module":!0});
goog.getObjectByName=function(a,b){a=a.split(".");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b};goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};
goog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath="";goog.abstractMethod=function(){throw Error("unimplemented abstract method");};
goog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";goog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRUSTED_TYPES_POLICY_NAME="goog";
goog.hasBadLetScoping=null;
goog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};var c={},d=c;if("function"===typeof a)d=a.call(void 0,d);else if("string"===typeof a)d=goog.loadModuleFromSource_.call(void 0,d,a);else throw Error("Invalid module definition");var e=goog.moduleLoaderState_.moduleName;if("string"===typeof e&&e)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(e,d,c!==d):goog.SEAL_MODULE_EXPORTS&&
Object.seal&&"object"==typeof d&&null!=d&&Object.seal(d),goog.loadedModules_[e]={exports:d,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error('Invalid module name "'+e+'"');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a,b){eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(b));return a};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};
goog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};goog.typeOf=function(a){var b=typeof a;return"object"!=b?b:a?Array.isArray(a)?"array":b:"null"};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};
goog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};goog.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,goog.UID_PROPERTY_)&&a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};
goog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if("function"===typeof a.clone)return a.clone();if("undefined"!==typeof Map&&a instanceof Map)return new Map(a);if("undefined"!==typeof Set&&a instanceof Set)return new Set(a);b="array"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};
goog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};
goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}};goog.now=function(){return Date.now()};goog.globalEval=function(a){(0,eval)(a)};
goog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with ".". You passed: '+a);var c=function(e){return goog.cssNameMapping_[e]||e},d=function(e){e=e.split("-");for(var f=[],g=0;g<e.length;g++)f.push(c(e[g]));return f.join("-")};d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(e){return e};a=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};
goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.GetMsgOptions=function(){};
goog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,"&lt;"));c&&c.unescapeHtmlEntities&&(a=a.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&apos;/g,"'").replace(/&quot;/g,'"').replace(/&amp;/g,"&"));b&&(a=a.replace(/\{\$([^}]+)}/g,function(d,e){return null!=b&&e in b?b[e]:d}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,!0,c)};goog.exportProperty=function(a,b,c){a[b]=c};
goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(d,e,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++)g[h-2]=arguments[h];return b.prototype[e].apply(d,g)}};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");a.call(goog.global)};COMPILED||(goog.global.COMPILED=COMPILED);
goog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;
goog.defineClass.createSealingConstructor_=function(a,b){return goog.defineClass.SEAL_CLASS_INSTANCES?function(){var c=a.apply(this,arguments)||this;c[goog.UID_PROPERTY_]=c[goog.UID_PROPERTY_];return c}:a};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};goog.identity_=function(a){return a};
goog.createTrustedTypesPolicy=function(a){var b=null,c=goog.global.trustedTypes;if(!c||!c.createPolicy)return b;try{b=c.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_})}catch(d){goog.logToConsole_(d.message)}return b};
!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.isEdge_=function(){return!!(goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"").match(/Edge\/(\d+)(\.\d)*/i)},goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?"complete"!=a.readyState:"loading"==a.readyState},goog.findBasePath_=function(){if(void 0!=goog.global.CLOSURE_BASE_PATH&&"string"===typeof goog.global.CLOSURE_BASE_PATH)goog.basePath=
goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;a=b?[b]:a.getElementsByTagName("SCRIPT");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?");d=-1==d?c.length:d;if("base.js"==c.slice(d-7,d)){goog.basePath=c.slice(0,d-7);break}}}},goog.findBasePath_(),goog.protectScriptTag_=function(a){return a.replace(/<\/(SCRIPT)/ig,"\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={};this.idToPath_={};this.written_={};this.loadingDeps_=
[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory;this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error("Unregonized namespace: "+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},
goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{}));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=function(a){this.factory_=a},goog.DebugLoader_.prototype.load_=
function(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(e){var f=b.getPathFromDeps_(e);if(!f)throw Error("Bad dependency path or symbol: "+e);if(!b.written_[f]){b.written_[f]=!0;e=b.dependencies_[f];for(f=0;f<e.requires.length;f++)goog.isProvided_(e.requires[f])||d(e.requires[f]);c.push(e)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else goog.logToConsole_("goog.require could not find: "+a)},goog.DebugLoader_.prototype.loadDeps_=
function(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error("Cannot call pause after the call to load.");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error("Double call to loaded.");e=!0;a.loaded_(d)},pending:function(){for(var g=[],h=0;h<a.loadingDeps_.length;h++)g.push(a.loadingDeps_[h]);return g},setModuleState:function(g){goog.moduleLoaderState_={type:g,
moduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(g,h,k){k&&(goog.loadedModules_[k]={exports:h,type:goog.ModuleType.ES6,moduleId:k||""})},registerGoogModuleExports:function(g,h){goog.loadedModules_[g]={exports:h,type:goog.ModuleType.GOOG,moduleId:g}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(g){if(c)throw Error("Cannot register with defer after the call to load.");a.defer_(d,g)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};
try{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);break}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==
a.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=function(a){return a in this.idToPath_?
this.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,b,c){},goog.LoadController.prototype.setModuleState=
function(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf("://");0<=b&&(a=a.substring(b+3),b=a.indexOf("/"),0<=b&&(a=a.substring(b+1)));return a},
goog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=function(a){delete goog.Dependency.callbackMap_[a]},
goog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error("Callback key "+a+" does not exist (was base.js loaded more than once?).");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=goog.global.document;if("complete"==
b.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\bdeps.js$/.test(this.path)){a.loaded();return}throw Error('Cannot write "'+this.path+'" after document load');}var c=goog.getScriptNonce_();if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var d=function(h){h.readyState&&"complete"!=h.readyState?h.onload=d:(goog.Dependency.unregisterCallback_(e),a.loaded())};var e=goog.Dependency.registerCallback_(d);c=c?' nonce="'+c+'"':"";var f='<script src="'+this.path+'"'+
c+(goog.Dependency.defer_?" defer":"")+' id="script-'+e+'">\x3c/script>';f+="<script"+c+">";f=goog.Dependency.defer_?f+("document.getElementById('script-"+e+"').onload = function() {\n  goog.Dependency.callback_('"+e+"', this);\n};\n"):f+("goog.Dependency.callback_('"+e+"', document.getElementById('script-"+e+"'));");f+="\x3c/script>";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(f):f)}else{var g=b.createElement("script");g.defer=goog.Dependency.defer_;g.async=!1;c&&(g.nonce=
c);g.onload=function(){g.onload=null;a.loaded()};g.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(g)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),a.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,
b,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(m,n){var l="",p=goog.getScriptNonce_();p&&(l=' nonce="'+p+'"');m=n?'<script type="module" crossorigin'+l+">"+n+"\x3c/script>":'<script type="module" crossorigin src="'+m+'"'+l+">\x3c/script>";d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(m):m)}function c(m,n){var l=d.createElement("script");l.defer=!0;l.async=!1;l.type="module";l.setAttribute("crossorigin",
!0);var p=goog.getScriptNonce_();p&&(l.nonce=p);n?l.text=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(n):n:l.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(m):m;d.head.appendChild(l)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);
a.setModuleState(goog.ModuleType.ES6)});f(void 0,'goog.Dependency.callback_("'+g+'")');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(m){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,m,goog.moduleLoaderState_.moduleName)});f(void 0,'import * as m from "'+this.path+'"; goog.Dependency.callback_("'+h+'", m)');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);a.clearModuleState();a.loaded()});f(void 0,'goog.Dependency.callback_("'+
k+'")')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=goog.loadFileSync_(e.path);e.contents_&&(e.contents_=
e.transform(e.contents_),e.contents_&&(e.contents_+="\n//# sourceURL="+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var m=e.contents_;e.contents_=null;goog.globalEval(goog.CLOSURE_EVAL_PREFILTER_.createScript(m));if(f)var n=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),n)});a.loaded()}}
function d(){var m=goog.global.document,n=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(n);c()}),l=goog.getScriptNonce_();l="<script"+(l?' nonce="'+l+'"':"")+">"+goog.protectScriptTag_('goog.Dependency.callback_("'+n+'");')+"\x3c/script>";m.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(l):l)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,a.loaded()):
a.pause();else{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length;if(goog.Dependency.defer_&&(g||goog.isDocumentLoading_()))a.defer(function(){c()});else{var h=goog.global.document;g=goog.inHtmlDocument_()&&("ActiveXObject"in goog.global||goog.isEdge_());if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!g){goog.Dependency.defer_=!0;a.pause();var k=h.onreadystatechange;h.onreadystatechange=function(){"interactive"==h.readyState&&(h.onreadystatechange=
k,c(),a.resume());"function"===typeof k&&k.apply(void 0,arguments)}}else goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,
c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=function(a){return goog.LOAD_MODULE_USING_EVAL&&void 0!==goog.global.JSON?"goog.loadModule("+goog.global.JSON.stringify(a+"\n//# sourceURL="+this.path+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+a+"\n;return exports});\n//# sourceURL="+this.path+"\n"},goog.DebugLoader_.prototype.addDependency=function(a,b,c,d){b=
b||[];a=a.replace(/\\/g,"/");var e=goog.normalizePath_(goog.basePath+a);d&&"boolean"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d);this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(){},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,b,c,d,e):e.module==goog.ModuleType.ES6?goog.ASSUME_ES_MODULES_TRANSPILED?
new goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null,goog.global.CLOSURE_NO_DEPS||goog.debugLoader_.loadClosureDeps(),
goog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});if(!COMPILED){var isChrome87=!1;try{isChrome87=eval(goog.global.trustedTypes.emptyScript)!==goog.global.trustedTypes.emptyScript}catch(a){}goog.CLOSURE_EVAL_PREFILTER_=goog.global.trustedTypes&&isChrome87&&goog.createTrustedTypesPolicy("goog#base#devonly#eval")||{createScript:goog.identity_}};function atobPolyfill$$module$dist$__csound_wasm_inline(a){a=String(a).replace(/[=]+$/,"");1===a.length%4&&console.error("'atob' failed: The string to be decoded is not correctly encoded.");for(var b=0,c,d,e=0,f="";d=a.charAt(e++);~d&&(c=b%4?64*c+d:d,b++%4)&&(f+=String.fromCharCode(255&c>>(-2*b&6))))d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(d);return f}
function bufferFromBrowser$$module$dist$__csound_wasm_inline(a){return"undefined"!=typeof AudioWorkletGlobalScope?atobPolyfill$$module$dist$__csound_wasm_inline(a):window.atob(a)}function __toArrayBuffer$$module$dist$__csound_wasm_inline(a){a=bufferFromBrowser$$module$dist$__csound_wasm_inline(a);for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b.buffer}
var $jscompDefaultExport$$module$dist$__csound_wasm_inline=()=>__toArrayBuffer$$module$dist$__csound_wasm_inline(""),module$dist$__csound_wasm_inline=
{};module$dist$__csound_wasm_inline.default=$jscompDefaultExport$$module$dist$__csound_wasm_inline;const proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.proxy"),createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.endpoint"),releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.releaseProxy"),throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.thrown"),isObject$$module$node_modules$comlink$dist$esm$comlink_mjs=a=>"object"===typeof a&&null!==a||"function"===typeof a,proxyTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs=
{canHandle:a=>isObject$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&a[proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs],serialize(a){const {port1:b,port2:c}=new MessageChannel;expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b);return[c,[c]]},deserialize(a){a.start();return wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(a)}},throwTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs={canHandle:a=>isObject$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&
throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs in a,serialize({value:a}){return[a instanceof Error?{isError:!0,value:{message:a.message,name:a.name,stack:a.stack}}:{isError:!1,value:a},[]]},deserialize(a){if(a.isError)throw Object.assign(Error(a.value.message),a.value);throw a.value;}},transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs=new Map([["proxy",proxyTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs],["throw",throwTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs]]);
function expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=self){b.addEventListener("message",function e(d){if(d&&d.data){var {id:f,type:g,path:h}=Object.assign({path:[]},d.data),k=(d.data.argumentList||[]).map(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);try{const n=h.slice(0,-1).reduce((p,q)=>p[q],a),l=h.reduce((p,q)=>p[q],a);switch(g){case "GET":var m=l;break;case "SET":n[h.slice(-1)[0]]=fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(d.data.value);
m=!0;break;case "APPLY":m=l.apply(n,k);break;case "CONSTRUCT":const p=new l(...k);m=proxy$$module$node_modules$comlink$dist$esm$comlink_mjs(p);break;case "ENDPOINT":const {port1:q,port2:u}=new MessageChannel;expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,u);m=transfer$$module$node_modules$comlink$dist$esm$comlink_mjs(q,[q]);break;case "RELEASE":m=void 0;break;default:return}}catch(n){m={value:n,[throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:0}}Promise.resolve(m).catch(n=>
({value:n,[throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:0})).then(n=>{const [l,p]=toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(n);b.postMessage(Object.assign(Object.assign({},l),{id:f}),p);"RELEASE"===g&&(b.removeEventListener("message",e),closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(b))})}});b.start&&b.start()}function isMessagePort$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return"MessagePort"===a.constructor.name}
function closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a){isMessagePort$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&a.close()}function wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b){return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,[],b)}function throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(a){if(a)throw Error("Proxy has been released and is not useable");}
function createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=[],c=function(){}){let d=!1;const e=new Proxy(c,{get(f,g){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);if(g===releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs)return()=>requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"RELEASE",path:b.map(h=>h.toString())}).then(()=>{closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a);d=!0});if("then"===
g){if(0===b.length)return{then:()=>e};f=requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"GET",path:b.map(h=>h.toString())}).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);return f.then.bind(f)}return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,[...b,g])},set(f,g,h){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);const [k,m]=toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(h);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,
{type:"SET",path:[...b,g].map(n=>n.toString()),value:k},m).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)},apply(f,g,h){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);f=b[b.length-1];if(f===createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs)return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"ENDPOINT"}).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);if("bind"===f)return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,
b.slice(0,-1));const [k,m]=processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(h);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"APPLY",path:b.map(n=>n.toString()),argumentList:k},m).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)},construct(f,g){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);const [h,k]=processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(g);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,
{type:"CONSTRUCT",path:b.map(m=>m.toString()),argumentList:h},k).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)}});return e}function myFlat$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return Array.prototype.concat.apply([],a)}
function processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(a){a=a.map(toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);return[a.map(b=>b[0]),myFlat$$module$node_modules$comlink$dist$esm$comlink_mjs(a.map(b=>b[1]))]}const transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs=new WeakMap;function transfer$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b){transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs.set(a,b);return a}
function proxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return Object.assign(a,{[proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:!0})}function windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=self,c="*"){return{postMessage:(d,e)=>a.postMessage(d,c,e),addEventListener:b.addEventListener.bind(b),removeEventListener:b.removeEventListener.bind(b)}}
function toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(a){for(const [b,c]of transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs)if(c.canHandle(a)){const [d,e]=c.serialize(a);return[{type:"HANDLER",name:b,value:d},e]}return[{type:"RAW",value:a},transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs.get(a)||[]]}
function fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(a){switch(a.type){case "HANDLER":return transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs.get(a.name).deserialize(a.value);case "RAW":return a.value}}
function requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b,c){return new Promise(d=>{const e=generateUUID$$module$node_modules$comlink$dist$esm$comlink_mjs();a.addEventListener("message",function h(g){g.data&&g.data.id&&g.data.id===e&&(a.removeEventListener("message",h),d(g.data))});a.start&&a.start();a.postMessage(Object.assign({id:e},b),c)})}
function generateUUID$$module$node_modules$comlink$dist$esm$comlink_mjs(){return Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}var module$node_modules$comlink$dist$esm$comlink_mjs={};module$node_modules$comlink$dist$esm$comlink_mjs.createEndpoint=createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.expose=expose$$module$node_modules$comlink$dist$esm$comlink_mjs;
module$node_modules$comlink$dist$esm$comlink_mjs.proxy=proxy$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.proxyMarker=proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.releaseProxy=releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.transfer=transfer$$module$node_modules$comlink$dist$esm$comlink_mjs;
module$node_modules$comlink$dist$esm$comlink_mjs.transferHandlers=transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.windowEndpoint=windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.wrap=wrap$$module$node_modules$comlink$dist$esm$comlink_mjs;var module$node_modules$lines_logger$lib$index={default:{}};module$node_modules$lines_logger$lib$index.default.__esModule=!0;module$node_modules$lines_logger$lib$index.default.LoggerFactory=module$node_modules$lines_logger$lib$index.default.logLevels=void 0;module$node_modules$lines_logger$lib$index.default.logLevels={log_raise_error:1,log_with_warnings:2,trace:3,debug:4,info:5,warn:6,error:7,disable:8};
var LoggerFactory$$module$node_modules$lines_logger$lib$index=function(){function a(b,c){if(void 0===b&&(b="log_with_warnings"),void 0===c&&(c=null),this.logLevel=b,!module$node_modules$lines_logger$lib$index.default.logLevels[b])throw Error("Invalid log level "+b+" allowed: "+JSON.stringify(module$node_modules$lines_logger$lib$index.default.logLevels));this.mockConsole=c||console}return a.prototype.dummy=function(){},a.prototype.setLogWarnings=function(b){this.logLevel=b},a.prototype.getLogWarnings=
function(){return this.logLevel},a.prototype.getSingleLoggerColor=function(b,c,d){return this.getSingleLoggerStyle(b,this.getColorStyle(c),d)},a.prototype.getSingleLogger=function(b,c){var d=this.getRandomColor(b);return this.getSingleLoggerStyle(b,this.getColorStyle(d),c)},a.prototype.getSingleLoggerStyle=function(b,c,d,e){var f=this;return void 0===e&&(e="log_with_warnings"),function(){for(var g=[],h=0;h<arguments.length;h++)g[h]=arguments[h];if(module$node_modules$lines_logger$lib$index.default.logLevels[f.logLevel]>
module$node_modules$lines_logger$lib$index.default.logLevels[e])return f.dummy;g=Array.prototype.slice.call(g);h=g.shift().split("{}");for(var k=[f.mockConsole,"%c"+b,c],m=0;m<h.length;m++)k.push(h[m]),void 0!==g[m]&&k.push(g[m]);if(h.length-1!==g.length)if("log_with_warnings"===f.logLevel)f.mockConsole.error("MissMatch amount of arguments");else if("log_raise_error"===f.logLevel)throw Error("MissMatch amount of arguments");return Function.prototype.bind.apply(d,k)}},a.prototype.getLoggerColor=function(b,
c){return this.getLoggerStyle(b,this.getColorStyle(c))},a.prototype.getColorStyle=function(b){return"color: white; background-color: "+b+"; padding: 2px 6px; border-radius: 2px; font-size: 10px"},a.getHash=function(b,c){void 0===c&&(c=0);var d=3735928559^c;c^=1103547991;for(var e=0,f;e<b.length;e++)f=b.charCodeAt(e),d=Math.imul(d^f,2654435761),c=Math.imul(c^f,1597334677);return d=Math.imul(d^d>>>16,2246822507)^Math.imul(c^c>>>13,3266489909),4294967296*(2097151&(Math.imul(c^c>>>16,2246822507)^Math.imul(d^
d>>>13,3266489909)))+(d>>>0)},a.prototype.getRandomColor=function(b){void 0===b&&(b="");b=a.getHash(b);for(var c="#",d=0;3>d;d++)c+=("00"+(8+(b>>7*d&127)).toString(16)).substr(-2);return c},a.prototype.getLogger=function(b){return this.getLoggerColor(b,this.getRandomColor(b))},a.prototype.getLoggerStyle=function(b,c){return{trace:this.getSingleLoggerStyle(b,c,this.mockConsole.trace,"trace"),debug:this.getSingleLoggerStyle(b,c,this.mockConsole.debug,"debug"),log:this.getSingleLoggerStyle(b,c,this.mockConsole.log,
"info"),warn:this.getSingleLoggerStyle(b,c,this.mockConsole.warn,"warn"),error:this.getSingleLoggerStyle(b,c,this.mockConsole.error,"error")}},a}();module$node_modules$lines_logger$lib$index.default.LoggerFactory=LoggerFactory$$module$node_modules$lines_logger$lib$index;let logWorkletMain$$module$src$logger,logWorkletWorker$$module$src$logger,logSABMain$$module$src$logger,logSABWorker$$module$src$logger,logVANMain$$module$src$logger,logVANWorker$$module$src$logger,logOldSpnMain$$module$src$logger,logOldSpnWorker$$module$src$logger,logIndex$$module$src$logger,logSPNMainSingle$$module$src$logger,logSinglethreadWorkletMain$$module$src$logger,logSinglethreadWorkletWorker$$module$src$logger,logCommonUtils$$module$src$logger,logWasmModule$$module$src$logger,logMidiRequest$$module$src$logger;
const isProd$$module$src$logger=1;logWorkletMain$$module$src$logger=a=>b=>{};logWorkletWorker$$module$src$logger=a=>b=>{};logSABMain$$module$src$logger=a=>b=>{};logSABWorker$$module$src$logger=a=>b=>{};logVANMain$$module$src$logger=a=>b=>{};logVANWorker$$module$src$logger=a=>b=>{};logOldSpnMain$$module$src$logger=a=>b=>{};logOldSpnWorker$$module$src$logger=a=>b=>{};logIndex$$module$src$logger=a=>b=>{};logSPNMainSingle$$module$src$logger=a=>b=>{};
logSinglethreadWorkletMain$$module$src$logger=a=>b=>{};logSinglethreadWorkletWorker$$module$src$logger=a=>b=>{};logCommonUtils$$module$src$logger=a=>b=>{};logWasmModule$$module$src$logger=a=>b=>{};logMidiRequest$$module$src$logger=a=>b=>{};var $jscompDefaultExport$$module$src$logger=a=>b=>{},module$src$logger={};module$src$logger.default=$jscompDefaultExport$$module$src$logger;module$src$logger.logCommonUtils=logCommonUtils$$module$src$logger;module$src$logger.logIndex=logIndex$$module$src$logger;
module$src$logger.logMidiRequest=logMidiRequest$$module$src$logger;module$src$logger.logOldSpnMain=logOldSpnMain$$module$src$logger;module$src$logger.logOldSpnWorker=logOldSpnWorker$$module$src$logger;module$src$logger.logSABMain=logSABMain$$module$src$logger;module$src$logger.logSABWorker=logSABWorker$$module$src$logger;module$src$logger.logSPNMainSingle=logSPNMainSingle$$module$src$logger;module$src$logger.logSinglethreadWorkletMain=logSinglethreadWorkletMain$$module$src$logger;
module$src$logger.logSinglethreadWorkletWorker=logSinglethreadWorkletWorker$$module$src$logger;module$src$logger.logVANMain=logVANMain$$module$src$logger;module$src$logger.logVANWorker=logVANWorker$$module$src$logger;module$src$logger.logWasmModule=logWasmModule$$module$src$logger;module$src$logger.logWorkletMain=logWorkletMain$$module$src$logger;module$src$logger.logWorkletWorker=logWorkletWorker$$module$src$logger;const csoundCreate$$module$src$modules$instantiation=a=>()=>a.exports.csoundCreateWasi();csoundCreate$$module$src$modules$instantiation.toString=()=>"create = async () => undefined;";const csoundDestroy$$module$src$modules$instantiation=a=>b=>a.exports.csoundDestroy(b);csoundDestroy$$module$src$modules$instantiation.toString=()=>"destroy = async () => undefined;";const csoundGetAPIVersion$$module$src$modules$instantiation=a=>()=>a.exports.csoundGetAPIVersion();
csoundGetAPIVersion$$module$src$modules$instantiation.toString=()=>"getAPIVersion = async () => Number;";const csoundGetVersion$$module$src$modules$instantiation=a=>()=>a.exports.csoundGetVersion();csoundGetVersion$$module$src$modules$instantiation.toString=()=>"getVersion = async () => Number;";const csoundInitialize$$module$src$modules$instantiation=a=>(b,c)=>a.exports.csoundInitialize(c);csoundInitialize$$module$src$modules$instantiation.toString=()=>"initialize = async () => Number;";
var module$src$modules$instantiation={};module$src$modules$instantiation.csoundCreate=csoundCreate$$module$src$modules$instantiation;module$src$modules$instantiation.csoundDestroy=csoundDestroy$$module$src$modules$instantiation;module$src$modules$instantiation.csoundGetAPIVersion=csoundGetAPIVersion$$module$src$modules$instantiation;module$src$modules$instantiation.csoundGetVersion=csoundGetVersion$$module$src$modules$instantiation;module$src$modules$instantiation.csoundInitialize=csoundInitialize$$module$src$modules$instantiation;const WITH_TEXT_ENCODER_POLYFILL$$module$src$utils$text_encoders=!1;function TextEncoderPoly$$module$src$utils$text_encoders(){this.encoding="utf8";return this}TextEncoderPoly$$module$src$utils$text_encoders.prototype.encode=function(a){if("string"!==typeof a)throw new TypeError("passed argument must be of type string "+a+" "+typeof a);a=unescape(encodeURIComponent(a));const b=new Uint8Array(a.length);[...a].forEach(function(c,d){b[d]=c.codePointAt(0)});return b};
function TextDecoderPoly$$module$src$utils$text_encoders(){this.encoding="utf8";this.ignoreBOM=!1;this.trimNull=a=>{const b=a.indexOf("\x00");return-1<b?a.slice(0,Math.max(0,b)):a};this.decode=function(a,b){if(void 0===a)return"";if("boolean"!==typeof(void 0!==b&&"stream"in b?b.stream:!1))throw new TypeError("stream option must be boolean");if(ArrayBuffer.isView(a)){a=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);const c=Array.from({length:a.length});a.forEach(function(d,e){c[e]=String.fromCodePoint(d)});
return this.trimNull(c.join(""))}throw new TypeError("passed argument must be an array buffer view");}}
const decoder$$module$src$utils$text_encoders=WITH_TEXT_ENCODER_POLYFILL$$module$src$utils$text_encoders?new TextDecoderPoly$$module$src$utils$text_encoders:new TextDecoder("utf8"),encoder$$module$src$utils$text_encoders=WITH_TEXT_ENCODER_POLYFILL$$module$src$utils$text_encoders?new TextEncoderPoly$$module$src$utils$text_encoders:new TextEncoder("utf8"),uint2String$$module$src$utils$text_encoders=a=>decoder$$module$src$utils$text_encoders.decode(a);var module$src$utils$text_encoders={};
module$src$utils$text_encoders.decoder=decoder$$module$src$utils$text_encoders;module$src$utils$text_encoders.encoder=encoder$$module$src$utils$text_encoders;module$src$utils$text_encoders.uint2String=uint2String$$module$src$utils$text_encoders;const trimNull$$module$src$utils$trim_null=a=>{const b=a.indexOf("\x00");return-1<b?a.substr(0,b):a};var module$src$utils$trim_null={};module$src$utils$trim_null.trimNull=trimNull$$module$src$utils$trim_null;const freeStringPtr$$module$src$utils$string_pointers=(a,b)=>{a.exports.freeStringMem(b)},ptr2string$$module$src$utils$string_pointers=(a,b)=>{({buffer:a}=a.wasi.memory);b=new Uint8Array(a,b);b=uint2String$$module$src$utils$text_encoders(b);return trimNull$$module$src$utils$trim_null(b)},string2ptr$$module$src$utils$string_pointers=(a,b)=>{if("string"!==typeof b)console.error("Expected string but got",typeof b);else{b=encoder$$module$src$utils$text_encoders.encode(b);var c=a.exports.allocStringMem(b.length);
({buffer:a}=a.wasi.memory);(new Uint8Array(a,c,b.length+1)).set(b);return c}};var module$src$utils$string_pointers={};module$src$utils$string_pointers.freeStringPtr=freeStringPtr$$module$src$utils$string_pointers;module$src$utils$string_pointers.ptr2string=ptr2string$$module$src$utils$string_pointers;module$src$utils$string_pointers.string2ptr=string2ptr$$module$src$utils$string_pointers;const csoundParseOrc$$module$src$modules$performance=a=>(b,c)=>a.exports.csoundParseOrc(b,c);csoundParseOrc$$module$src$modules$performance.toString=()=>"parseOrc = async (orchestra) => Object;";const csoundCompileTree$$module$src$modules$performance=a=>(b,c)=>a.exports.csoundCompileTree(b,c);csoundCompileTree$$module$src$modules$performance.toString=()=>"compileTree = async (tree) => Number;";
const csoundCompileOrc$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundCompileOrc(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundCompileOrc$$module$src$modules$performance.toString=()=>"compileOrc = async (orchestra) => Number;";
const csoundEvalCode$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundEvalCode(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundEvalCode$$module$src$modules$performance.toString=()=>"csoundEvalCode = async (orchestra) => Number;";const csoundStart$$module$src$modules$performance=a=>b=>a.exports.csoundStartWasi(b);csoundStart$$module$src$modules$performance.toString=()=>"start = async () => Number;";
const csoundCompileCsd$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);let d;try{d=a.exports.csoundCompileCsd(b,c)}catch(e){console.error(e)}freeStringPtr$$module$src$utils$string_pointers(a,c);return d};csoundCompileCsd$$module$src$modules$performance.toString=()=>"compileCsd = async (path) => Number;";
const csoundCompileCsdText$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundCompileCsdText(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundCompileCsdText$$module$src$modules$performance.toString=()=>"compileCsdText = async (csoundDocument) => Number;";const csoundPerform$$module$src$modules$performance=a=>b=>a.exports.csoundPerform(b);csoundPerform$$module$src$modules$performance.toString=()=>"perform = async () => Number;";
const csoundPerformKsmps$$module$src$modules$performance=a=>b=>a.exports.csoundPerformKsmpsWasi(b);csoundPerformKsmps$$module$src$modules$performance.toString=()=>"performKsmps = async (csound) => Number;";const csoundPerformBuffer$$module$src$modules$performance=a=>b=>a.exports.csoundPerformBuffer(b);csoundPerformBuffer$$module$src$modules$performance.toString=()=>"performBuffer = async (csound) => Number;";const csoundStop$$module$src$modules$performance=a=>b=>a.exports.csoundStop(b);
csoundStop$$module$src$modules$performance.toString=()=>"stop = async () => undefined;";const csoundCleanup$$module$src$modules$performance=a=>b=>a.exports.csoundCleanup(b);csoundCleanup$$module$src$modules$performance.toString=()=>"cleanup = async () => Number;";const csoundReset$$module$src$modules$performance=a=>b=>a.exports.csoundResetWasi(b);csoundReset$$module$src$modules$performance.toString=()=>"reset = async () => Number;";var module$src$modules$performance={};
module$src$modules$performance.csoundCleanup=csoundCleanup$$module$src$modules$performance;module$src$modules$performance.csoundCompileCsd=csoundCompileCsd$$module$src$modules$performance;module$src$modules$performance.csoundCompileCsdText=csoundCompileCsdText$$module$src$modules$performance;module$src$modules$performance.csoundCompileOrc=csoundCompileOrc$$module$src$modules$performance;module$src$modules$performance.csoundCompileTree=csoundCompileTree$$module$src$modules$performance;
module$src$modules$performance.csoundEvalCode=csoundEvalCode$$module$src$modules$performance;module$src$modules$performance.csoundParseOrc=csoundParseOrc$$module$src$modules$performance;module$src$modules$performance.csoundPerform=csoundPerform$$module$src$modules$performance;module$src$modules$performance.csoundPerformBuffer=csoundPerformBuffer$$module$src$modules$performance;module$src$modules$performance.csoundPerformKsmps=csoundPerformKsmps$$module$src$modules$performance;
module$src$modules$performance.csoundReset=csoundReset$$module$src$modules$performance;module$src$modules$performance.csoundStart=csoundStart$$module$src$modules$performance;module$src$modules$performance.csoundStop=csoundStop$$module$src$modules$performance;const sizeOfPrimitive$$module$src$utils$native_sizes={int:4,MYFLT:4,char:1},sizeofStruct$$module$src$utils$native_sizes=a=>a.reduce((b,[,c,...d])=>b+("char"===c?sizeOfPrimitive$$module$src$utils$native_sizes[c]*d[0]:sizeOfPrimitive$$module$src$utils$native_sizes[c]),0);var module$src$utils$native_sizes={};module$src$utils$native_sizes.sizeOfPrimitive=sizeOfPrimitive$$module$src$utils$native_sizes;module$src$utils$native_sizes.sizeofStruct=sizeofStruct$$module$src$utils$native_sizes;const structBufferToObject$$module$src$utils$structure_buffer_to_object=(a,b)=>{[a]=a.reduce(([c,d],[e,f,...g])=>{g="char"===f?sizeOfPrimitive$$module$src$utils$native_sizes[f]*g[0]:sizeOfPrimitive$$module$src$utils$native_sizes[f];f="char"===f?trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(b.subarray(d,g)))||"":b[d];c[e]=f;return[c,d+g]},[{},0]);return a};var module$src$utils$structure_buffer_to_object={};
module$src$utils$structure_buffer_to_object.structBufferToObject=structBufferToObject$$module$src$utils$structure_buffer_to_object;const CSOUND_PARAMS$$module$src$structures=[["debug_mode","int"],["buffer_frames","int"],["hardware_buffer_frames","int"],["displays","int"],["ascii_graphs","int"],["postscript_graphs","int"],["message_level","int"],["tempo","int"],["ring_bell","int"],["use_cscore","int"],["terminate_on_midi","int"],["heartbeat","int"],["defer_gen01_load","int"],["midi_key","int"],["midi_key_cps","int"],["midi_key_oct","int"],["midi_key_pch","int"],["midi_velocity","int"],["midi_velocity_amp","int"],["no_default_paths",
"int"],["number_of_threads","int"],["syntax_check_only","int"],["csd_line_counts","int"],["compute_weights","int"],["realtime_mode","int"],["sample_accurate","int"],["sample_rate_override","MYFLT"],["control_rate_override","MYFLT"],["nchnls_override","int"],["nchnls_i_override","int"],["e0dbfs_override","MYFLT"],["daemon","int"],["ksmps_override","int"],["FFT_library","int"]],CS_MIDIDEVICE$$module$src$structures=[["device_name","char",64],["interface_name","char",64],["device_id","char",64],["midi_module",
"char",64],["isOutput","int"]];var module$src$structures={};const csoundGetSr$$module$src$modules$attributes=a=>b=>a.exports.csoundGetSr(b);csoundGetSr$$module$src$modules$attributes.toString=()=>"getSr = async () => Number;";const csoundGetKr$$module$src$modules$attributes=a=>b=>a.exports.csoundGetKr(b);csoundGetKr$$module$src$modules$attributes.toString=()=>"getKr = async () => Number;";const csoundGetKsmps$$module$src$modules$attributes=a=>b=>a.exports.csoundGetKsmps(b);csoundGetKsmps$$module$src$modules$attributes.toString=()=>"getKsmps = async () => Number;";
const csoundGetNchnls$$module$src$modules$attributes=a=>b=>a.exports.csoundGetNchnls(b);csoundGetNchnls$$module$src$modules$attributes.toString=()=>"getNchnls = async () => Number;";const csoundGetNchnlsInput$$module$src$modules$attributes=a=>b=>a.exports.csoundGetNchnlsInput(b);csoundGetNchnlsInput$$module$src$modules$attributes.toString=()=>"getNchnlsInput = async () => Number;";const csoundGet0dBFS$$module$src$modules$attributes=a=>b=>a.exports.csoundGet0dBFS(b);
csoundGet0dBFS$$module$src$modules$attributes.toString=()=>"get0dBFS = async () => Number;";const csoundGetA4$$module$src$modules$attributes=a=>b=>a.exports.csoundGetA4(b);csoundGetA4$$module$src$modules$attributes.toString=()=>"getA4 = async () => Number;";const csoundGetCurrentTimeSamples$$module$src$modules$attributes=a=>b=>a.exports.csoundGetCurrentTimeSamples(b);csoundGetCurrentTimeSamples$$module$src$modules$attributes.toString=()=>"getCurrentTimeSamples = async () => Number;";
const csoundGetSizeOfMYFLT$$module$src$modules$attributes=a=>b=>a.exports.csoundGetSizeOfMYFLT(b);csoundGetSizeOfMYFLT$$module$src$modules$attributes.toString=()=>"getSizeOfMYFLT = async () => Number;";const csoundSetOption$$module$src$modules$attributes=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundSetOption(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundSetOption$$module$src$modules$attributes.toString=()=>"setOption = async (option) => Number;";
const csoundSetParams$$module$src$modules$attributes=a=>(b,c)=>{a.exports.csoundSetParams(b,c)};csoundSetParams$$module$src$modules$attributes.toString=()=>"setParams = async (csoundParams) => undefined;";
const csoundGetParams$$module$src$modules$attributes=a=>b=>{var {buffer:c}=a.wasi.memory;const d=sizeofStruct$$module$src$utils$native_sizes(CSOUND_PARAMS$$module$src$structures),e=a.exports.allocCsoundParamsStruct();c=new Uint8Array(c,e,d);a.exports.csoundGetParams(b,e);b=structBufferToObject$$module$src$utils$structure_buffer_to_object(CSOUND_PARAMS$$module$src$structures,c);a.exports.freeCsoundParams(e);return b};csoundGetParams$$module$src$modules$attributes.toString=()=>"getParams = async () => CSOUND_PARAMS;";
const csoundGetDebug$$module$src$modules$attributes=a=>b=>a.exports.csoundGetDebug(b);csoundGetDebug$$module$src$modules$attributes.toString=()=>"getDebug = async () => Number;";const csoundSetDebug$$module$src$modules$attributes=a=>(b,c)=>{a.exports.csoundSetDebug(b,c)};csoundSetDebug$$module$src$modules$attributes.toString=()=>"setDebug = async (number) => undefined;";var module$src$modules$attributes={};module$src$modules$attributes.csoundGet0dBFS=csoundGet0dBFS$$module$src$modules$attributes;
module$src$modules$attributes.csoundGetA4=csoundGetA4$$module$src$modules$attributes;module$src$modules$attributes.csoundGetCurrentTimeSamples=csoundGetCurrentTimeSamples$$module$src$modules$attributes;module$src$modules$attributes.csoundGetDebug=csoundGetDebug$$module$src$modules$attributes;module$src$modules$attributes.csoundGetKr=csoundGetKr$$module$src$modules$attributes;module$src$modules$attributes.csoundGetKsmps=csoundGetKsmps$$module$src$modules$attributes;
module$src$modules$attributes.csoundGetNchnls=csoundGetNchnls$$module$src$modules$attributes;module$src$modules$attributes.csoundGetNchnlsInput=csoundGetNchnlsInput$$module$src$modules$attributes;module$src$modules$attributes.csoundGetParams=csoundGetParams$$module$src$modules$attributes;module$src$modules$attributes.csoundGetSizeOfMYFLT=csoundGetSizeOfMYFLT$$module$src$modules$attributes;module$src$modules$attributes.csoundGetSr=csoundGetSr$$module$src$modules$attributes;
module$src$modules$attributes.csoundSetDebug=csoundSetDebug$$module$src$modules$attributes;module$src$modules$attributes.csoundSetOption=csoundSetOption$$module$src$modules$attributes;module$src$modules$attributes.csoundSetParams=csoundSetParams$$module$src$modules$attributes;const csoundGetInputBufferSize$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetInputBufferSize(b);csoundGetInputBufferSize$$module$src$modules$rtaudio.toString=()=>"getInputBufferSize = async () => Number;";const csoundGetOutputBufferSize$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetOutputBufferSize(b);csoundGetOutputBufferSize$$module$src$modules$rtaudio.toString=()=>"getOutputBufferSize = async () => Number;";const csoundGetInputBuffer$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetInputBuffer(b);
csoundGetInputBuffer$$module$src$modules$rtaudio.toString=()=>"getInputBuffer = async () => Number;";const csoundGetOutputBuffer$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetOutputBuffer(b);csoundGetOutputBuffer$$module$src$modules$rtaudio.toString=()=>"getOutputBuffer = async () => Number;";const csoundGetSpin$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetSpin(b);csoundGetSpin$$module$src$modules$rtaudio.toString=()=>"getSpin = async (csound) => Number;";
const csoundGetSpout$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetSpout(b);csoundGetSpout$$module$src$modules$rtaudio.toString=()=>"getSpout = async () => Number;";var module$src$modules$rtaudio={};module$src$modules$rtaudio.csoundGetInputBuffer=csoundGetInputBuffer$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetInputBufferSize=csoundGetInputBufferSize$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetOutputBuffer=csoundGetOutputBuffer$$module$src$modules$rtaudio;
module$src$modules$rtaudio.csoundGetOutputBufferSize=csoundGetOutputBufferSize$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetSpin=csoundGetSpin$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetSpout=csoundGetSpout$$module$src$modules$rtaudio;function add$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>add$$module$node_modules$rambda$dist$rambda_mjs(a,c):Number(a)+Number(b)}const cloneList$$module$node_modules$rambda$dist$rambda_mjs=a=>Array.prototype.slice.call(a);function curry$$module$node_modules$rambda$dist$rambda_mjs(a,b=[]){return(...c)=>{c=[...b,...c];return c.length>=a.length?a(...c):curry$$module$node_modules$rambda$dist$rambda_mjs(a,c)}}
function adjustFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d=0>a?c.length+a:a;if(a>=c.length||0>d)return c;a=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);a[d]=b(a[d]);return a}const adjust$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(adjustFn$$module$node_modules$rambda$dist$rambda_mjs);
function all$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>all$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(let c=0;c<b.length;c++)if(!a(b[c]))return!1;return!0}function allPass$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{let c=0;for(;c<a.length;){if(!a[c](...b))return!1;c++}return!0}}function always$$module$node_modules$rambda$dist$rambda_mjs(a){return b=>a}
function and$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>and$$module$node_modules$rambda$dist$rambda_mjs(a,c):a&&b}function any$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>any$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=0;for(;c<b.length;){if(a(b[c],c))return!0;c++}return!1}
function anyPass$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{let c=0;for(;c<a.length;){if(a[c](...b))return!0;c++}return!1}}function append$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>append$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof b)return b.split("").concat(a);const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(b);c.push(a);return c}
function apply$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>apply$$module$node_modules$rambda$dist$rambda_mjs(a,c):a.apply(this,b)}const {isArray:isArray$$module$node_modules$rambda$dist$rambda_mjs}=Array;
function __findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a,b=0){for(const c in a)!1!==a.hasOwnProperty(c)&&"constructor"!==c&&("object"===typeof a[c]&&(b=Math.max(b,__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a[c]))),"function"===typeof a[c]&&(b=Math.max(b,a[c].length)));return b}
function __filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(){const a=[];let b=0;const c=arguments.length;for(;b<c&&"undefined"!==typeof arguments[b];)a[b]=arguments[b],b++;return a}
function __applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){var d=b-c.length;if(1===d)return f=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f));if(2===d)return(f,g)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g));if(3===d)return(f,g,h)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,
b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g,h));if(4===d)return(f,g,h,k)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g,h,k));if(4<d)return(...f)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,...f));if(isArray$$module$node_modules$rambda$dist$rambda_mjs(a)){var e=[];d=0;const f=a.length;
for(;d<f;d++){if("object"===typeof a[d]||isArray$$module$node_modules$rambda$dist$rambda_mjs(a[d]))e[d]=__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a[d],b,c);"function"===typeof a[d]&&(e[d]=a[d](...c))}return e}d={};for(e in a)!1!==a.hasOwnProperty(e)&&"constructor"!==e&&("object"===typeof a[e]?d[e]=__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a[e],b,c):"function"===typeof a[e]&&(d[e]=a[e](...c)));return d}
function applySpec$$module$node_modules$rambda$dist$rambda_mjs(a,...b){const c=__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a);return 0===c?()=>({}):__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,c,b)}function assocFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return Object.assign({},c,{[a]:b})}const assoc$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(assocFn$$module$node_modules$rambda$dist$rambda_mjs);
function _isInteger$$module$node_modules$rambda$dist$rambda_mjs(a){return a<<0===a}const isInteger$$module$node_modules$rambda$dist$rambda_mjs=Number.isInteger||_isInteger$$module$node_modules$rambda$dist$rambda_mjs;
function assocPathFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d="string"===typeof a?a.split(".").map(e=>isInteger$$module$node_modules$rambda$dist$rambda_mjs(Number(e))?Number(e):e):a;if(0===d.length)return b;a=d[0];if(1<d.length){const e="object"===typeof c&&null!==c&&c.hasOwnProperty(a)?c[a]:isInteger$$module$node_modules$rambda$dist$rambda_mjs(d[1])?[]:{};b=assocPathFn$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(d,1),b,e)}return isInteger$$module$node_modules$rambda$dist$rambda_mjs(a)&&
isArray$$module$node_modules$rambda$dist$rambda_mjs(c)?(c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c),c[a]=b,c):assoc$$module$node_modules$rambda$dist$rambda_mjs(a,b,c)}const assocPath$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(assocPathFn$$module$node_modules$rambda$dist$rambda_mjs);
function _curryN$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return function(){var d=0;let e=0;const f=b.length,g=arguments.length,h=Array(f+g);for(;d<f;)h[d]=b[d],d++;for(;e<g;)h[f+e]=arguments[e],e++;d=a-h.length;return h.length>=a?c.apply(this,h):_arity$1$$module$node_modules$rambda$dist$rambda_mjs(d,_curryN$$module$node_modules$rambda$dist$rambda_mjs(a,h,c))}}
function _arity$1$$module$node_modules$rambda$dist$rambda_mjs(a,b){switch(a){case 0:return function(){return b.apply(this,arguments)};case 1:return function(c){return b.apply(this,arguments)};case 2:return function(c,d){return b.apply(this,arguments)};case 3:return function(c,d,e){return b.apply(this,arguments)};case 4:return function(c,d,e,f){return b.apply(this,arguments)};case 5:return function(c,d,e,f,g){return b.apply(this,arguments)};case 6:return function(c,d,e,f,g,h){return b.apply(this,arguments)};
case 7:return function(c,d,e,f,g,h,k){return b.apply(this,arguments)};case 8:return function(c,d,e,f,g,h,k,m){return b.apply(this,arguments)};case 9:return function(c,d,e,f,g,h,k,m,n){return b.apply(this,arguments)};default:return function(c,d,e,f,g,h,k,m,n,l){return b.apply(this,arguments)}}}
function curryN$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>curryN$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(10<a)throw Error("First argument to _arity must be a non-negative integer no greater than ten");return _arity$1$$module$node_modules$rambda$dist$rambda_mjs(a,_curryN$$module$node_modules$rambda$dist$rambda_mjs(a,[],b))}
function bind$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>bind$$module$node_modules$rambda$dist$rambda_mjs(a,c):curryN$$module$node_modules$rambda$dist$rambda_mjs(a.length,(...c)=>a.apply(b,c))}function both$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>both$$module$node_modules$rambda$dist$rambda_mjs(a,c):(...c)=>a(...c)&&b(...c)}
function chain$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>chain$$module$node_modules$rambda$dist$rambda_mjs(a,c):[].concat(...b.map(a))}function clampFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(a>b)throw Error("min must not be greater than max in clamp(min, max, value)");if(c>=a&&c<=b)return c;if(c>b)return b;if(c<a)return a}const clamp$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(clampFn$$module$node_modules$rambda$dist$rambda_mjs);
function clone$$module$node_modules$rambda$dist$rambda_mjs(a){const b=isArray$$module$node_modules$rambda$dist$rambda_mjs(a)?Array(a.length):{};if(a&&a.getTime)return new Date(a.getTime());for(const c in a){const d=a[c];b[c]="object"===typeof d&&null!==d?d.getTime?new Date(d.getTime()):clone$$module$node_modules$rambda$dist$rambda_mjs(d):d}return b}function complement$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>!a(...b)}
class ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs{constructor(a){this.value=a}}function reduceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(c))throw new TypeError("reduce: list must be array or iterable");let d=0;const e=c.length;for(;d<e;){b=a(b,c[d],d,c);if(b instanceof ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs)return b.value;d++}return b}
const reduce$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(reduceFn$$module$node_modules$rambda$dist$rambda_mjs),reduceStopper$$module$node_modules$rambda$dist$rambda_mjs=a=>new ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs(a);
function _arity$$module$node_modules$rambda$dist$rambda_mjs(a,b){switch(a){case 0:return function(){return b.apply(this,arguments)};case 1:return function(c){return b.apply(this,arguments)};case 2:return function(c,d){return b.apply(this,arguments)};case 3:return function(c,d,e){return b.apply(this,arguments)};case 4:return function(c,d,e,f){return b.apply(this,arguments)};case 5:return function(c,d,e,f,g){return b.apply(this,arguments)};case 6:return function(c,d,e,f,g,h){return b.apply(this,arguments)};
case 7:return function(c,d,e,f,g,h,k){return b.apply(this,arguments)};case 8:return function(c,d,e,f,g,h,k,m){return b.apply(this,arguments)};case 9:return function(c,d,e,f,g,h,k,m,n){return b.apply(this,arguments)};case 10:return function(c,d,e,f,g,h,k,m,n,l){return b.apply(this,arguments)};default:throw Error("First argument to _arity must be a non-negative integer no greater than ten");}}
function _pipe$$module$node_modules$rambda$dist$rambda_mjs(a,b){return function(){return b.call(this,a.apply(this,arguments))}}
function pipe$$module$node_modules$rambda$dist$rambda_mjs(){if(0===arguments.length)throw Error("pipe requires at least one argument");return _arity$$module$node_modules$rambda$dist$rambda_mjs(arguments[0].length,reduceFn$$module$node_modules$rambda$dist$rambda_mjs(_pipe$$module$node_modules$rambda$dist$rambda_mjs,arguments[0],Array.prototype.slice.call(arguments,1,Infinity)))}
function compose$$module$node_modules$rambda$dist$rambda_mjs(){if(0===arguments.length)throw Error("compose requires at least one argument");return pipe$$module$node_modules$rambda$dist$rambda_mjs.apply(this,Array.prototype.slice.call(arguments,0).reverse())}function concat$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>concat$$module$node_modules$rambda$dist$rambda_mjs(a,c):"string"===typeof a?`${a}${b}`:[...a,...b]}
function cond$$module$node_modules$rambda$dist$rambda_mjs(a){return b=>{let c=!1,d;a.forEach(([e,f])=>{!c&&e(b)&&(c=!0,d=f(b))});return d}}const {keys:keys$1$$module$node_modules$rambda$dist$rambda_mjs}=Object;function mapArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){let d=0;const e=Array(b.length);for(;d<b.length;)e[d]=c?a(b[d],d):a(b[d]),d++;return e}
function mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,g);let c=0;const d=keys$1$$module$node_modules$rambda$dist$rambda_mjs(b),e=d.length,f={};for(;c<e;){const g=d[c];f[g]=a(b[g],g,b);c++}return f}const mapObjIndexed$$module$node_modules$rambda$dist$rambda_mjs=mapObject$$module$node_modules$rambda$dist$rambda_mjs;
function map$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>map$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!b)throw Error(INCORRECT_ITERABLE_INPUT);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?mapArray$$module$node_modules$rambda$dist$rambda_mjs(a,b):mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}
function max$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>max$$module$node_modules$rambda$dist$rambda_mjs(a,c):b>a?b:a}
function converge$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>converge$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=reduce$$module$node_modules$rambda$dist$rambda_mjs((d,e)=>max$$module$node_modules$rambda$dist$rambda_mjs(d,e.length),0,b);return curryN$$module$node_modules$rambda$dist$rambda_mjs(c,function(){return a.apply(this,map$$module$node_modules$rambda$dist$rambda_mjs(d=>d.apply(this,arguments),b))})}
function count$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>count$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?b.filter(c=>a(c)).length:0}function countBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>countBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c={};b.forEach(d=>{d=a(d);c[d]?c[d]++:c[d]=1});return c}
const dec$$module$node_modules$rambda$dist$rambda_mjs=a=>a-1;function isFalsy$$module$node_modules$rambda$dist$rambda_mjs(a){return void 0===a||null===a||!0===Number.isNaN(a)}function defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,c):isFalsy$$module$node_modules$rambda$dist$rambda_mjs(b)?a:b}
function type$$module$node_modules$rambda$dist$rambda_mjs(a){if(null===a)return"Null";if(void 0===a)return"Undefined";if(Number.isNaN(a))return"NaN";a=Object.prototype.toString.call(a).slice(8,-1);return"AsyncFunction"===a?"Promise":a}
function _lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`Cannot read property 'indexOf' of ${b}`);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(!["Object","Array","NaN","RegExp"].includes(c))return b.lastIndexOf(a);({length:c}=b);let d=-1;for(;-1<--c&&-1===d;)equals$$module$node_modules$rambda$dist$rambda_mjs(b[c],a)&&(d=c);return d}
function _indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`Cannot read property 'indexOf' of ${b}`);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(!["Object","Array","NaN","RegExp"].includes(c))return b.indexOf(a);let d=c=-1;const {length:e}=b;for(;++c<e&&-1===d;)equals$$module$node_modules$rambda$dist$rambda_mjs(b[c],a)&&(d=c);return d}
function _arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(a){const b=[];let c;for(;!(c=a.next()).done;)b.push(c.value);return b}function _equalsSets$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(a.size!==b.size)return!1;a=_arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(a.values());const c=_arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(b.values());return 0===a.filter(d=>-1===_indexOf$$module$node_modules$rambda$dist$rambda_mjs(d,c)).length}
function parseError$$module$node_modules$rambda$dist$rambda_mjs(a){const b=a.__proto__.toString();return["Error","TypeError"].includes(b)?[b,a.message]:[]}function parseDate$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toDateString?[!0,a.getTime()]:[!1]}function parseRegex$$module$node_modules$rambda$dist$rambda_mjs(a){return a.constructor!==RegExp?[!1]:[!0,a.toString()]}
function equals$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>equals$$module$node_modules$rambda$dist$rambda_mjs(a,f);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(c!==type$$module$node_modules$rambda$dist$rambda_mjs(b))return!1;if("Function"===c)return void 0===a.name?!1:a.name===b.name;if(["NaN","Undefined","Null"].includes(c))return!0;if("Number"===c)return Object.is(-0,a)!==Object.is(-0,b)?!1:a.toString()===b.toString();if(["String","Boolean"].includes(c))return a.toString()===
b.toString();if("Array"===c){c=Array.from(a);const f=Array.from(b);if(c.toString()!==f.toString())return!1;let g=!0;c.forEach((h,k)=>{g&&(h===f[k]||equals$$module$node_modules$rambda$dist$rambda_mjs(h,f[k])||(g=!1))});return g}var d=parseRegex$$module$node_modules$rambda$dist$rambda_mjs(a),e=parseRegex$$module$node_modules$rambda$dist$rambda_mjs(b);if(d[0])return e[0]?d[1]===e[1]:!1;if(e[0])return!1;d=parseDate$$module$node_modules$rambda$dist$rambda_mjs(a);e=parseDate$$module$node_modules$rambda$dist$rambda_mjs(b);
if(d[0])return e[0]?d[1]===e[1]:!1;if(e[0])return!1;d=parseError$$module$node_modules$rambda$dist$rambda_mjs(a);e=parseError$$module$node_modules$rambda$dist$rambda_mjs(b);if(d[0])return e[0]?d[0]===e[0]&&d[1]===e[1]:!1;if("Set"===c)return _equalsSets$$module$node_modules$rambda$dist$rambda_mjs(a,b);if("Object"===c){c=Object.keys(a);if(c.length!==Object.keys(b).length)return!1;let f=!0;c.forEach(g=>{if(f){const h=a[g];g=b[g];h===g||equals$$module$node_modules$rambda$dist$rambda_mjs(h,g)||(f=!1)}});
return f}return!1}function includes$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>includes$$module$node_modules$rambda$dist$rambda_mjs(a,c);if("string"===typeof b)return b.includes(a);if(!b)throw new TypeError(`Cannot read property \'indexOf\' of ${b}`);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?-1<_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b):!1}
class _Set$$module$node_modules$rambda$dist$rambda_mjs{constructor(){this.set=new Set;this.items={}}checkUniqueness(a){var b=type$$module$node_modules$rambda$dist$rambda_mjs(a);return["Null","Undefined","NaN"].includes(b)?b in this.items?!1:this.items[b]=!0:["Object","Array"].includes(b)?b in this.items?-1===_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,this.items[b])?(this.items[b].push(a),!0):!1:(this.items[b]=[a],!0):(b=this.set.size,this.set.add(a),this.set.size!==b)}}
function uniq$$module$node_modules$rambda$dist$rambda_mjs(a){const b=new _Set$$module$node_modules$rambda$dist$rambda_mjs,c=[];a.forEach(d=>{b.checkUniqueness(d)&&c.push(d)});return c}function difference$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>difference$$module$node_modules$rambda$dist$rambda_mjs(a,c):uniq$$module$node_modules$rambda$dist$rambda_mjs(a).filter(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,b))}
function dissoc$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>dissoc$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(null===b||void 0===b)return{};const c={};for(const d in b)c[d]=b[d];delete c[a];return c}function divide$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>divide$$module$node_modules$rambda$dist$rambda_mjs(a,c):a/b}
function drop$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>drop$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.slice(0<a?a:0)}function dropLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>dropLast$$module$node_modules$rambda$dist$rambda_mjs(a,c):0<a?b.slice(0,-a):b.slice()}
function dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);if(0===b.length)return b;const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if("function"!==typeof a)throw Error(`'predicate' is from wrong type ${typeof a}`);if(!c&&"string"!==typeof b)throw Error(`'iterable' is from wrong type ${typeof b}`);let d=!1;const e=[];let f=b.length;for(;0<f;)f--,d||!1!==a(b[f])?d&&e.push(b[f]):
(d=!0,e.push(b[f]));return c?e.reverse():e.reverse().join("")}function dropRepeats$$module$node_modules$rambda$dist$rambda_mjs(a){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error(`${a} is not a list`);const b=[];a.reduce((c,d)=>{equals$$module$node_modules$rambda$dist$rambda_mjs(c,d)||b.push(d);return d},void 0);return b}
function dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`${b} is not a list`);const c=[];b.reduce((d,e)=>{if(void 0===d)return c.push(e),e;a(d,e)||c.push(e);return e},void 0);return c}
function dropWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>dropWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if(!c&&"string"!==typeof b)throw Error("`iterable` is neither list nor a string");let d=!1;const e=[];let f=-1;for(;f++<b.length-1;)d?e.push(b[f]):a(b[f])||(d||(d=!0),e.push(b[f]));return c?e:e.join("")}
function either$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>either$$module$node_modules$rambda$dist$rambda_mjs(a,c):(...c)=>!(!a(...c)&&!b(...c))}
function endsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>endsWith$$module$node_modules$rambda$dist$rambda_mjs(a,e);if("string"===typeof b)return b.endsWith(a);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))return!1;const c=b.length-a.length;let d=!0;return a.filter((e,f)=>{if(!d)return!1;(e=equals$$module$node_modules$rambda$dist$rambda_mjs(e,b[f+c]))||(d=!1);return e}).length===a.length}
function prop$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>prop$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(b)return b[a]}function eqPropsFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return equals$$module$node_modules$rambda$dist$rambda_mjs(prop$$module$node_modules$rambda$dist$rambda_mjs(a,b),prop$$module$node_modules$rambda$dist$rambda_mjs(a,c))}const eqProps$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(eqPropsFn$$module$node_modules$rambda$dist$rambda_mjs);
function evolveArray$$module$node_modules$rambda$dist$rambda_mjs(a,b){return mapArray$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?a[d](c):c,b,!0)}
function evolveObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return mapObject$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>{if("Object"===type$$module$node_modules$rambda$dist$rambda_mjs(c)){const e=type$$module$node_modules$rambda$dist$rambda_mjs(a[d]);return"Function"===e?a[d](c):"Object"===e?evolve$$module$node_modules$rambda$dist$rambda_mjs(a[d],c):c}return"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?a[d](c):c},b)}
function evolve$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>evolve$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=type$$module$node_modules$rambda$dist$rambda_mjs(a),d=type$$module$node_modules$rambda$dist$rambda_mjs(b);if(d!==c)throw Error("iterableType !== rulesType");if(!["Object","Array"].includes(c))throw Error(`'iterable' and 'rules' are from wrong type ${c}`);return"Object"===d?evolveObject$$module$node_modules$rambda$dist$rambda_mjs(a,b):evolveArray$$module$node_modules$rambda$dist$rambda_mjs(a,
b)}function F$$module$node_modules$rambda$dist$rambda_mjs(){return!1}function filterObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={};for(const d in b)a(b[d],d,b)&&(c[d]=b[d]);return c}function filterArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){let d=0;const e=b.length,f=[];for(;d<e;)(c?a(b[d],d):a(b[d]))&&f.push(b[d]),d++;return f}
function filter$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>filter$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!b)throw Error("Incorrect iterable input");return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?filterArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,!1):filterObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}
function find$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>find$$module$node_modules$rambda$dist$rambda_mjs(a,e);let c=0;const d=b.length;for(;c<d;){const e=b[c];if(a(e))return e;c++}}function findIndex$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>findIndex$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=b.length;let d=-1;for(;++d<c;)if(a(b[d]))return d;return-1}
function findLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>findLast$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=b.length;for(;0<=--c;)if(a(b[c]))return b[c]}function findLastIndex$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>findLastIndex$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=b.length;for(;0<=--c;)if(a(b[c]))return c;return-1}
function flatten$$module$node_modules$rambda$dist$rambda_mjs(a,b){b=void 0===b?[]:b;for(let c=0;c<a.length;c++)isArray$$module$node_modules$rambda$dist$rambda_mjs(a[c])?flatten$$module$node_modules$rambda$dist$rambda_mjs(a[c],b):b.push(a[c]);return b}
function flipFn$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{if(1===b.length)return c=>a(c,b[0]);if(2===b.length)return a(b[1],b[0]);if(3===b.length)return a(b[1],b[0],b[2]);if(4===b.length)return a(b[1],b[0],b[2],b[3]);throw Error("R.flip doesn't work with arity > 4");}}function flip$$module$node_modules$rambda$dist$rambda_mjs(a){return flipFn$$module$node_modules$rambda$dist$rambda_mjs(a)}
function forEach$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>forEach$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(void 0!==b){if(isArray$$module$node_modules$rambda$dist$rambda_mjs(b))for(var c=0,d=b.length;c<d;)a(b[c]),c++;else{c=0;d=keys$1$$module$node_modules$rambda$dist$rambda_mjs(b);const e=d.length;for(;c<e;){const f=d[c];a(b[f],f,b);c++}}return b}}
function fromPairs$$module$node_modules$rambda$dist$rambda_mjs(a){const b={};a.forEach(([c,d])=>b[c]=d);return b}function groupBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>groupBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c={};for(let d=0;d<b.length;d++){const e=b[d],f=a(e);c[f]||(c[f]=[]);c[f].push(e)}return c}
function groupWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw new TypeError("list.reduce is not a function");const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(b);if(1===b.length)return[c];const d=[];let e=[];c.reduce((f,g,h)=>{if(0===h)return g;const k=a(f,g),m=0===e.length;h=h===b.length-1;if(k)return m&&e.push(f),e.push(g),h&&d.push(e),g;if(m)return d.push([f]),h&&d.push([g]),g;d.push(e);h&&d.push([g]);e=[];return g},
void 0);return d}function has$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>has$$module$node_modules$rambda$dist$rambda_mjs(a,c):b?b.hasOwnProperty(a):!1}function createPath$$module$node_modules$rambda$dist$rambda_mjs(a,b="."){return"string"===typeof a?a.split(b):a}
function path$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>path$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=b,d=0,e=createPath$$module$node_modules$rambda$dist$rambda_mjs(a);d<e.length;){if(null===c||void 0===c||null===c[e[d]])return;c=c[e[d]];d++}return c}}
function hasPath$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>hasPath$$module$node_modules$rambda$dist$rambda_mjs(a,c):void 0!==path$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function head$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a[0]||"":a[0]}function _objectIs$$module$node_modules$rambda$dist$rambda_mjs(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b}const objectIs$$module$node_modules$rambda$dist$rambda_mjs=Object.is||_objectIs$$module$node_modules$rambda$dist$rambda_mjs;
function identical$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>identical$$module$node_modules$rambda$dist$rambda_mjs(a,c):objectIs$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function identity$$module$node_modules$rambda$dist$rambda_mjs(a){return a}function ifElseFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return(...d)=>!0===("boolean"===typeof a?a:a(...d))?b(...d):c(...d)}
const ifElse$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(ifElseFn$$module$node_modules$rambda$dist$rambda_mjs),inc$$module$node_modules$rambda$dist$rambda_mjs=a=>a+1;function indexByPath$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={};for(let d=0;d<b.length;d++){const e=b[d];c[path$$module$node_modules$rambda$dist$rambda_mjs(a,e)]=e}return c}
function indexBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>indexBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof a)return indexByPath$$module$node_modules$rambda$dist$rambda_mjs(a,b);const c={};for(let d=0;d<b.length;d++){const e=b[d];c[a(e)]=e}return c}
function indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function baseSlice$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){let d=-1,{length:e}=a;c=c>e?e:c;0>c&&(c+=e);e=b>c?0:c-b>>>0;b>>>=0;for(c=Array(e);++d<e;)c[d]=a[d+b];return c}
function init$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a.slice(0,-1):a.length?baseSlice$$module$node_modules$rambda$dist$rambda_mjs(a,0,-1):[]}function intersection$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>intersection$$module$node_modules$rambda$dist$rambda_mjs(a,c):filter$$module$node_modules$rambda$dist$rambda_mjs(c=>includes$$module$node_modules$rambda$dist$rambda_mjs(c,a),b)}
function intersperse$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>intersperse$$module$node_modules$rambda$dist$rambda_mjs(a,f);let c=-1;const d=b.length,e=[];for(;++c<d;)c===d-1?e.push(b[c]):e.push(b[c],a);return e}function is$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>is$$module$node_modules$rambda$dist$rambda_mjs(a,c):null!=b&&b.constructor===a||b instanceof a}
function isEmpty$$module$node_modules$rambda$dist$rambda_mjs(a){const b=type$$module$node_modules$rambda$dist$rambda_mjs(a);return["Undefined","NaN","Number","Null"].includes(b)?!1:a?"Object"===b?0===Object.keys(a).length:"Array"===b?0===a.length:!1:!0}function isNil$$module$node_modules$rambda$dist$rambda_mjs(a){return void 0===a||null===a}
function join$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>join$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.join(a)}function juxt$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>a.map(c=>c(...b))}function keys$$module$node_modules$rambda$dist$rambda_mjs(a){return Object.keys(a)}function last$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a[a.length-1]||"":a[a.length-1]}
function lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function length$$module$node_modules$rambda$dist$rambda_mjs(a){return isArray$$module$node_modules$rambda$dist$rambda_mjs(a)||"string"===typeof a?a.length:NaN}
function lens$$module$node_modules$rambda$dist$rambda_mjs(a,b){return function(c){return function(d){return c(a(d)).map(e=>b(e,d))}}}function nth$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>nth$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=0>a?b.length+a:a;return"[object String]"===Object.prototype.toString.call(b)?b.charAt(c):b[c]}
function updateFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);return-1===a?c.fill(b,a):c.fill(b,a,a+1)}const update$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(updateFn$$module$node_modules$rambda$dist$rambda_mjs);
function lensIndex$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(nth$$module$node_modules$rambda$dist$rambda_mjs(a),update$$module$node_modules$rambda$dist$rambda_mjs(a))}function lensPath$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(path$$module$node_modules$rambda$dist$rambda_mjs(a),assocPath$$module$node_modules$rambda$dist$rambda_mjs(a))}
function lensProp$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(prop$$module$node_modules$rambda$dist$rambda_mjs(a),assoc$$module$node_modules$rambda$dist$rambda_mjs(a))}function match$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>match$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=b.match(a);return null===c?[]:c}
function mathMod$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mathMod$$module$node_modules$rambda$dist$rambda_mjs(a,c):!isInteger$$module$node_modules$rambda$dist$rambda_mjs(a)||!isInteger$$module$node_modules$rambda$dist$rambda_mjs(b)||1>b?NaN:(a%b+b)%b}function maxByFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)>a(b)?c:b}const maxBy$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(maxByFn$$module$node_modules$rambda$dist$rambda_mjs);
function sum$$module$node_modules$rambda$dist$rambda_mjs(a){return a.reduce((b,c)=>b+c,0)}function mean$$module$node_modules$rambda$dist$rambda_mjs(a){return sum$$module$node_modules$rambda$dist$rambda_mjs(a)/a.length}function median$$module$node_modules$rambda$dist$rambda_mjs(a){var b=a.length;if(0===b)return NaN;const c=2-b%2;b=(b-c)/2;return mean$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(a,0).sort((d,e)=>d===e?0:d<e?-1:1).slice(b,b+c))}
function mergeRight$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mergeRight$$module$node_modules$rambda$dist$rambda_mjs(a,c):Object.assign({},a||{},b||{})}function mergeAll$$module$node_modules$rambda$dist$rambda_mjs(a){let b={};map$$module$node_modules$rambda$dist$rambda_mjs(c=>{b=mergeRight$$module$node_modules$rambda$dist$rambda_mjs(b,c)},a);return b}
function mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=clone$$module$node_modules$rambda$dist$rambda_mjs(a);Object.keys(b).forEach(d=>{"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(b[d])?"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?c[d]=mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a[d],b[d]):c[d]=b[d]:c[d]=b[d]});return c}
function mergeLeft$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mergeLeft$$module$node_modules$rambda$dist$rambda_mjs(a,c):mergeRight$$module$node_modules$rambda$dist$rambda_mjs(b,a)}function mergeWithFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d={};Object.keys(b).forEach(e=>{d[e]=void 0===c[e]?b[e]:a(b[e],c[e])});Object.keys(c).forEach(e=>{void 0===d[e]&&(d[e]=void 0===b[e]?c[e]:a(b[e],c[e]))});return d}
const mergeWith$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(mergeWithFn$$module$node_modules$rambda$dist$rambda_mjs);function min$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>min$$module$node_modules$rambda$dist$rambda_mjs(a,c):b<a?b:a}function minByFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)<a(b)?c:b}const minBy$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(minByFn$$module$node_modules$rambda$dist$rambda_mjs);
function ownKeys$$module$node_modules$rambda$dist$rambda_mjs(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}));c.push.apply(c,d)}return c}
function _objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{};b%2?ownKeys$$module$node_modules$rambda$dist$rambda_mjs(Object(c),!0).forEach(function(d){_defineProperty$$module$node_modules$rambda$dist$rambda_mjs(a,d,c[d])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(c)):ownKeys$$module$node_modules$rambda$dist$rambda_mjs(Object(c)).forEach(function(d){Object.defineProperty(a,
d,Object.getOwnPropertyDescriptor(c,d))})}return a}function _defineProperty$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c;return a}function isIterable$$module$node_modules$rambda$dist$rambda_mjs(a){return Array.isArray(a)||"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(a)}
function modifyFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return isIterable$$module$node_modules$rambda$dist$rambda_mjs(c)&&void 0!==c[a]?isArray$$module$node_modules$rambda$dist$rambda_mjs(c)?updateFn$$module$node_modules$rambda$dist$rambda_mjs(a,b(c[a]),c):_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},c),{},{[a]:b(c[a])}):c}const modify$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(modifyFn$$module$node_modules$rambda$dist$rambda_mjs);
function modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){a=createPath$$module$node_modules$rambda$dist$rambda_mjs(a);if(1===a.length)return _objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},c),{},{[a[0]]:b(c[a[0]])});if(void 0===path$$module$node_modules$rambda$dist$rambda_mjs(a,c))return c;b=modifyPath$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(a,1),b,c[a[0]]);return b===c[a[0]]?c:assoc$$module$node_modules$rambda$dist$rambda_mjs(a[0],
b,c)}const modifyPath$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs);function modulo$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>modulo$$module$node_modules$rambda$dist$rambda_mjs(a,c):a%b}
function moveFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(0>a||0>b)throw Error("Rambda.move does not support negative indexes");if(a>c.length-1||b>c.length-1)return c;const d=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);d[a]=c[b];d[b]=c[a];return d}const move$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(moveFn$$module$node_modules$rambda$dist$rambda_mjs);
function multiply$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>multiply$$module$node_modules$rambda$dist$rambda_mjs(a,c):a*b}function negate$$module$node_modules$rambda$dist$rambda_mjs(a){return-a}function none$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>none$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(let c=0;c<b.length;c++)if(a(b[c]))return!1;return!0}
function not$$module$node_modules$rambda$dist$rambda_mjs(a){return!a}function objOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>objOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):{[a]:b}}function of$$module$node_modules$rambda$dist$rambda_mjs(a){return[a]}
function omit$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>omit$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(null!==b&&void 0!==b){var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={};for(const e in b)c.includes(e)||(d[e]=b[e]);return d}}
function on$$module$node_modules$rambda$dist$rambda_mjs(a,b,c,d){return 3===arguments.length?e=>on$$module$node_modules$rambda$dist$rambda_mjs(a,b,c,e):2===arguments.length?(e,f)=>on$$module$node_modules$rambda$dist$rambda_mjs(a,b,e,f):a(b(c),b(d))}function onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b){let c;return function(){a&&(c=a.apply(b||this,arguments),a=null);return c}}
function once$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length){const c=onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b);return curry$$module$node_modules$rambda$dist$rambda_mjs(c)}return onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function or$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>or$$module$node_modules$rambda$dist$rambda_mjs(a,c):a||b}const Identity$$module$node_modules$rambda$dist$rambda_mjs=a=>({x:a,map:b=>Identity$$module$node_modules$rambda$dist$rambda_mjs(b(a))});
function overFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(d=>Identity$$module$node_modules$rambda$dist$rambda_mjs(b(d)))(c).x}const over$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(overFn$$module$node_modules$rambda$dist$rambda_mjs);
function partial$$module$node_modules$rambda$dist$rambda_mjs(a,...b){const c=a.length;return(...d)=>b.length+d.length>=c?a(...b,...d):partial$$module$node_modules$rambda$dist$rambda_mjs(a,...[...b,...d])}function partialObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return c=>a(mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(c,b))}
function partitionObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={},d={};Object.entries(b).forEach(([e,f])=>{a(f,e)?c[e]=f:d[e]=f});return[c,d]}function partitionArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){const d=[],e=[];let f=-1;for(;f++<b.length-1;)(c?a(b[f],f):a(b[f]))?d.push(b[f]):e.push(b[f]);return[d,e]}
function partition$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>partition$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?partitionArray$$module$node_modules$rambda$dist$rambda_mjs(a,b):partitionObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}
function pathEqFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return equals$$module$node_modules$rambda$dist$rambda_mjs(path$$module$node_modules$rambda$dist$rambda_mjs(a,c),b)}const pathEq$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(pathEqFn$$module$node_modules$rambda$dist$rambda_mjs);
function pathOrFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,path$$module$node_modules$rambda$dist$rambda_mjs(b,c))}const pathOr$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(pathOrFn$$module$node_modules$rambda$dist$rambda_mjs);
function paths$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>paths$$module$node_modules$rambda$dist$rambda_mjs(a,c):a.map(c=>path$$module$node_modules$rambda$dist$rambda_mjs(c,b))}
function pick$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>pick$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={},e=0;e<c.length;)c[e]in b&&(d[c[e]]=b[c[e]]),e++;return d}}
function pickAll$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>pickAll$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={},e=0;e<c.length;)d[c[e]]=c[e]in b?b[c[e]]:void 0,e++;return d}}
function pluck$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>pluck$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=[];map$$module$node_modules$rambda$dist$rambda_mjs(d=>{void 0!==d[a]&&c.push(d[a])},b);return c}function prepend$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>prepend$$module$node_modules$rambda$dist$rambda_mjs(a,c):"string"===typeof b?[a].concat(b.split("")):[a].concat(b)}
const product$$module$node_modules$rambda$dist$rambda_mjs=reduce$$module$node_modules$rambda$dist$rambda_mjs(multiply$$module$node_modules$rambda$dist$rambda_mjs,1);function propEqFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c?equals$$module$node_modules$rambda$dist$rambda_mjs(b,prop$$module$node_modules$rambda$dist$rambda_mjs(a,c)):!1}const propEq$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propEqFn$$module$node_modules$rambda$dist$rambda_mjs);
function propIsFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return is$$module$node_modules$rambda$dist$rambda_mjs(a,c[b])}const propIs$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propIsFn$$module$node_modules$rambda$dist$rambda_mjs);function propOrFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c?defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,c[b]):a}const propOr$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propOrFn$$module$node_modules$rambda$dist$rambda_mjs);
function props$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>props$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error("propsToPick is not a list");return mapArray$$module$node_modules$rambda$dist$rambda_mjs(c=>b[c],a)}function propSatisfiesFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(prop$$module$node_modules$rambda$dist$rambda_mjs(b,c))}
const propSatisfies$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propSatisfiesFn$$module$node_modules$rambda$dist$rambda_mjs);
function range$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>range$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(Number.isNaN(Number(a))||Number.isNaN(Number(b)))throw new TypeError("Both arguments to range must be numbers");if(b<a)return[];const c=b-a,d=Array(c);for(let e=0;e<c;e++)d[e]=a+e;return d}
function reject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>reject$$module$node_modules$rambda$dist$rambda_mjs(a,c):filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!a(c),b)}function repeat$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>repeat$$module$node_modules$rambda$dist$rambda_mjs(a,c):Array(b).fill(a)}function replaceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c.replace(a,b)}
const replace$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(replaceFn$$module$node_modules$rambda$dist$rambda_mjs);function reverse$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a.split("").reverse().join(""):a.slice().reverse()}function setFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return over$$module$node_modules$rambda$dist$rambda_mjs(a,always$$module$node_modules$rambda$dist$rambda_mjs(b),c)}
const set$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(setFn$$module$node_modules$rambda$dist$rambda_mjs);function sliceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c.slice(a,b)}const slice$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(sliceFn$$module$node_modules$rambda$dist$rambda_mjs);
function sort$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>sort$$module$node_modules$rambda$dist$rambda_mjs(a,c):cloneList$$module$node_modules$rambda$dist$rambda_mjs(b).sort(a)}function sortBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>sortBy$$module$node_modules$rambda$dist$rambda_mjs(a,c):cloneList$$module$node_modules$rambda$dist$rambda_mjs(b).sort((c,d)=>{c=a(c);d=a(d);return c===d?0:c<d?-1:1})}
function split$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>split$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.split(a)}function maybe$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){b=a&&"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(b)?b():b;c=a||"Function"!==type$$module$node_modules$rambda$dist$rambda_mjs(c)?c:c();return a?b:c}
function take$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>take$$module$node_modules$rambda$dist$rambda_mjs(a,c):0>a?b.slice():"string"===typeof b?b.slice(0,a):baseSlice$$module$node_modules$rambda$dist$rambda_mjs(b,0,a)}
function splitAt$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>splitAt$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(!b)throw new TypeError(`Cannot read property 'slice' of ${b}`);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b)&&"string"!==typeof b)return[[],[]];const c=maybe$$module$node_modules$rambda$dist$rambda_mjs(0>a,0>b.length+a?0:b.length+a,a);return[take$$module$node_modules$rambda$dist$rambda_mjs(c,b),drop$$module$node_modules$rambda$dist$rambda_mjs(c,
b)]}function splitEvery$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>splitEvery$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(1>a)throw Error("First argument to splitEvery must be a positive integer");const c=[];let d=0;for(;d<b.length;)c.push(b.slice(d,d+=a));return c}
function splitWhen$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>splitWhen$$module$node_modules$rambda$dist$rambda_mjs(a,g);if(!b)throw new TypeError(`Cannot read property 'length' of ${b}`);const c=[],d=[];let e=!1,f=-1;for(;f++<b.length-1;)e?d.push(b[f]):a(b[f])?(d.push(b[f]),e=!0):c.push(b[f]);return[c,d]}
function startsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>startsWith$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof b)return b.startsWith(a);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))return!1;let c=!0;return a.filter((d,e)=>{if(!c)return!1;(d=equals$$module$node_modules$rambda$dist$rambda_mjs(d,b[e]))||(c=!1);return d}).length===a.length}
function subtract$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>subtract$$module$node_modules$rambda$dist$rambda_mjs(a,c):a-b}
function symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs(a,c):concat$$module$node_modules$rambda$dist$rambda_mjs(filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,b),a),filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,a),b))}
function T$$module$node_modules$rambda$dist$rambda_mjs(){return!0}function tail$$module$node_modules$rambda$dist$rambda_mjs(a){return drop$$module$node_modules$rambda$dist$rambda_mjs(1,a)}
function takeLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>takeLast$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=b.length;if(0>a)return b.slice();let d=a>c?c:a;return"string"===typeof b?b.slice(c-d):baseSlice$$module$node_modules$rambda$dist$rambda_mjs(b,c-d,c)}
function takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(0===b.length)return b;let c=!1;const d=[];let e=b.length;for(;!c||0===e;)e--,!1===a(b[e])?c=!0:c||d.push(b[e]);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?d.reverse():d.reverse().join("")}
function takeWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>takeWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if(!c&&"string"!==typeof b)throw Error("`iterable` is neither list nor a string");let d=!0;const e=[];let f=-1;for(;f++<b.length-1;)a(b[f])?d&&e.push(b[f]):d&&(d=!1);return c?e:e.join("")}
function tap$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>tap$$module$node_modules$rambda$dist$rambda_mjs(a,c);a(b);return b}function test$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>test$$module$node_modules$rambda$dist$rambda_mjs(a,c);if("string"===typeof a)throw new TypeError(`\u2018test\u2019 requires a value of type RegExp as its first argument; received "${a}"`);return-1!==b.search(a)}
function times$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>times$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!isInteger$$module$node_modules$rambda$dist$rambda_mjs(b)||0>b)throw new RangeError("n must be an integer");return map$$module$node_modules$rambda$dist$rambda_mjs(a,range$$module$node_modules$rambda$dist$rambda_mjs(0,b))}function toLower$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toLowerCase()}
function toPairs$$module$node_modules$rambda$dist$rambda_mjs(a){return Object.entries(a)}function toString$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toString()}function toUpper$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toUpperCase()}function transpose$$module$node_modules$rambda$dist$rambda_mjs(a){return a.reduce((b,c)=>{c.forEach((d,e)=>isArray$$module$node_modules$rambda$dist$rambda_mjs(b[e])?b[e].push(d):b.push([d]));return b},[])}
function trim$$module$node_modules$rambda$dist$rambda_mjs(a){return a.trim()}const isFunction$$module$node_modules$rambda$dist$rambda_mjs=a=>["Promise","Function"].includes(type$$module$node_modules$rambda$dist$rambda_mjs(a));
function tryCatch$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isFunction$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error(`R.tryCatch | fn '${a}'`);const c=isFunction$$module$node_modules$rambda$dist$rambda_mjs(b);return(...d)=>{try{return a(...d)}catch(e){return c?b(e,...d):b}}}function unapply$$module$node_modules$rambda$dist$rambda_mjs(a){return function(...b){return a.call(this,b)}}
function union$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>union$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(a);b.forEach(d=>{includes$$module$node_modules$rambda$dist$rambda_mjs(d,a)||c.push(d)});return c}
function uniqBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>uniqBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=new Set;return b.filter(d=>{if(c.has(a(d)))return!1;c.add(a(d));return!0})}function includesWith$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){let d=!1,e=-1;for(;++e<c.length&&!d;)a(b,c[e])&&(d=!0);return d}
function uniqWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>uniqWith$$module$node_modules$rambda$dist$rambda_mjs(a,e);let c=-1;const d=[];for(;++c<b.length;){const e=b[c];includesWith$$module$node_modules$rambda$dist$rambda_mjs(a,e,d)||d.push(e)}return d}function unless$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>unless$$module$node_modules$rambda$dist$rambda_mjs(a,c):c=>a(c)?c:b(c)}
function unwind$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>unwind$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b[a])?mapArray$$module$node_modules$rambda$dist$rambda_mjs(c=>_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},b),{},{[a]:c}),b[a]):[b]}
function values$$module$node_modules$rambda$dist$rambda_mjs(a){return"Object"!==type$$module$node_modules$rambda$dist$rambda_mjs(a)?[]:Object.values(a)}const Const$$module$node_modules$rambda$dist$rambda_mjs=a=>({x:a,map:b=>Const$$module$node_modules$rambda$dist$rambda_mjs(a)});function view$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>view$$module$node_modules$rambda$dist$rambda_mjs(a,c):a(Const$$module$node_modules$rambda$dist$rambda_mjs)(b).x}
function whenFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)?b(c):c}const when$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(whenFn$$module$node_modules$rambda$dist$rambda_mjs);function where$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(void 0===b)return d=>where$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=!0;for(const d in a){if(!c)continue;const e=a[d](b[d]);c&&!1===e&&(c=!1)}return c}
function whereAny$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(void 0===b)return c=>whereAny$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(const c in a)if(a[c](b[c]))return!0;return!1}
function whereEq$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>whereEq$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=filter$$module$node_modules$rambda$dist$rambda_mjs((d,e)=>equals$$module$node_modules$rambda$dist$rambda_mjs(d,b[e]),a);return Object.keys(c).length===Object.keys(a).length}
function without$$module$node_modules$rambda$dist$rambda_mjs(a,b){return void 0===b?c=>without$$module$node_modules$rambda$dist$rambda_mjs(a,c):reduce$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>-1<_indexOf$$module$node_modules$rambda$dist$rambda_mjs(d,a)?c:c.concat(d),[],b)}function xor$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>xor$$module$node_modules$rambda$dist$rambda_mjs(a,c):!!a&&!b||!!b&&!a}
function zip$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>zip$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=[],d=Math.min(a.length,b.length);for(let e=0;e<d;e++)c[e]=[a[e],b[e]];return c}function zipObj$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>zipObj$$module$node_modules$rambda$dist$rambda_mjs(a,c):take$$module$node_modules$rambda$dist$rambda_mjs(b.length,a).reduce((c,d,e)=>{c[d]=b[e];return c},{})}
function zipWithFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return take$$module$node_modules$rambda$dist$rambda_mjs(b.length>c.length?c.length:b.length,b).map((d,e)=>a(d,c[e]))}const zipWith$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(zipWithFn$$module$node_modules$rambda$dist$rambda_mjs);var module$node_modules$rambda$dist$rambda_mjs={};module$node_modules$rambda$dist$rambda_mjs.F=F$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.T=T$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.__findHighestArity=__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._arity=_arity$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._indexOf=_indexOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._lastIndexOf=_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs._pipe=_pipe$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.add=add$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.adjust=adjust$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.all=all$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.allPass=allPass$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.always=always$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.and=and$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.any=any$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.anyPass=anyPass$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.append=append$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.apply=apply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.applySpec=applySpec$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.assoc=assoc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.assocPath=assocPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.bind=bind$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.both=both$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.chain=chain$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.clamp=clamp$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.clone=clone$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.complement=complement$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.compose=compose$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.concat=concat$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.cond=cond$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.converge=converge$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.count=count$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.countBy=countBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.curry=curry$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.curryN=curryN$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dec=dec$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.defaultTo=defaultTo$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.difference=difference$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dissoc=dissoc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.divide=divide$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.drop=drop$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropLast=dropLast$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.dropLastWhile=dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropRepeats=dropRepeats$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropRepeatsWith=dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropWhile=dropWhile$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.either=either$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.endsWith=endsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.eqProps=eqProps$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.equals=equals$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.evolve=evolve$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.evolveArray=evolveArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.evolveObject=evolveObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filter=filter$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filterArray=filterArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filterObject=filterObject$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.find=find$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findIndex=findIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findLast=findLast$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findLastIndex=findLastIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.flatten=flatten$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.flip=flip$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.forEach=forEach$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.fromPairs=fromPairs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.groupBy=groupBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.groupWith=groupWith$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.has=has$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.hasPath=hasPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.head=head$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.identical=identical$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.identity=identity$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.ifElse=ifElse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.inc=inc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.includes=includes$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.indexBy=indexBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.indexOf=indexOf$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.init=init$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.intersection=intersection$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.intersperse=intersperse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.is=is$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.isEmpty=isEmpty$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.isNil=isNil$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.join=join$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.juxt=juxt$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.keys=keys$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.last=last$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.lastIndexOf=lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.length=length$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lens=lens$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lensIndex=lensIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lensPath=lensPath$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.lensProp=lensProp$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.map=map$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapArray=mapArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapObjIndexed=mapObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapObject=mapObject$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.match=match$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mathMod=mathMod$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.max=max$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.maxBy=maxBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.maxByFn=maxByFn$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.mean=mean$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.median=median$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.merge=mergeRight$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeAll=mergeAll$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeDeepRight=mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.mergeLeft=mergeLeft$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeRight=mergeRight$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeWith=mergeWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.min=min$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.minBy=minBy$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.minByFn=minByFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modify=modify$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modifyPath=modifyPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modifyPathFn=modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modulo=modulo$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.move=move$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.multiply=multiply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.negate=negate$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.none=none$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.not=not$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.nth=nth$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.objOf=objOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.of=of$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.omit=omit$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.on=on$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.once=once$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.or=or$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.over=over$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partial=partial$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partialObject=partialObject$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.partition=partition$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partitionArray=partitionArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partitionObject=partitionObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.path=path$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pathEq=pathEq$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.pathOr=pathOr$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.paths=paths$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pick=pick$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pickAll=pickAll$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pipe=pipe$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.pluck=pluck$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.prepend=prepend$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.product=product$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.prop=prop$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propEq=propEq$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.propIs=propIs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propOr=propOr$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propSatisfies=propSatisfies$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.props=props$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.range=range$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.reduce=reduce$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reduceFn=reduceFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reduceStopper=reduceStopper$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reject=reject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.repeat=repeat$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.replace=replace$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reverse=reverse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.set=set$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.slice=slice$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.sort=sort$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.sortBy=sortBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.split=split$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitAt=splitAt$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitEvery=splitEvery$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitWhen=splitWhen$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.startsWith=startsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.subtract=subtract$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.sum=sum$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.symmetricDifference=symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tail=tail$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.take=take$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeLast=takeLast$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeLastWhile=takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeWhile=takeWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tap=tap$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.test=test$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.times=times$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toLower=toLower$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toPairs=toPairs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toString=toString$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.toUpper=toUpper$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.transpose=transpose$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.trim=trim$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tryCatch=tryCatch$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.type=type$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.unapply=unapply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.union=union$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniq=uniq$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniqBy=uniqBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniqWith=uniqWith$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.unless=unless$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.unwind=unwind$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.update=update$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.updateFn=updateFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.values=values$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.view=view$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.when=when$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.where=where$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.whereAny=whereAny$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.whereEq=whereEq$$module$node_modules$rambda$dist$rambda_mjs;
module$node_modules$rambda$dist$rambda_mjs.without=without$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.xor=xor$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zip=zip$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zipObj=zipObj$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zipWith=zipWith$$module$node_modules$rambda$dist$rambda_mjs;const csoundSetMidiCallbacks$$module$src$modules$rtmidi=a=>b=>{a.exports.csoundSetMidiCallbacks(b)},csoundGetMIDIDevList$$module$src$modules$rtmidi=a=>(b,c)=>{const {buffer:d}=a.wasi.memory,e=a.exports.csoundGetMIDIDevList(b,void 0,c?1:0);if(0===e)return[];const f=sizeofStruct$$module$src$utils$native_sizes(CS_MIDIDEVICE$$module$src$structures),g=a.exports.allocCsMidiDeviceStruct(e);a.exports.csoundGetMIDIDevList(b,g,c?1:0);const h=new Uint8Array(d,g,f*e);b=range$$module$node_modules$rambda$dist$rambda_mjs(0,
e).map(k=>structBufferToObject$$module$src$utils$structure_buffer_to_object(CS_MIDIDEVICE$$module$src$structures,h.subarray(k*f,f)));a.exports.freeCsMidiDeviceStruct(g);return b};csoundGetMIDIDevList$$module$src$modules$rtmidi.toString=()=>"getMIDIDevList = async (isOutput) => Object;";
const csoundGetRtMidiName$$module$src$modules$rtmidi=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.getRtMidiName(b);c=new Uint8Array(c,b,128);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""};csoundGetRtMidiName$$module$src$modules$rtmidi.toString=()=>"getRtMidiName = async () => String;";
const csoundGetMidiOutFileName$$module$src$modules$rtmidi=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.getMidiOutFileName(b);c=new Uint8Array(c,b,128);b&&0<b.length&&freeStringPtr$$module$src$utils$string_pointers(a,b);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""},_isRequestingRtMidiInput$$module$src$modules$rtmidi=a=>b=>a.exports.isRequestingRtMidiInput(b),csoundPushMidiMessage$$module$src$modules$rtmidi=a=>(b,c,d,e)=>{a.exports.pushMidiMessage(b,
c,d,e)};csoundPushMidiMessage$$module$src$modules$rtmidi.toString=()=>"midiMessage = async (status, data1, data2) => undefined;";var module$src$modules$rtmidi={};module$src$modules$rtmidi._isRequestingRtMidiInput=_isRequestingRtMidiInput$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundGetMIDIDevList=csoundGetMIDIDevList$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundGetMidiOutFileName=csoundGetMidiOutFileName$$module$src$modules$rtmidi;
module$src$modules$rtmidi.csoundGetRtMidiName=csoundGetRtMidiName$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundPushMidiMessage=csoundPushMidiMessage$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundSetMidiCallbacks=csoundSetMidiCallbacks$$module$src$modules$rtmidi;const csoundInputMessage$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundInputMessage(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundInputMessage$$module$src$modules$control_events.toString=()=>"inputMessage = async (scoreEvent) => Number;";
const csoundInputMessageAsync$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundInputMessageAsync(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundInputMessageAsync$$module$src$modules$control_events.toString=()=>"inputMessageAsync = async (scoreEvent) => Number;";
const csoundGetControlChannel$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundGetControlChannelWasi(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundGetControlChannel$$module$src$modules$control_events.toString=()=>"getControlChannel = async (channelName) => Number;";
const csoundSetControlChannel$$module$src$modules$control_events=a=>(b,c,d)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);a.exports.csoundSetControlChannel(b,c,d);freeStringPtr$$module$src$utils$string_pointers(a,c)};csoundSetControlChannel$$module$src$modules$control_events.toString=()=>"setControlChannel = async (channelName, value) => void;";
const csoundGetStringChannel$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundGetStringChannelWasi(b,c);const d=ptr2string$$module$src$utils$string_pointers(a,b);freeStringPtr$$module$src$utils$string_pointers(a,c);freeStringPtr$$module$src$utils$string_pointers(a,b);return d};csoundGetStringChannel$$module$src$modules$control_events.toString=()=>"getStringChannel = async (channelName) => String;";
const csoundSetStringChannel$$module$src$modules$control_events=a=>(b,c,d)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);d=string2ptr$$module$src$utils$string_pointers(a,d);a.exports.csoundSetStringChannel(b,c,d);freeStringPtr$$module$src$utils$string_pointers(a,c);freeStringPtr$$module$src$utils$string_pointers(a,d)};csoundSetStringChannel$$module$src$modules$control_events.toString=()=>"setStringChannel = async (channelName, value) => void;";var module$src$modules$control_events={};
module$src$modules$control_events.csoundGetControlChannel=csoundGetControlChannel$$module$src$modules$control_events;module$src$modules$control_events.csoundGetStringChannel=csoundGetStringChannel$$module$src$modules$control_events;module$src$modules$control_events.csoundInputMessage=csoundInputMessage$$module$src$modules$control_events;module$src$modules$control_events.csoundInputMessageAsync=csoundInputMessageAsync$$module$src$modules$control_events;
module$src$modules$control_events.csoundSetControlChannel=csoundSetControlChannel$$module$src$modules$control_events;module$src$modules$control_events.csoundSetStringChannel=csoundSetStringChannel$$module$src$modules$control_events;const csoundGetOutputName$$module$src$modules$general_io=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.csoundGetOutputName(b);c=new Uint8Array(c,b,64);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""};csoundGetOutputName$$module$src$modules$general_io.toString=()=>"getOutputName = async () => String;";
const csoundGetInputName$$module$src$modules$general_io=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.csoundGetInputName(b);c=new Uint8Array(c,b,64);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""};csoundGetInputName$$module$src$modules$general_io.toString=()=>"getInputName = async (csound) => String;";var module$src$modules$general_io={};module$src$modules$general_io.csoundGetInputName=csoundGetInputName$$module$src$modules$general_io;
module$src$modules$general_io.csoundGetOutputName=csoundGetOutputName$$module$src$modules$general_io;const csoundAppendEnv$$module$src$modules$extra=a=>(b,c,d)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);d=string2ptr$$module$src$utils$string_pointers(a,d);b=a.exports.csoundAppendEnv(b,c,d);freeStringPtr$$module$src$utils$string_pointers(a,c);freeStringPtr$$module$src$utils$string_pointers(a,d);return b};csoundAppendEnv$$module$src$modules$extra.toString=()=>"appendEnv = async (csound, variable, value) => Number;";const csoundShouldDaemonize$$module$src$modules$extra=a=>b=>a.exports.csoundShouldDaemonize(b);
var module$src$modules$extra={};module$src$modules$extra.csoundAppendEnv=csoundAppendEnv$$module$src$modules$extra;module$src$modules$extra.csoundShouldDaemonize=csoundShouldDaemonize$$module$src$modules$extra;const csoundIsScorePending$$module$src$modules$score_handling=a=>b=>a.exports.csoundIsScorePending(b);csoundIsScorePending$$module$src$modules$score_handling.toString=()=>"isScorePending = async () => Number;";const csoundSetScorePending$$module$src$modules$score_handling=a=>(b,c)=>a.exports.csoundSetScorePending(b,c);csoundSetScorePending$$module$src$modules$score_handling.toString=()=>"setScorePending = async (pending) => Number;";
const csoundReadScore$$module$src$modules$score_handling=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundReadScore(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundReadScore$$module$src$modules$score_handling.toString=()=>"readScore = async (score) => Number;";const csoundGetScoreTime$$module$src$modules$score_handling=a=>b=>a.exports.csoundGetScoreTime(b);csoundGetScoreTime$$module$src$modules$score_handling.toString=()=>"getScoreTime = async () => Number;";
const csoundGetScoreOffsetSeconds$$module$src$modules$score_handling=a=>b=>a.exports.csoundGetScoreOffsetSeconds(b);csoundGetScoreOffsetSeconds$$module$src$modules$score_handling.toString=()=>"getScoreOffsetSeconds = async () => Number;";const csoundSetScoreOffsetSeconds$$module$src$modules$score_handling=a=>(b,c)=>a.exports.csoundSetScoreOffsetSeconds(b,c);csoundSetScoreOffsetSeconds$$module$src$modules$score_handling.toString=()=>"setScoreOffsetSeconds = async () => Number;";
const csoundRewindScore$$module$src$modules$score_handling=a=>b=>a.exports.csoundRewindScore(b);csoundRewindScore$$module$src$modules$score_handling.toString=()=>"rewindScore = async () => undefined;";var module$src$modules$score_handling={};module$src$modules$score_handling.csoundGetScoreOffsetSeconds=csoundGetScoreOffsetSeconds$$module$src$modules$score_handling;module$src$modules$score_handling.csoundGetScoreTime=csoundGetScoreTime$$module$src$modules$score_handling;
module$src$modules$score_handling.csoundIsScorePending=csoundIsScorePending$$module$src$modules$score_handling;module$src$modules$score_handling.csoundReadScore=csoundReadScore$$module$src$modules$score_handling;module$src$modules$score_handling.csoundRewindScore=csoundRewindScore$$module$src$modules$score_handling;module$src$modules$score_handling.csoundSetScoreOffsetSeconds=csoundSetScoreOffsetSeconds$$module$src$modules$score_handling;module$src$modules$score_handling.csoundSetScorePending=csoundSetScorePending$$module$src$modules$score_handling;const csoundTableLength$$module$src$modules$table=a=>(b,c)=>a.exports.csoundTableLength(b,c);csoundTableLength$$module$src$modules$table.toString=()=>"tableLength = async (tableNum) => Number;";const csoundTableGet$$module$src$modules$table=a=>(b,c,d)=>a.exports.csoundTableGet(b,c,d);csoundTableGet$$module$src$modules$table.toString=()=>"tableGet = async (tableNum, tableIndex) => Number;";const csoundTableSet$$module$src$modules$table=a=>(b,c,d,e)=>a.exports.csoundTableSet(b,c,d,e);
csoundTableSet$$module$src$modules$table.toString=()=>"tableSet = async (tableNum, tableIndex, value) => undefined;";const csoundTableCopyIn$$module$src$modules$table=a=>(b,c,d)=>{const e=a.exports.allocFloatArray(d.length);(new Float64Array(a.wasi.memory.buffer,e,d.length)).set(d);a.exports.csoundTableCopyIn(b,c,e);a.exports.freeFloatArrayMem(e)};csoundTableCopyIn$$module$src$modules$table.toString=()=>"tableCopyIn = async (tableNum, float64Array) => undefined;";
const csoundTableCopyOut$$module$src$modules$table=a=>(b,c)=>{var d=a.exports.csoundTableLength(b,c);if(0<d){const e=a.exports.allocFloatArray(d);a.exports.csoundTableCopyOut(b,c,e);({buffer:b}=a.wasi.memory);d=new Float64Array(b,e,d);a.exports.freeFloatArrayMem(e);return Float64Array.from(d)}};csoundTableCopyOut$$module$src$modules$table.toString=()=>"tableCopyOut = async (tableNum) => ?Float64Array;";const csoundGetTable$$module$src$modules$table=csoundTableCopyOut$$module$src$modules$table;
csoundTableCopyOut$$module$src$modules$table.toString=csoundTableCopyOut$$module$src$modules$table.toString;const csoundGetTableArgs$$module$src$modules$table=a=>(b,c)=>{const d=a.exports.allocFloatArray(1024);a.exports.csoundGetTableArgs(b,d,c);({buffer:b}=a.wasi.memory);b=new Float64Array(b,d,1024);a.exports.freeFloatArrayMem(d);return b};csoundGetTableArgs$$module$src$modules$table.toString=()=>"getTableArgs = async (tableNum) => ?Float64Array;";
const csoundIsNamedGEN$$module$src$modules$table=a=>(b,c)=>a.exports.csoundIsNamedGEN(b,c);csoundIsNamedGEN$$module$src$modules$table.toString=()=>"isNamedGEN = async (tableNum) => number;";const csoundGetNamedGEN$$module$src$modules$table=a=>(b,c)=>{var d=a.exports.csoundIsNamedGEN(b,c);if(0<d){const e=a.exports.allocStringMem(d);a.exports.csoundGetNamedGEN(b,e,c,d);({buffer:b}=a.wasi.memory);d=new Uint8Array(b,e,d);return uint2String$$module$src$utils$text_encoders(d)}};
csoundGetNamedGEN$$module$src$modules$table.toString=()=>"getNamedGEN = async (tableNum) => ?string;";var module$src$modules$table={};module$src$modules$table.csoundGetNamedGEN=csoundGetNamedGEN$$module$src$modules$table;module$src$modules$table.csoundGetTable=csoundTableCopyOut$$module$src$modules$table;module$src$modules$table.csoundGetTableArgs=csoundGetTableArgs$$module$src$modules$table;module$src$modules$table.csoundIsNamedGEN=csoundIsNamedGEN$$module$src$modules$table;
module$src$modules$table.csoundTableCopyIn=csoundTableCopyIn$$module$src$modules$table;module$src$modules$table.csoundTableCopyOut=csoundTableCopyOut$$module$src$modules$table;module$src$modules$table.csoundTableGet=csoundTableGet$$module$src$modules$table;module$src$modules$table.csoundTableLength=csoundTableLength$$module$src$modules$table;module$src$modules$table.csoundTableSet=csoundTableSet$$module$src$modules$table;function writeFile$$module$src$filesystem$worker_fs(a){return(b,c,d)=>{b="string"===typeof d?encoder$$module$src$utils$text_encoders.encode(d):d;a.wasi.writeFile(c,b)}}writeFile$$module$src$filesystem$worker_fs.toString=()=>"async (path, data) => void";function appendFile$$module$src$filesystem$worker_fs(a){return(b,c,d)=>{b="string"===typeof d?encoder$$module$src$utils$text_encoders.encode(d):d;a.wasi.appendFile(c,b)}}appendFile$$module$src$filesystem$worker_fs.toString=()=>"async (path, data) => void";
function readFile$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.readFile(c)}readFile$$module$src$filesystem$worker_fs.toString=()=>"async (path) => ?Uint8Array";function unlink$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.unlink(c)}unlink$$module$src$filesystem$worker_fs.toString=()=>"async (path) => void";function readdir$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.readdir(c)}readdir$$module$src$filesystem$worker_fs.toString=()=>"async (path) => string[]";
function mkdir$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.mkdir(c)}mkdir$$module$src$filesystem$worker_fs.toString=()=>"async (path) => void";var module$src$filesystem$worker_fs={};module$src$filesystem$worker_fs.appendFile=appendFile$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.mkdir=mkdir$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.readFile=readFile$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.readdir=readdir$$module$src$filesystem$worker_fs;
module$src$filesystem$worker_fs.unlink=unlink$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.writeFile=writeFile$$module$src$filesystem$worker_fs;const api$$module$src$libcsound={csoundCreate:csoundCreate$$module$src$modules$instantiation,csoundDestroy:csoundDestroy$$module$src$modules$instantiation,csoundGetAPIVersion:csoundGetAPIVersion$$module$src$modules$instantiation,csoundGetVersion:csoundGetVersion$$module$src$modules$instantiation,csoundInitialize:csoundInitialize$$module$src$modules$instantiation,csoundParseOrc:csoundParseOrc$$module$src$modules$performance,csoundCompileTree:csoundCompileTree$$module$src$modules$performance,csoundCompileOrc:csoundCompileOrc$$module$src$modules$performance,
csoundEvalCode:csoundEvalCode$$module$src$modules$performance,csoundStart:csoundStart$$module$src$modules$performance,csoundCompileCsd:csoundCompileCsd$$module$src$modules$performance,csoundCompileCsdText:csoundCompileCsdText$$module$src$modules$performance,csoundPerform:csoundPerform$$module$src$modules$performance,csoundPerformKsmps:csoundPerformKsmps$$module$src$modules$performance,csoundPerformBuffer:csoundPerformBuffer$$module$src$modules$performance,csoundStop:csoundStop$$module$src$modules$performance,
csoundCleanup:csoundCleanup$$module$src$modules$performance,csoundReset:csoundReset$$module$src$modules$performance,csoundGetSr:csoundGetSr$$module$src$modules$attributes,csoundGetKr:csoundGetKr$$module$src$modules$attributes,csoundGetKsmps:csoundGetKsmps$$module$src$modules$attributes,csoundGetNchnls:csoundGetNchnls$$module$src$modules$attributes,csoundGetNchnlsInput:csoundGetNchnlsInput$$module$src$modules$attributes,csoundGet0dBFS:csoundGet0dBFS$$module$src$modules$attributes,csoundGetA4:csoundGetA4$$module$src$modules$attributes,
csoundGetCurrentTimeSamples:csoundGetCurrentTimeSamples$$module$src$modules$attributes,csoundGetSizeOfMYFLT:csoundGetSizeOfMYFLT$$module$src$modules$attributes,csoundSetOption:csoundSetOption$$module$src$modules$attributes,csoundSetParams:csoundSetParams$$module$src$modules$attributes,csoundGetParams:csoundGetParams$$module$src$modules$attributes,csoundGetDebug:csoundGetDebug$$module$src$modules$attributes,csoundSetDebug:csoundSetDebug$$module$src$modules$attributes,csoundGetInputBufferSize:csoundGetInputBufferSize$$module$src$modules$rtaudio,
csoundGetOutputBufferSize:csoundGetOutputBufferSize$$module$src$modules$rtaudio,csoundGetInputBuffer:csoundGetInputBuffer$$module$src$modules$rtaudio,csoundGetOutputBuffer:csoundGetOutputBuffer$$module$src$modules$rtaudio,csoundGetSpin:csoundGetSpin$$module$src$modules$rtaudio,csoundGetSpout:csoundGetSpout$$module$src$modules$rtaudio,csoundGetMIDIDevList:csoundGetMIDIDevList$$module$src$modules$rtmidi,csoundSetMidiCallbacks:csoundSetMidiCallbacks$$module$src$modules$rtmidi,csoundGetRtMidiName:csoundGetRtMidiName$$module$src$modules$rtmidi,
csoundGetMidiOutFileName:csoundGetMidiOutFileName$$module$src$modules$rtmidi,csoundPushMidiMessage:csoundPushMidiMessage$$module$src$modules$rtmidi,_isRequestingRtMidiInput:_isRequestingRtMidiInput$$module$src$modules$rtmidi,csoundInputMessage:csoundInputMessage$$module$src$modules$control_events,csoundInputMessageAsync:csoundInputMessageAsync$$module$src$modules$control_events,csoundGetControlChannel:csoundGetControlChannel$$module$src$modules$control_events,csoundSetControlChannel:csoundSetControlChannel$$module$src$modules$control_events,
csoundGetStringChannel:csoundGetStringChannel$$module$src$modules$control_events,csoundSetStringChannel:csoundSetStringChannel$$module$src$modules$control_events,csoundGetInputName:csoundGetInputName$$module$src$modules$general_io,csoundGetOutputName:csoundGetOutputName$$module$src$modules$general_io,csoundAppendEnv:csoundAppendEnv$$module$src$modules$extra,csoundShouldDaemonize:csoundShouldDaemonize$$module$src$modules$extra,csoundIsScorePending:csoundIsScorePending$$module$src$modules$score_handling,
csoundSetScorePending:csoundSetScorePending$$module$src$modules$score_handling,csoundReadScore:csoundReadScore$$module$src$modules$score_handling,csoundGetScoreTime:csoundGetScoreTime$$module$src$modules$score_handling,csoundGetScoreOffsetSeconds:csoundGetScoreOffsetSeconds$$module$src$modules$score_handling,csoundSetScoreOffsetSeconds:csoundSetScoreOffsetSeconds$$module$src$modules$score_handling,csoundRewindScore:csoundRewindScore$$module$src$modules$score_handling,csoundTableLength:csoundTableLength$$module$src$modules$table,
csoundTableGet:csoundTableGet$$module$src$modules$table,csoundTableSet:csoundTableSet$$module$src$modules$table,csoundTableCopyIn:csoundTableCopyIn$$module$src$modules$table,csoundTableCopyOut:csoundTableCopyOut$$module$src$modules$table,csoundGetTable:csoundTableCopyOut$$module$src$modules$table,csoundGetTableArgs:csoundGetTableArgs$$module$src$modules$table,csoundIsNamedGEN:csoundIsNamedGEN$$module$src$modules$table,csoundGetNamedGEN:csoundGetNamedGEN$$module$src$modules$table,fs:module$src$filesystem$worker_fs};
var $jscompDefaultExport$$module$src$libcsound=function(a){return mergeAll$$module$node_modules$rambda$dist$rambda_mjs([reduce$$module$node_modules$rambda$dist$rambda_mjs((b,c)=>assoc$$module$node_modules$rambda$dist$rambda_mjs(c,api$$module$src$libcsound[c](a),b),{},keys$$module$node_modules$rambda$dist$rambda_mjs(dissoc$$module$node_modules$rambda$dist$rambda_mjs("fs")(api$$module$src$libcsound))),reduce$$module$node_modules$rambda$dist$rambda_mjs((b,c)=>assoc$$module$node_modules$rambda$dist$rambda_mjs(c,
api$$module$src$libcsound.fs[c](a),b),{},keys$$module$node_modules$rambda$dist$rambda_mjs(module$src$filesystem$worker_fs))])},module$src$libcsound={};module$src$libcsound.api=api$$module$src$libcsound;module$src$libcsound.default=$jscompDefaultExport$$module$src$libcsound;const appendBuffers$$module$src$utils=(a,b)=>{const c=new Uint8Array(a.byteLength+b.byteLength);c.set(new Uint8Array(a),0);c.set(new Uint8Array(b),a.byteLength);return c.buffer},nearestPowerOf2$$module$src$utils=a=>1<<31-Math.clz32(a),isIos$$module$src$utils=()=>/iPhone|iPad|iPod/.test(navigator.userAgent),isFirefox$$module$src$utils=()=>navigator.userAgent.toLowerCase().includes("firefox"),isSafari$$module$src$utils=()=>"string"===typeof navigator.vendor&&navigator.vendor.includes("Apple"),isSabSupported$$module$src$utils=
()=>!isFirefox$$module$src$utils()&&window&&void 0!==window.Atomics&&void 0!==window.SharedArrayBuffer,areWorkletsSupported$$module$src$utils=()=>void 0!==AudioNode&&void 0!==AudioWorkletNode,WebkitAudioContext$$module$src$utils=()=>{if(void 0!==window.webkitAudioContext)return window.webkitAudioContext;if(void 0!==window.AudioContext)return window.AudioContext},isScriptProcessorNodeSupported$$module$src$utils=()=>{const a=WebkitAudioContext$$module$src$utils();return void 0!==a&&void 0!==a.prototype.createScriptProcessor},
csoundApiRename$$module$src$utils=a=>{let b=a.replace(/^csound/i,"");"csoundPushMidiMessage"===a&&(b="midiMessage");return b.charAt(0).toLowerCase()+b.slice(1)},stopableStates$$module$src$utils=new Set(["realtimePerformanceStarted","realtimePerformancePaused","realtimePerformanceResumed","renderStarted"]),makeProxyCallback$$module$src$utils=(a,b,c,d)=>async(...e)=>{if(!d||!stopableStates$$module$src$utils.has(d)){const f={};0<Object.values(f).length&&await a.callUncloned("syncWorkerFs",[b,f])}return await a.callUncloned(c,
[b,...e])},makeSingleThreadCallback$$module$src$utils=(a,b)=>async(...c)=>await b.apply({},[a,...c]),fetchPlugins$$module$src$utils=async a=>await Promise.all(a.map(async b=>(await fetch(b)).arrayBuffer()));var module$src$utils={};module$src$utils.WebkitAudioContext=WebkitAudioContext$$module$src$utils;module$src$utils.appendBuffers=appendBuffers$$module$src$utils;module$src$utils.areWorkletsSupported=areWorkletsSupported$$module$src$utils;module$src$utils.csoundApiRename=csoundApiRename$$module$src$utils;
module$src$utils.fetchPlugins=fetchPlugins$$module$src$utils;module$src$utils.isIos=isIos$$module$src$utils;module$src$utils.isSabSupported=isSabSupported$$module$src$utils;module$src$utils.isSafari=isSafari$$module$src$utils;module$src$utils.isScriptProcessorNodeSupported=isScriptProcessorNodeSupported$$module$src$utils;module$src$utils.makeProxyCallback=makeProxyCallback$$module$src$utils;module$src$utils.makeSingleThreadCallback=makeSingleThreadCallback$$module$src$utils;
module$src$utils.nearestPowerOf2=nearestPowerOf2$$module$src$utils;module$src$utils.stopableStates=stopableStates$$module$src$utils;const messageEventHandler$$module$src$mains$messages_main=a=>b=>{if(b.data.log)a&&a.publicEvents&&a.publicEvents.triggerMessage?a.publicEvents.triggerMessage(b.data.log):console.log("object"===typeof b.data.log&&"string"===typeof b.data.log.log?b.data.log.log:b.data.log);else if(b.data.playStateChange&&a&&a.onPlayStateChange)a.onPlayStateChange(b.data.playStateChange)},iterableMessageChannel$$module$src$mains$messages_main=()=>{const {port1:a,port2:b}=new MessageChannel;return[a,b]},safelyClosePorts$$module$src$mains$messages_main=
([a,b])=>{if(void 0!==a.close)try{a.close()}catch(c){}if(void 0!==b.close)try{b.close()}catch(c){}};
class IPCMessagePorts$$module$src$mains$messages_main{constructor(){const {port1:a,port2:b}=new MessageChannel;this.mainMessagePort=a;this.workerMessagePort=b;const {port1:c,port2:d}=new MessageChannel;this.mainMessagePortAudio=c;this.workerMessagePortAudio=d;const {port1:e,port2:f}=new MessageChannel;this.csoundWorkerFrameRequestPort=e;this.audioWorkerFrameRequestPort=f;const {port1:g,port2:h}=new MessageChannel;this.csoundWorkerAudioInputPort=g;this.audioWorkerAudioInputPort=h;const {port1:k,port2:m}=
new MessageChannel;this.csoundWorkerRtMidiPort=k;this.csoundMainRtMidiPort=m;const {port1:n,port2:l}=new MessageChannel;this.sabWorkerCallbackReply=n;this.sabMainCallbackReply=l;const {port1:p,port2:q}=new MessageChannel;this.mainMessagePort2=p;this.workerMessagePort2=q;this.restartAudioWorkerPorts=this.restartAudioWorkerPorts.bind(this)}restartAudioWorkerPorts(){safelyClosePorts$$module$src$mains$messages_main([this.csoundWorkerAudioInputPort,this.audioWorkerAudioInputPort]);[this.csoundWorkerAudioInputPort,
this.audioWorkerAudioInputPort]=iterableMessageChannel$$module$src$mains$messages_main();safelyClosePorts$$module$src$mains$messages_main([this.mainMessagePortAudio,this.workerMessagePortAudio]);[this.mainMessagePortAudio,this.workerMessagePortAudio]=iterableMessageChannel$$module$src$mains$messages_main();safelyClosePorts$$module$src$mains$messages_main([this.csoundWorkerFrameRequestPort,this.audioWorkerFrameRequestPort]);[this.csoundWorkerFrameRequestPort,this.audioWorkerFrameRequestPort]=iterableMessageChannel$$module$src$mains$messages_main();
safelyClosePorts$$module$src$mains$messages_main([this.mainMessagePort2,this.workerMessagePort2]);[this.mainMessagePort2,this.workerMessagePort2]=iterableMessageChannel$$module$src$mains$messages_main()}}var module$src$mains$messages_main={};module$src$mains$messages_main.IPCMessagePorts=IPCMessagePorts$$module$src$mains$messages_main;module$src$mains$messages_main.messageEventHandler=messageEventHandler$$module$src$mains$messages_main;function clearArray$$module$src$utils$clear_array(a){for(;0<a.length;)a.pop()}var module$src$utils$clear_array={};module$src$utils$clear_array.clearArray=clearArray$$module$src$utils$clear_array;class EventPromises$$module$src$utils$event_promises{constructor(){this.timeoutTimers=[];this.resumeResolver=this.resumePromise=this.pauseResolver=this.pausePromise=this.stopResolver=this.stopPromise=this.startResolver=this.startPromise=void 0;this.createStartPromise=this.createStartPromise.bind(this);this.releaseStartPromise=this.releaseStartPromise.bind(this);this.createStopPromise=this.createStopPromise.bind(this);this.releaseStopPromise=this.releaseStopPromise.bind(this);this.createPausePromise=
this.createPausePromise.bind(this);this.releasePausePromise=this.releasePausePromise.bind(this);this.createResumePromise=this.createResumePromise.bind(this);this.releaseResumePromise=this.releaseResumePromise.bind(this);this.waitForStart=this.waitForStart.bind(this);this.waitForStop=this.waitForStop.bind(this);this.isWaitingToStart=this.isWaitingToStart.bind(this);this.isWaitingToStop=this.isWaitingToStop.bind(this)}isWaitingToStart(){return void 0!==this.startPromise}isWaitingToStop(){return void 0!==
this.stopPromise}isWaiting(a){return void 0!==this.startPromise?(console.error(`cannot ${a} while starting, did you forget to 'await'?`),!0):void 0!==this.stopPromise?(console.error(`cannot ${a} while stopping, did you forget to 'await'?`),!0):void 0!==this.pausePromise?(console.error(`cannot ${a} while pausing, did you forget to 'await'?`),!0):void 0!==this.resumePromise?(console.error(`cannot ${a} while resuming, did you forget to 'await'?`),!0):!1}async waitForStart(){return this.startPromise?
await this.startPromise:-1}async waitForStop(){let a;return null!=(a=this.stopPromise)?a:-1}async waitForPause(){let a;return null!=(a=this.pausePromise)?a:-1}async waitForResume(){let a;return null!=(a=this.resumePromise)?a:-1}createStartPromise(){this.startPromise||(this.startPromise=new Promise(a=>{this.startResolver=a;const b=setTimeout(()=>{this.timeoutTimers=reject$$module$node_modules$rambda$dist$rambda_mjs(equals$$module$node_modules$rambda$dist$rambda_mjs(b),this.timeoutTimers);this.startPromise&&
(console.warn("start promise timed out"),this.startResolver(),delete this.startResolver,this.startPromise&&delete this.startPromise)},2E3);this.timeoutTimers.push(b)}))}releaseStartPromise(){try{this.timeoutTimers.forEach(clearTimeout),clearArray$$module$src$utils$clear_array(this.timeoutTimers)}catch(a){console.error(a)}this.startResolver&&(this.startResolver(),delete this.startResolver);this.startPromise&&delete this.startPromise}createStopPromise(){this.stopPromise||(this.stopPromise=new Promise(a=>
{this.stopResolver=a;const b=setTimeout(()=>{this.timeoutTimers=reject$$module$node_modules$rambda$dist$rambda_mjs(equals$$module$node_modules$rambda$dist$rambda_mjs(b),this.timeoutTimers);this.stopPromise&&(console.warn("stop promise timed out"),this.stopResolver(),delete this.stopResolver,this.stopPromise&&delete this.stopPromise)},2E3);this.timeoutTimers.push(b)}))}releaseStopPromise(){try{this.timeoutTimers.forEach(clearTimeout),clearArray$$module$src$utils$clear_array(this.timeoutTimers)}catch(a){console.error(a)}this.stopResolver&&
(this.stopResolver(),delete this.stopResolver);this.stopPromise&&delete this.stopPromise}createPausePromise(){this.pausePromise||(this.pausePromise=new Promise(a=>{this.pauseResolver=a;const b=setTimeout(()=>{this.timeoutTimers=reject$$module$node_modules$rambda$dist$rambda_mjs(equals$$module$node_modules$rambda$dist$rambda_mjs(b),this.timeoutTimers);this.pausePromise&&(console.warn("pause promise timed out"),this.pauseResolver(),delete this.pauseResolver,this.pausePromise&&delete this.pausePromise)},
2E3);this.timeoutTimers.push(b)}))}releasePausePromise(){try{this.timeoutTimers.forEach(clearTimeout),clearArray$$module$src$utils$clear_array(this.timeoutTimers)}catch(a){console.error(a)}this.pauseResolver&&(this.pauseResolver(),delete this.pauseResolver);this.pausePromise&&delete this.pausePromise}createResumePromise(){this.resumePromise||(this.resumePromise=new Promise(a=>{this.resumeResolver=a;const b=setTimeout(()=>{this.timeoutTimers=reject$$module$node_modules$rambda$dist$rambda_mjs(equals$$module$node_modules$rambda$dist$rambda_mjs(b),
this.timeoutTimers);this.resumePromise&&(console.warn("resume promise timed out"),this.resumeResolver(),delete this.resumeResolver,this.resumePromise&&delete this.resumePromise)},2E3);this.timeoutTimers.push(b)}))}releaseResumePromise(){try{this.timeoutTimers.forEach(clearTimeout),clearArray$$module$src$utils$clear_array(this.timeoutTimers)}catch(a){console.error(a)}this.resumeResolver&&(this.resumeResolver(),delete this.resumeResolver);this.resumePromise&&delete this.resumePromise}}
var module$src$utils$event_promises={};module$src$utils$event_promises.EventPromises=EventPromises$$module$src$utils$event_promises;var module$node_modules$eventemitter3$umd$eventemitter3_min={};
module$node_modules$eventemitter3$umd$eventemitter3_min.default=function(){return function e(b,c,d){function f(k,m){if(!c[k]){if(!b[k]){var n="function"==typeof require&&require;if(!m&&n)return n(k,!0);if(g)return g(k,!0);m=Error("Cannot find module '"+k+"'");throw m.code="MODULE_NOT_FOUND",m;}m=c[k]={exports:{}};b[k][0].call(m.exports,function(l){return f(b[k][1][l]||l)},m,m.exports,e,b,c,d)}return c[k].exports}for(var g="function"==typeof require&&require,h=0;h<d.length;h++)f(d[h]);return f}({1:[function(b,
c,d){function e(){}function f(l,p,q){this.fn=l;this.context=p;this.once=q||!1}function g(l,p,q,u,t){if("function"!=typeof q)throw new TypeError("The listener must be a function");q=new f(q,u||l,t);p=n?n+p:p;return l._events[p]?l._events[p].fn?l._events[p]=[l._events[p],q]:l._events[p].push(q):(l._events[p]=q,l._eventsCount++),l}function h(l,p){0==--l._eventsCount?l._events=new e:delete l._events[p]}function k(){this._events=new e;this._eventsCount=0}var m=Object.prototype.hasOwnProperty,n="~";Object.create&&
(e.prototype=Object.create(null),(new e).__proto__||(n=!1));k.prototype.eventNames=function(){var l,p,q=[];if(0===this._eventsCount)return q;for(p in l=this._events)m.call(l,p)&&q.push(n?p.slice(1):p);return Object.getOwnPropertySymbols?q.concat(Object.getOwnPropertySymbols(l)):q};k.prototype.listeners=function(l){l=this._events[n?n+l:l];if(!l)return[];if(l.fn)return[l.fn];for(var p=0,q=l.length,u=Array(q);p<q;p++)u[p]=l[p].fn;return u};k.prototype.listenerCount=function(l){return(l=this._events[n?
n+l:l])?l.fn?1:l.length:0};k.prototype.emit=function(l,p,q,u,t,x){var r=n?n+l:l;if(!this._events[r])return!1;var y;r=this._events[r];var v=arguments.length;if(r.fn){switch(r.once&&this.removeListener(l,r.fn,void 0,!0),v){case 1:return r.fn.call(r.context),!0;case 2:return r.fn.call(r.context,p),!0;case 3:return r.fn.call(r.context,p,q),!0;case 4:return r.fn.call(r.context,p,q,u),!0;case 5:return r.fn.call(r.context,p,q,u,t),!0;case 6:return r.fn.call(r.context,p,q,u,t,x),!0}w=1;for(y=Array(v-1);w<
v;w++)y[w-1]=arguments[w];r.fn.apply(r.context,y)}else for(var z,B=r.length,w=0;w<B;w++)switch(r[w].once&&this.removeListener(l,r[w].fn,void 0,!0),v){case 1:r[w].fn.call(r[w].context);break;case 2:r[w].fn.call(r[w].context,p);break;case 3:r[w].fn.call(r[w].context,p,q);break;case 4:r[w].fn.call(r[w].context,p,q,u);break;default:if(!y)for(z=1,y=Array(v-1);z<v;z++)y[z-1]=arguments[z];r[w].fn.apply(r[w].context,y)}return!0};k.prototype.on=function(l,p,q){return g(this,l,p,q,!1)};k.prototype.once=function(l,
p,q){return g(this,l,p,q,!0)};k.prototype.removeListener=function(l,p,q,u){l=n?n+l:l;if(!this._events[l])return this;if(!p)return h(this,l),this;var t=this._events[l];if(t.fn)t.fn!==p||u&&!t.once||q&&t.context!==q||h(this,l);else{for(var x=0,r=[],y=t.length;x<y;x++)(t[x].fn!==p||u&&!t[x].once||q&&t[x].context!==q)&&r.push(t[x]);r.length?this._events[l]=1===r.length?r[0]:r:h(this,l)}return this};k.prototype.removeAllListeners=function(l){var p;return l?(p=n?n+l:l,this._events[p]&&h(this,p)):(this._events=
new e,this._eventsCount=0),this};k.prototype.off=k.prototype.removeListener;k.prototype.addListener=k.prototype.on;k.prefixed=n;k.EventEmitter=k;void 0!==c&&(c.exports=k)},{}]},{},[1])(1)}();class PublicEventAPI$$module$src$events{constructor(a){this.parent=a;this.eventEmitter=new module$node_modules$eventemitter3$umd$eventemitter3_min.default;this.currentDerivedPlayState=void 0;this.decorateAPI=this.decorateAPI.bind(this);this.triggerRealtimePerformanceStarted=this.triggerRealtimePerformanceStarted.bind(this);this.triggerRealtimePerformancePaused=this.triggerRealtimePerformancePaused.bind(this);this.triggerRealtimePerformanceResumed=this.triggerRealtimePerformanceResumed.bind(this);
this.triggerRealtimePerformanceEnded=this.triggerRealtimePerformanceEnded.bind(this);this.triggerRenderStarted=this.triggerRenderStarted.bind(this);this.triggerRenderEnded=this.triggerRenderEnded.bind(this);this.triggerOnAudioNodeCreated=this.triggerOnAudioNodeCreated.bind(this);this.terminateInstance=this.terminateInstance.bind(this)}terminateInstance(){this.eventEmitter.removeAllListeners("play pause stop realtimePerformanceStarted realtimePerformancePaused realtimePerformanceResumed realtimePerformanceEnded renderStarted renderEnded onAudioNodeCreated message".split(" "));
Object.keys(this).forEach(a=>delete this[a])}triggerRealtimePerformanceStarted(){this.eventEmitter.emit("realtimePerformanceStarted");"play"!==this.currentDerivedPlayState&&(this.eventEmitter.emit("play"),this.currentDerivedPlayState="play")}triggerRealtimePerformancePaused(){this.eventEmitter.emit("realtimePerformancePaused");"pause"!==this.currentDerivedPlayState&&(this.eventEmitter.emit("pause"),this.currentDerivedPlayState="pause")}triggerRealtimePerformanceResumed(){this.eventEmitter.emit("realtimePerformanceResumed");
"play"!==this.currentDerivedPlayState&&(this.eventEmitter.emit("play"),this.currentDerivedPlayState="play")}triggerRealtimePerformanceEnded(){this.eventEmitter.emit("realtimePerformanceEnded");"stop"!==this.currentDerivedPlayState&&(this.eventEmitter.emit("stop"),this.currentDerivedPlayState="stop")}triggerRenderStarted(){this.eventEmitter.emit("renderStarted");"stop"!==this.currentDerivedPlayState&&(this.eventEmitter.emit("stop"),this.currentDerivedPlayState="stop")}triggerRenderEnded(){this.eventEmitter.emit("renderEnded");
"stop"!==this.currentDerivedPlayState&&(this.eventEmitter.emit("stop"),this.currentDerivedPlayState="stop")}triggerOnAudioNodeCreated(a){this.eventEmitter.emit("onAudioNodeCreated",a)}triggerMessage({log:a}){this.eventEmitter.emit("message",a)}decorateAPI(a){a.eventNames=this.eventEmitter.eventNames.bind(this.eventEmitter);a.listenerCount=this.eventEmitter.listenerCount.bind(this.eventEmitter);a.listeners=this.eventEmitter.listeners.bind(this.eventEmitter);a.off=this.eventEmitter.off.bind(this.eventEmitter);
a.on=this.eventEmitter.on.bind(this.eventEmitter);a.addListener=this.eventEmitter.on.bind(this.eventEmitter);a.once=this.eventEmitter.once.bind(this.eventEmitter);a.removeAllListeners=this.eventEmitter.removeAllListeners.bind(this.eventEmitter);a.removeListener=this.eventEmitter.removeListener.bind(this.eventEmitter);return a}}var module$src$events={};module$src$events.PublicEventAPI=PublicEventAPI$$module$src$events;var $jscompDefaultExport$$module$dist$__compiled_vanilla_worker_inline=()=>(window.URL||window.webkitURL).createObjectURL(new Blob(['(function(){/*\n\n Copyright The Closure Library Authors.\n SPDX-License-Identifier: Apache-2.0\n*/\nvar $jscomp=$jscomp||{};$jscomp.scope={};var COMPILED=!0,goog=goog||{};goog.global=this||self;goog.exportPath_=function(a,b,c,d){a=a.split(".");d=d||goog.global;a[0]in d||"undefined"==typeof d.execScript||d.execScript("var "+a[0]);for(var e;a.length&&(e=a.shift());)if(a.length||void 0===b)d=d[e]&&d[e]!==Object.prototype[e]?d[e]:d[e]={};else if(!c&&goog.isObject(b)&&goog.isObject(d[e]))for(var f in b)b.hasOwnProperty(f)&&(d[e][f]=b[f]);else d[e]=b};\ngoog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2020;goog.DEBUG=!0;goog.LOCALE="en";goog.getLocale=function(){return goog.LOCALE};goog.TRUSTED_SITE=!0;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;\ngoog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(a))throw Error(\'Namespace "\'+a+\'" already declared.\');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b,c){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var d=a;(d=d.substring(0,d.lastIndexOf(".")))&&!goog.getObjectByName(d);)goog.implicitNamespaces_[d]=!0}goog.exportPath_(a,b,c)};goog.NONCE_PATTERN_=/^[\\w+/_-]+[=]{0,2}$/;\ngoog.getScriptNonce_=function(a){a=(a||goog.global).document;return(a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(a)?a:""};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\ngoog.module=function(a){if("string"!==typeof a||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You\'re likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");\ngoog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error(\'Namespace "\'+a+\'" already declared.\');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};goog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:"es6",GOOG:"goog"};goog.moduleLoaderState_=null;\ngoog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?"function"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};\ngoog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0};\ngoog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(a in goog.loadedModules_)throw Error(\'Module with namespace "\'+a+\'" already exists.\');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||"function"!=typeof b.getCurrentModulePath)throw Error(\'Module with namespace "\'+\na+\'" has been loaded incorrectly.\');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&null!=goog.getObjectByName(a)},goog.implicitNamespaces_={"goog.module":!0});\ngoog.getObjectByName=function(a,b){a=a.split(".");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b};goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};\ngoog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath="";goog.abstractMethod=function(){throw Error("unimplemented abstract method");};\ngoog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";goog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRUSTED_TYPES_POLICY_NAME="goog";\ngoog.hasBadLetScoping=null;\ngoog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};var c={},d=c;if("function"===typeof a)d=a.call(void 0,d);else if("string"===typeof a)d=goog.loadModuleFromSource_.call(void 0,d,a);else throw Error("Invalid module definition");var e=goog.moduleLoaderState_.moduleName;if("string"===typeof e&&e)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(e,d,c!==d):goog.SEAL_MODULE_EXPORTS&&\nObject.seal&&"object"==typeof d&&null!=d&&Object.seal(d),goog.loadedModules_[e]={exports:d,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error(\'Invalid module name "\'+e+\'"\');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a,b){eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(b));return a};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};\ngoog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};goog.typeOf=function(a){var b=typeof a;return"object"!=b?b:a?Array.isArray(a)?"array":b:"null"};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};\ngoog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};goog.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,goog.UID_PROPERTY_)&&a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};\ngoog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if("function"===typeof a.clone)return a.clone();if("undefined"!==typeof Map&&a instanceof Map)return new Map(a);if("undefined"!==typeof Set&&a instanceof Set)return new Set(a);b="array"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};\ngoog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};\ngoog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}};goog.now=function(){return Date.now()};goog.globalEval=function(a){(0,eval)(a)};\ngoog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error(\'className passed in goog.getCssName must not start with ".". You passed: \'+a);var c=function(e){return goog.cssNameMapping_[e]||e},d=function(e){e=e.split("-");for(var f=[],g=0;g<e.length;g++)f.push(c(e[g]));return f.join("-")};d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(e){return e};a=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};\ngoog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.GetMsgOptions=function(){};\ngoog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,"&lt;"));c&&c.unescapeHtmlEntities&&(a=a.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&apos;/g,"\'").replace(/&quot;/g,\'"\').replace(/&amp;/g,"&"));b&&(a=a.replace(/\\{\\$([^}]+)}/g,function(d,e){return null!=b&&e in b?b[e]:d}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,!0,c)};goog.exportProperty=function(a,b,c){a[b]=c};\ngoog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(d,e,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++)g[h-2]=arguments[h];return b.prototype[e].apply(d,g)}};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");a.call(goog.global)};COMPILED||(goog.global.COMPILED=COMPILED);\ngoog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;\ngoog.defineClass.createSealingConstructor_=function(a,b){return goog.defineClass.SEAL_CLASS_INSTANCES?function(){var c=a.apply(this,arguments)||this;c[goog.UID_PROPERTY_]=c[goog.UID_PROPERTY_];return c}:a};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");\ngoog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};goog.identity_=function(a){return a};\ngoog.createTrustedTypesPolicy=function(a){var b=null,c=goog.global.trustedTypes;if(!c||!c.createPolicy)return b;try{b=c.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_})}catch(d){goog.logToConsole_(d.message)}return b};\n!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.isEdge_=function(){return!!(goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"").match(/Edge\\/(\\d+)(\\.\\d)*/i)},goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?"complete"!=a.readyState:"loading"==a.readyState},goog.findBasePath_=function(){if(void 0!=goog.global.CLOSURE_BASE_PATH&&"string"===typeof goog.global.CLOSURE_BASE_PATH)goog.basePath=\ngoog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;a=b?[b]:a.getElementsByTagName("SCRIPT");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?");d=-1==d?c.length:d;if("base.js"==c.slice(d-7,d)){goog.basePath=c.slice(0,d-7);break}}}},goog.findBasePath_(),goog.protectScriptTag_=function(a){return a.replace(/<\\/(SCRIPT)/ig,"\\\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={};this.idToPath_={};this.written_={};this.loadingDeps_=\n[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory;this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error("Unregonized namespace: "+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},\ngoog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{}));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=function(a){this.factory_=a},goog.DebugLoader_.prototype.load_=\nfunction(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(e){var f=b.getPathFromDeps_(e);if(!f)throw Error("Bad dependency path or symbol: "+e);if(!b.written_[f]){b.written_[f]=!0;e=b.dependencies_[f];for(f=0;f<e.requires.length;f++)goog.isProvided_(e.requires[f])||d(e.requires[f]);c.push(e)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else goog.logToConsole_("goog.require could not find: "+a)},goog.DebugLoader_.prototype.loadDeps_=\nfunction(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error("Cannot call pause after the call to load.");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error("Double call to loaded.");e=!0;a.loaded_(d)},pending:function(){for(var g=[],h=0;h<a.loadingDeps_.length;h++)g.push(a.loadingDeps_[h]);return g},setModuleState:function(g){goog.moduleLoaderState_={type:g,\nmoduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(g,h,k){k&&(goog.loadedModules_[k]={exports:h,type:goog.ModuleType.ES6,moduleId:k||""})},registerGoogModuleExports:function(g,h){goog.loadedModules_[g]={exports:h,type:goog.ModuleType.GOOG,moduleId:g}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(g){if(c)throw Error("Cannot register with defer after the call to load.");a.defer_(d,g)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};\ntry{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);break}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==\na.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=function(a){return a in this.idToPath_?\nthis.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,b,c){},goog.LoadController.prototype.setModuleState=\nfunction(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf("://");0<=b&&(a=a.substring(b+3),b=a.indexOf("/"),0<=b&&(a=a.substring(b+1)));return a},\ngoog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=function(a){delete goog.Dependency.callbackMap_[a]},\ngoog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error("Callback key "+a+" does not exist (was base.js loaded more than once?).");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=goog.global.document;if("complete"==\nb.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\\bdeps.js$/.test(this.path)){a.loaded();return}throw Error(\'Cannot write "\'+this.path+\'" after document load\');}var c=goog.getScriptNonce_();if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var d=function(h){h.readyState&&"complete"!=h.readyState?h.onload=d:(goog.Dependency.unregisterCallback_(e),a.loaded())};var e=goog.Dependency.registerCallback_(d);c=c?\' nonce="\'+c+\'"\':"";var f=\'<script src="\'+this.path+\'"\'+\nc+(goog.Dependency.defer_?" defer":"")+\' id="script-\'+e+\'">\\x3c/script>\';f+="<script"+c+">";f=goog.Dependency.defer_?f+("document.getElementById(\'script-"+e+"\').onload = function() {\\n  goog.Dependency.callback_(\'"+e+"\', this);\\n};\\n"):f+("goog.Dependency.callback_(\'"+e+"\', document.getElementById(\'script-"+e+"\'));");f+="\\x3c/script>";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(f):f)}else{var g=b.createElement("script");g.defer=goog.Dependency.defer_;g.async=!1;c&&(g.nonce=\nc);g.onload=function(){g.onload=null;a.loaded()};g.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(g)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),a.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,\nb,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(l,m){var n="",p=goog.getScriptNonce_();p&&(n=\' nonce="\'+p+\'"\');l=m?\'<script type="module" crossorigin\'+n+">"+m+"\\x3c/script>":\'<script type="module" crossorigin src="\'+l+\'"\'+n+">\\x3c/script>";d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(l):l)}function c(l,m){var n=d.createElement("script");n.defer=!0;n.async=!1;n.type="module";n.setAttribute("crossorigin",\n!0);var p=goog.getScriptNonce_();p&&(n.nonce=p);m?n.text=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(m):m:n.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(l):l;d.head.appendChild(n)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);\na.setModuleState(goog.ModuleType.ES6)});f(void 0,\'goog.Dependency.callback_("\'+g+\'")\');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(l){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,l,goog.moduleLoaderState_.moduleName)});f(void 0,\'import * as m from "\'+this.path+\'"; goog.Dependency.callback_("\'+h+\'", m)\');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);a.clearModuleState();a.loaded()});f(void 0,\'goog.Dependency.callback_("\'+\nk+\'")\')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=goog.loadFileSync_(e.path);e.contents_&&(e.contents_=\ne.transform(e.contents_),e.contents_&&(e.contents_+="\\n//# sourceURL="+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var l=e.contents_;e.contents_=null;goog.globalEval(goog.CLOSURE_EVAL_PREFILTER_.createScript(l));if(f)var m=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),m)});a.loaded()}}\nfunction d(){var l=goog.global.document,m=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(m);c()}),n=goog.getScriptNonce_();n="<script"+(n?\' nonce="\'+n+\'"\':"")+">"+goog.protectScriptTag_(\'goog.Dependency.callback_("\'+m+\'");\')+"\\x3c/script>";l.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(n):n)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,a.loaded()):\na.pause();else{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length;if(goog.Dependency.defer_&&(g||goog.isDocumentLoading_()))a.defer(function(){c()});else{var h=goog.global.document;g=goog.inHtmlDocument_()&&("ActiveXObject"in goog.global||goog.isEdge_());if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!g){goog.Dependency.defer_=!0;a.pause();var k=h.onreadystatechange;h.onreadystatechange=function(){"interactive"==h.readyState&&(h.onreadystatechange=\nk,c(),a.resume());"function"===typeof k&&k.apply(void 0,arguments)}}else goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,\nc,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=function(a){return goog.LOAD_MODULE_USING_EVAL&&void 0!==goog.global.JSON?"goog.loadModule("+goog.global.JSON.stringify(a+"\\n//# sourceURL="+this.path+"\\n")+");":\'goog.loadModule(function(exports) {"use strict";\'+a+"\\n;return exports});\\n//# sourceURL="+this.path+"\\n"},goog.DebugLoader_.prototype.addDependency=function(a,b,c,d){b=\nb||[];a=a.replace(/\\\\/g,"/");var e=goog.normalizePath_(goog.basePath+a);d&&"boolean"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d);this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(){},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,b,c,d,e):e.module==goog.ModuleType.ES6?goog.ASSUME_ES_MODULES_TRANSPILED?\nnew goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null,goog.global.CLOSURE_NO_DEPS||goog.debugLoader_.loadClosureDeps(),\ngoog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});if(!COMPILED){var isChrome87=!1;try{isChrome87=eval(goog.global.trustedTypes.emptyScript)!==goog.global.trustedTypes.emptyScript}catch(a){}goog.CLOSURE_EVAL_PREFILTER_=goog.global.trustedTypes&&isChrome87&&goog.createTrustedTypesPolicy("goog#base#devonly#eval")||{createScript:goog.identity_}};const proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.proxy"),createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.endpoint"),releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.releaseProxy"),throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.thrown"),isObject$$module$node_modules$comlink$dist$esm$comlink_mjs=a=>"object"===typeof a&&null!==a||"function"===typeof a,proxyTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs=\n{canHandle:a=>isObject$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&a[proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs],serialize(a){const {port1:b,port2:c}=new MessageChannel;expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b);return[c,[c]]},deserialize(a){a.start();return wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(a)}},throwTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs={canHandle:a=>isObject$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&\nthrowMarker$$module$node_modules$comlink$dist$esm$comlink_mjs in a,serialize({value:a}){return[a instanceof Error?{isError:!0,value:{message:a.message,name:a.name,stack:a.stack}}:{isError:!1,value:a},[]]},deserialize(a){if(a.isError)throw Object.assign(Error(a.value.message),a.value);throw a.value;}},transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs=new Map([["proxy",proxyTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs],["throw",throwTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs]]);\nfunction expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=self){b.addEventListener("message",function e(d){if(d&&d.data){var {id:f,type:g,path:h}=Object.assign({path:[]},d.data),k=(d.data.argumentList||[]).map(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);try{const m=h.slice(0,-1).reduce((p,q)=>p[q],a),n=h.reduce((p,q)=>p[q],a);switch(g){case "GET":var l=n;break;case "SET":m[h.slice(-1)[0]]=fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(d.data.value);\nl=!0;break;case "APPLY":l=n.apply(m,k);break;case "CONSTRUCT":const p=new n(...k);l=proxy$$module$node_modules$comlink$dist$esm$comlink_mjs(p);break;case "ENDPOINT":const {port1:q,port2:w}=new MessageChannel;expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,w);l=transfer$$module$node_modules$comlink$dist$esm$comlink_mjs(q,[q]);break;case "RELEASE":l=void 0;break;default:return}}catch(m){l={value:m,[throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:0}}Promise.resolve(l).catch(m=>\n({value:m,[throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:0})).then(m=>{const [n,p]=toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(m);b.postMessage(Object.assign(Object.assign({},n),{id:f}),p);"RELEASE"===g&&(b.removeEventListener("message",e),closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(b))})}});b.start&&b.start()}function isMessagePort$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return"MessagePort"===a.constructor.name}\nfunction closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a){isMessagePort$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&a.close()}function wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b){return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,[],b)}function throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(a){if(a)throw Error("Proxy has been released and is not useable");}\nfunction createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=[],c=function(){}){let d=!1;const e=new Proxy(c,{get(f,g){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);if(g===releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs)return()=>requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"RELEASE",path:b.map(h=>h.toString())}).then(()=>{closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a);d=!0});if("then"===\ng){if(0===b.length)return{then:()=>e};f=requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"GET",path:b.map(h=>h.toString())}).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);return f.then.bind(f)}return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,[...b,g])},set(f,g,h){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);const [k,l]=toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(h);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,\n{type:"SET",path:[...b,g].map(m=>m.toString()),value:k},l).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)},apply(f,g,h){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);f=b[b.length-1];if(f===createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs)return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"ENDPOINT"}).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);if("bind"===f)return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,\nb.slice(0,-1));const [k,l]=processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(h);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"APPLY",path:b.map(m=>m.toString()),argumentList:k},l).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)},construct(f,g){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);const [h,k]=processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(g);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,\n{type:"CONSTRUCT",path:b.map(l=>l.toString()),argumentList:h},k).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)}});return e}function myFlat$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return Array.prototype.concat.apply([],a)}\nfunction processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(a){a=a.map(toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);return[a.map(b=>b[0]),myFlat$$module$node_modules$comlink$dist$esm$comlink_mjs(a.map(b=>b[1]))]}const transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs=new WeakMap;function transfer$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b){transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs.set(a,b);return a}\nfunction proxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return Object.assign(a,{[proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:!0})}function windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=self,c="*"){return{postMessage:(d,e)=>a.postMessage(d,c,e),addEventListener:b.addEventListener.bind(b),removeEventListener:b.removeEventListener.bind(b)}}\nfunction toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(a){for(const [b,c]of transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs)if(c.canHandle(a)){const [d,e]=c.serialize(a);return[{type:"HANDLER",name:b,value:d},e]}return[{type:"RAW",value:a},transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs.get(a)||[]]}\nfunction fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(a){switch(a.type){case "HANDLER":return transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs.get(a.name).deserialize(a.value);case "RAW":return a.value}}\nfunction requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b,c){return new Promise(d=>{const e=generateUUID$$module$node_modules$comlink$dist$esm$comlink_mjs();a.addEventListener("message",function h(g){g.data&&g.data.id&&g.data.id===e&&(a.removeEventListener("message",h),d(g.data))});a.start&&a.start();a.postMessage(Object.assign({id:e},b),c)})}\nfunction generateUUID$$module$node_modules$comlink$dist$esm$comlink_mjs(){return Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}var module$node_modules$comlink$dist$esm$comlink_mjs={};module$node_modules$comlink$dist$esm$comlink_mjs.createEndpoint=createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.expose=expose$$module$node_modules$comlink$dist$esm$comlink_mjs;\nmodule$node_modules$comlink$dist$esm$comlink_mjs.proxy=proxy$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.proxyMarker=proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.releaseProxy=releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.transfer=transfer$$module$node_modules$comlink$dist$esm$comlink_mjs;\nmodule$node_modules$comlink$dist$esm$comlink_mjs.transferHandlers=transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.windowEndpoint=windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.wrap=wrap$$module$node_modules$comlink$dist$esm$comlink_mjs;function MessagePortState$$module$src$utils$message_port_state(){}MessagePortState$$module$src$utils$message_port_state.prototype.ready=!1;MessagePortState$$module$src$utils$message_port_state.prototype.port=void 0;MessagePortState$$module$src$utils$message_port_state.prototype.post=()=>{};MessagePortState$$module$src$utils$message_port_state.prototype.broadcastPlayState=()=>{};MessagePortState$$module$src$utils$message_port_state.prototype.workerState=void 0;\nMessagePortState$$module$src$utils$message_port_state.prototype.vanillaWorkerState=void 0;var $jscompDefaultExport$$module$src$utils$message_port_state=MessagePortState$$module$src$utils$message_port_state,module$src$utils$message_port_state={};module$src$utils$message_port_state.MessagePortState=MessagePortState$$module$src$utils$message_port_state;module$src$utils$message_port_state.default=$jscompDefaultExport$$module$src$utils$message_port_state;var module$node_modules$lines_logger$lib$index={default:{}};module$node_modules$lines_logger$lib$index.default.__esModule=!0;module$node_modules$lines_logger$lib$index.default.LoggerFactory=module$node_modules$lines_logger$lib$index.default.logLevels=void 0;module$node_modules$lines_logger$lib$index.default.logLevels={log_raise_error:1,log_with_warnings:2,trace:3,debug:4,info:5,warn:6,error:7,disable:8};\nvar LoggerFactory$$module$node_modules$lines_logger$lib$index=function(){function a(b,c){if(void 0===b&&(b="log_with_warnings"),void 0===c&&(c=null),this.logLevel=b,!module$node_modules$lines_logger$lib$index.default.logLevels[b])throw Error("Invalid log level "+b+" allowed: "+JSON.stringify(module$node_modules$lines_logger$lib$index.default.logLevels));this.mockConsole=c||console}return a.prototype.dummy=function(){},a.prototype.setLogWarnings=function(b){this.logLevel=b},a.prototype.getLogWarnings=\nfunction(){return this.logLevel},a.prototype.getSingleLoggerColor=function(b,c,d){return this.getSingleLoggerStyle(b,this.getColorStyle(c),d)},a.prototype.getSingleLogger=function(b,c){var d=this.getRandomColor(b);return this.getSingleLoggerStyle(b,this.getColorStyle(d),c)},a.prototype.getSingleLoggerStyle=function(b,c,d,e){var f=this;return void 0===e&&(e="log_with_warnings"),function(){for(var g=[],h=0;h<arguments.length;h++)g[h]=arguments[h];if(module$node_modules$lines_logger$lib$index.default.logLevels[f.logLevel]>\nmodule$node_modules$lines_logger$lib$index.default.logLevels[e])return f.dummy;g=Array.prototype.slice.call(g);h=g.shift().split("{}");for(var k=[f.mockConsole,"%c"+b,c],l=0;l<h.length;l++)k.push(h[l]),void 0!==g[l]&&k.push(g[l]);if(h.length-1!==g.length)if("log_with_warnings"===f.logLevel)f.mockConsole.error("MissMatch amount of arguments");else if("log_raise_error"===f.logLevel)throw Error("MissMatch amount of arguments");return Function.prototype.bind.apply(d,k)}},a.prototype.getLoggerColor=function(b,\nc){return this.getLoggerStyle(b,this.getColorStyle(c))},a.prototype.getColorStyle=function(b){return"color: white; background-color: "+b+"; padding: 2px 6px; border-radius: 2px; font-size: 10px"},a.getHash=function(b,c){void 0===c&&(c=0);var d=3735928559^c;c^=1103547991;for(var e=0,f;e<b.length;e++)f=b.charCodeAt(e),d=Math.imul(d^f,2654435761),c=Math.imul(c^f,1597334677);return d=Math.imul(d^d>>>16,2246822507)^Math.imul(c^c>>>13,3266489909),4294967296*(2097151&(Math.imul(c^c>>>16,2246822507)^Math.imul(d^\nd>>>13,3266489909)))+(d>>>0)},a.prototype.getRandomColor=function(b){void 0===b&&(b="");b=a.getHash(b);for(var c="#",d=0;3>d;d++)c+=("00"+(8+(b>>7*d&127)).toString(16)).substr(-2);return c},a.prototype.getLogger=function(b){return this.getLoggerColor(b,this.getRandomColor(b))},a.prototype.getLoggerStyle=function(b,c){return{trace:this.getSingleLoggerStyle(b,c,this.mockConsole.trace,"trace"),debug:this.getSingleLoggerStyle(b,c,this.mockConsole.debug,"debug"),log:this.getSingleLoggerStyle(b,c,this.mockConsole.log,\n"info"),warn:this.getSingleLoggerStyle(b,c,this.mockConsole.warn,"warn"),error:this.getSingleLoggerStyle(b,c,this.mockConsole.error,"error")}},a}();module$node_modules$lines_logger$lib$index.default.LoggerFactory=LoggerFactory$$module$node_modules$lines_logger$lib$index;let logWorkletMain$$module$src$logger,logWorkletWorker$$module$src$logger,logSABMain$$module$src$logger,logSABWorker$$module$src$logger,logVANMain$$module$src$logger,logVANWorker$$module$src$logger,logOldSpnMain$$module$src$logger,logOldSpnWorker$$module$src$logger,logIndex$$module$src$logger,logSPNMainSingle$$module$src$logger,logSinglethreadWorkletMain$$module$src$logger,logSinglethreadWorkletWorker$$module$src$logger,logCommonUtils$$module$src$logger,logWasmModule$$module$src$logger,logMidiRequest$$module$src$logger;\nconst isProd$$module$src$logger=1;logWorkletMain$$module$src$logger=a=>b=>{};logWorkletWorker$$module$src$logger=a=>b=>{};logSABMain$$module$src$logger=a=>b=>{};logSABWorker$$module$src$logger=a=>b=>{};logVANMain$$module$src$logger=a=>b=>{};logVANWorker$$module$src$logger=a=>b=>{};logOldSpnMain$$module$src$logger=a=>b=>{};logOldSpnWorker$$module$src$logger=a=>b=>{};logIndex$$module$src$logger=a=>b=>{};logSPNMainSingle$$module$src$logger=a=>b=>{};\nlogSinglethreadWorkletMain$$module$src$logger=a=>b=>{};logSinglethreadWorkletWorker$$module$src$logger=a=>b=>{};logCommonUtils$$module$src$logger=a=>b=>{};logWasmModule$$module$src$logger=a=>b=>{};logMidiRequest$$module$src$logger=a=>b=>{};var $jscompDefaultExport$$module$src$logger=a=>b=>{},module$src$logger={};module$src$logger.default=$jscompDefaultExport$$module$src$logger;module$src$logger.logCommonUtils=logCommonUtils$$module$src$logger;module$src$logger.logIndex=logIndex$$module$src$logger;\nmodule$src$logger.logMidiRequest=logMidiRequest$$module$src$logger;module$src$logger.logOldSpnMain=logOldSpnMain$$module$src$logger;module$src$logger.logOldSpnWorker=logOldSpnWorker$$module$src$logger;module$src$logger.logSABMain=logSABMain$$module$src$logger;module$src$logger.logSABWorker=logSABWorker$$module$src$logger;module$src$logger.logSPNMainSingle=logSPNMainSingle$$module$src$logger;module$src$logger.logSinglethreadWorkletMain=logSinglethreadWorkletMain$$module$src$logger;\nmodule$src$logger.logSinglethreadWorkletWorker=logSinglethreadWorkletWorker$$module$src$logger;module$src$logger.logVANMain=logVANMain$$module$src$logger;module$src$logger.logVANWorker=logVANWorker$$module$src$logger;module$src$logger.logWasmModule=logWasmModule$$module$src$logger;module$src$logger.logWorkletMain=logWorkletMain$$module$src$logger;module$src$logger.logWorkletWorker=logWorkletWorker$$module$src$logger;const DEFAULT_BUFFER_LEN$$module$src$constants=128,MAX_CHANNELS$$module$src$constants=32,RING_BUFFER_SIZE$$module$src$constants=16384,MIDI_BUFFER_SIZE$$module$src$constants=1024,MIDI_BUFFER_PAYLOAD_SIZE$$module$src$constants=3,CALLBACK_DATA_BUFFER_SIZE$$module$src$constants=16384,initialSharedState$$module$src$constants=[0,4096,0,0,0,0,-1,-1,-1,-1,0,DEFAULT_BUFFER_LEN$$module$src$constants,0,0,0,0,0,0,0,0],AUDIO_STATE$$module$src$constants={CSOUND_LOCK:0,FRAMES_REQUESTED:1,IS_PERFORMING:2,IS_RENDERING:3,\nIS_PAUSED:4,STOP:5,SAMPLE_RATE:6,KSMPS:7,NCHNLS:8,NCHNLS_I:9,IS_REQUESTING_MIC:10,BUFFER_LEN:11,OUTPUT_READ_INDEX:12,OUTPUT_WRITE_INDEX:13,AVAIL_IN_BUFS:14,AVAIL_OUT_BUFS:15,IS_REQUESTING_RTMIDI:16,RTMIDI_INDEX:17,AVAIL_RTMIDI_EVENTS:18,HAS_PENDING_CALLBACKS:19},DATA_TYPE$$module$src$constants={NUMBER:0,STRING:1,FLOAT_32:2,FLOAT_64:3};var module$src$constants={};module$src$constants.AUDIO_STATE=AUDIO_STATE$$module$src$constants;module$src$constants.CALLBACK_DATA_BUFFER_SIZE=CALLBACK_DATA_BUFFER_SIZE$$module$src$constants;\nmodule$src$constants.DATA_TYPE=DATA_TYPE$$module$src$constants;module$src$constants.DEFAULT_BUFFER_LEN=DEFAULT_BUFFER_LEN$$module$src$constants;module$src$constants.MAX_CHANNELS=MAX_CHANNELS$$module$src$constants;module$src$constants.MIDI_BUFFER_PAYLOAD_SIZE=MIDI_BUFFER_PAYLOAD_SIZE$$module$src$constants;module$src$constants.MIDI_BUFFER_SIZE=MIDI_BUFFER_SIZE$$module$src$constants;module$src$constants.RING_BUFFER_SIZE=RING_BUFFER_SIZE$$module$src$constants;module$src$constants.initialSharedState=initialSharedState$$module$src$constants;const handleCsoundStart$$module$src$workers$common_utils=(a,b,c,d,e)=>f=>{const {csound:g}=f,h=1===b.csoundShouldDaemonize(g);h&&(b.csoundSetOption(g,"--daemon"),b.csoundSetOption(g,"-odac"));const k=b.csoundStart(g),l=b.csoundGetOutputName(g)||"test.wav";logCommonUtils$$module$src$logger(`handleCsoundStart: actual csoundStart result ${k}, outputName: ${l}`)();0!==k&&a.post(`error: csoundStart failed while trying to render ${l},`+" look out for errors in options and syntax");setTimeout(()=>{const m=\nb._isRequestingRtMidiInput(g);if(h||m||l.includes("dac"))d(f);else if(a.broadcastPlayState("renderStarted"),e)e(f);else for(;0===b.csoundPerformKsmps(g););},0);return k},instantiateAudioPacket$$module$src$workers$common_utils=(a,b)=>{const c=[];for(let d=0;d<a;d++)c.push(new Float64Array(b));return c},renderFunction$$module$src$workers$common_utils=({libraryCsound:a,workerMessagePort:b})=>async({csound:c})=>{const d=a.csoundGetKr(c);let e=0,f=0;for(;("renderStarted"===b.vanillaWorkerState||"renderStarted"===\nb.workerState)&&0===e;)e=a.csoundPerformKsmps(c),f+=1,"function"===typeof setTimeout&&0===e&&0===f%(2*d)&&await new Promise(g=>setTimeout(g,0));b.broadcastPlayState("renderEnded")};var module$src$workers$common_utils={};module$src$workers$common_utils.handleCsoundStart=handleCsoundStart$$module$src$workers$common_utils;module$src$workers$common_utils.instantiateAudioPacket=instantiateAudioPacket$$module$src$workers$common_utils;module$src$workers$common_utils.renderFunction=renderFunction$$module$src$workers$common_utils;const csoundCreate$$module$src$modules$instantiation=a=>()=>a.exports.csoundCreateWasi();csoundCreate$$module$src$modules$instantiation.toString=()=>"create = async () => undefined;";const csoundDestroy$$module$src$modules$instantiation=a=>b=>a.exports.csoundDestroy(b);csoundDestroy$$module$src$modules$instantiation.toString=()=>"destroy = async () => undefined;";const csoundGetAPIVersion$$module$src$modules$instantiation=a=>()=>a.exports.csoundGetAPIVersion();\ncsoundGetAPIVersion$$module$src$modules$instantiation.toString=()=>"getAPIVersion = async () => Number;";const csoundGetVersion$$module$src$modules$instantiation=a=>()=>a.exports.csoundGetVersion();csoundGetVersion$$module$src$modules$instantiation.toString=()=>"getVersion = async () => Number;";const csoundInitialize$$module$src$modules$instantiation=a=>(b,c)=>a.exports.csoundInitialize(c);csoundInitialize$$module$src$modules$instantiation.toString=()=>"initialize = async () => Number;";\nvar module$src$modules$instantiation={};module$src$modules$instantiation.csoundCreate=csoundCreate$$module$src$modules$instantiation;module$src$modules$instantiation.csoundDestroy=csoundDestroy$$module$src$modules$instantiation;module$src$modules$instantiation.csoundGetAPIVersion=csoundGetAPIVersion$$module$src$modules$instantiation;module$src$modules$instantiation.csoundGetVersion=csoundGetVersion$$module$src$modules$instantiation;module$src$modules$instantiation.csoundInitialize=csoundInitialize$$module$src$modules$instantiation;const WITH_TEXT_ENCODER_POLYFILL$$module$src$utils$text_encoders=!1;function TextEncoderPoly$$module$src$utils$text_encoders(){this.encoding="utf8";return this}TextEncoderPoly$$module$src$utils$text_encoders.prototype.encode=function(a){if("string"!==typeof a)throw new TypeError("passed argument must be of type string "+a+" "+typeof a);a=unescape(encodeURIComponent(a));const b=new Uint8Array(a.length);[...a].forEach(function(c,d){b[d]=c.codePointAt(0)});return b};\nfunction TextDecoderPoly$$module$src$utils$text_encoders(){this.encoding="utf8";this.ignoreBOM=!1;this.trimNull=a=>{const b=a.indexOf("\\x00");return-1<b?a.slice(0,Math.max(0,b)):a};this.decode=function(a,b){if(void 0===a)return"";if("boolean"!==typeof(void 0!==b&&"stream"in b?b.stream:!1))throw new TypeError("stream option must be boolean");if(ArrayBuffer.isView(a)){a=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);const c=Array.from({length:a.length});a.forEach(function(d,e){c[e]=String.fromCodePoint(d)});\nreturn this.trimNull(c.join(""))}throw new TypeError("passed argument must be an array buffer view");}}\nconst decoder$$module$src$utils$text_encoders=WITH_TEXT_ENCODER_POLYFILL$$module$src$utils$text_encoders?new TextDecoderPoly$$module$src$utils$text_encoders:new TextDecoder("utf8"),encoder$$module$src$utils$text_encoders=WITH_TEXT_ENCODER_POLYFILL$$module$src$utils$text_encoders?new TextEncoderPoly$$module$src$utils$text_encoders:new TextEncoder("utf8"),uint2String$$module$src$utils$text_encoders=a=>decoder$$module$src$utils$text_encoders.decode(a);var module$src$utils$text_encoders={};\nmodule$src$utils$text_encoders.decoder=decoder$$module$src$utils$text_encoders;module$src$utils$text_encoders.encoder=encoder$$module$src$utils$text_encoders;module$src$utils$text_encoders.uint2String=uint2String$$module$src$utils$text_encoders;const trimNull$$module$src$utils$trim_null=a=>{const b=a.indexOf("\\x00");return-1<b?a.substr(0,b):a};var module$src$utils$trim_null={};module$src$utils$trim_null.trimNull=trimNull$$module$src$utils$trim_null;const freeStringPtr$$module$src$utils$string_pointers=(a,b)=>{a.exports.freeStringMem(b)},ptr2string$$module$src$utils$string_pointers=(a,b)=>{({buffer:a}=a.wasi.memory);b=new Uint8Array(a,b);b=uint2String$$module$src$utils$text_encoders(b);return trimNull$$module$src$utils$trim_null(b)},string2ptr$$module$src$utils$string_pointers=(a,b)=>{if("string"!==typeof b)console.error("Expected string but got",typeof b);else{b=encoder$$module$src$utils$text_encoders.encode(b);var c=a.exports.allocStringMem(b.length);\n({buffer:a}=a.wasi.memory);(new Uint8Array(a,c,b.length+1)).set(b);return c}};var module$src$utils$string_pointers={};module$src$utils$string_pointers.freeStringPtr=freeStringPtr$$module$src$utils$string_pointers;module$src$utils$string_pointers.ptr2string=ptr2string$$module$src$utils$string_pointers;module$src$utils$string_pointers.string2ptr=string2ptr$$module$src$utils$string_pointers;const csoundParseOrc$$module$src$modules$performance=a=>(b,c)=>a.exports.csoundParseOrc(b,c);csoundParseOrc$$module$src$modules$performance.toString=()=>"parseOrc = async (orchestra) => Object;";const csoundCompileTree$$module$src$modules$performance=a=>(b,c)=>a.exports.csoundCompileTree(b,c);csoundCompileTree$$module$src$modules$performance.toString=()=>"compileTree = async (tree) => Number;";\nconst csoundCompileOrc$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundCompileOrc(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundCompileOrc$$module$src$modules$performance.toString=()=>"compileOrc = async (orchestra) => Number;";\nconst csoundEvalCode$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundEvalCode(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundEvalCode$$module$src$modules$performance.toString=()=>"csoundEvalCode = async (orchestra) => Number;";const csoundStart$$module$src$modules$performance=a=>b=>a.exports.csoundStartWasi(b);csoundStart$$module$src$modules$performance.toString=()=>"start = async () => Number;";\nconst csoundCompileCsd$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);let d;try{d=a.exports.csoundCompileCsd(b,c)}catch(e){console.error(e)}freeStringPtr$$module$src$utils$string_pointers(a,c);return d};csoundCompileCsd$$module$src$modules$performance.toString=()=>"compileCsd = async (path) => Number;";\nconst csoundCompileCsdText$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundCompileCsdText(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundCompileCsdText$$module$src$modules$performance.toString=()=>"compileCsdText = async (csoundDocument) => Number;";const csoundPerform$$module$src$modules$performance=a=>b=>a.exports.csoundPerform(b);csoundPerform$$module$src$modules$performance.toString=()=>"perform = async () => Number;";\nconst csoundPerformKsmps$$module$src$modules$performance=a=>b=>a.exports.csoundPerformKsmpsWasi(b);csoundPerformKsmps$$module$src$modules$performance.toString=()=>"performKsmps = async (csound) => Number;";const csoundPerformBuffer$$module$src$modules$performance=a=>b=>a.exports.csoundPerformBuffer(b);csoundPerformBuffer$$module$src$modules$performance.toString=()=>"performBuffer = async (csound) => Number;";const csoundStop$$module$src$modules$performance=a=>b=>a.exports.csoundStop(b);\ncsoundStop$$module$src$modules$performance.toString=()=>"stop = async () => undefined;";const csoundCleanup$$module$src$modules$performance=a=>b=>a.exports.csoundCleanup(b);csoundCleanup$$module$src$modules$performance.toString=()=>"cleanup = async () => Number;";const csoundReset$$module$src$modules$performance=a=>b=>a.exports.csoundResetWasi(b);csoundReset$$module$src$modules$performance.toString=()=>"reset = async () => Number;";var module$src$modules$performance={};\nmodule$src$modules$performance.csoundCleanup=csoundCleanup$$module$src$modules$performance;module$src$modules$performance.csoundCompileCsd=csoundCompileCsd$$module$src$modules$performance;module$src$modules$performance.csoundCompileCsdText=csoundCompileCsdText$$module$src$modules$performance;module$src$modules$performance.csoundCompileOrc=csoundCompileOrc$$module$src$modules$performance;module$src$modules$performance.csoundCompileTree=csoundCompileTree$$module$src$modules$performance;\nmodule$src$modules$performance.csoundEvalCode=csoundEvalCode$$module$src$modules$performance;module$src$modules$performance.csoundParseOrc=csoundParseOrc$$module$src$modules$performance;module$src$modules$performance.csoundPerform=csoundPerform$$module$src$modules$performance;module$src$modules$performance.csoundPerformBuffer=csoundPerformBuffer$$module$src$modules$performance;module$src$modules$performance.csoundPerformKsmps=csoundPerformKsmps$$module$src$modules$performance;\nmodule$src$modules$performance.csoundReset=csoundReset$$module$src$modules$performance;module$src$modules$performance.csoundStart=csoundStart$$module$src$modules$performance;module$src$modules$performance.csoundStop=csoundStop$$module$src$modules$performance;const sizeOfPrimitive$$module$src$utils$native_sizes={int:4,MYFLT:4,char:1},sizeofStruct$$module$src$utils$native_sizes=a=>a.reduce((b,[,c,...d])=>b+("char"===c?sizeOfPrimitive$$module$src$utils$native_sizes[c]*d[0]:sizeOfPrimitive$$module$src$utils$native_sizes[c]),0);var module$src$utils$native_sizes={};module$src$utils$native_sizes.sizeOfPrimitive=sizeOfPrimitive$$module$src$utils$native_sizes;module$src$utils$native_sizes.sizeofStruct=sizeofStruct$$module$src$utils$native_sizes;const structBufferToObject$$module$src$utils$structure_buffer_to_object=(a,b)=>{[a]=a.reduce(([c,d],[e,f,...g])=>{g="char"===f?sizeOfPrimitive$$module$src$utils$native_sizes[f]*g[0]:sizeOfPrimitive$$module$src$utils$native_sizes[f];f="char"===f?trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(b.subarray(d,g)))||"":b[d];c[e]=f;return[c,d+g]},[{},0]);return a};var module$src$utils$structure_buffer_to_object={};\nmodule$src$utils$structure_buffer_to_object.structBufferToObject=structBufferToObject$$module$src$utils$structure_buffer_to_object;const CSOUND_PARAMS$$module$src$structures=[["debug_mode","int"],["buffer_frames","int"],["hardware_buffer_frames","int"],["displays","int"],["ascii_graphs","int"],["postscript_graphs","int"],["message_level","int"],["tempo","int"],["ring_bell","int"],["use_cscore","int"],["terminate_on_midi","int"],["heartbeat","int"],["defer_gen01_load","int"],["midi_key","int"],["midi_key_cps","int"],["midi_key_oct","int"],["midi_key_pch","int"],["midi_velocity","int"],["midi_velocity_amp","int"],["no_default_paths",\n"int"],["number_of_threads","int"],["syntax_check_only","int"],["csd_line_counts","int"],["compute_weights","int"],["realtime_mode","int"],["sample_accurate","int"],["sample_rate_override","MYFLT"],["control_rate_override","MYFLT"],["nchnls_override","int"],["nchnls_i_override","int"],["e0dbfs_override","MYFLT"],["daemon","int"],["ksmps_override","int"],["FFT_library","int"]],CS_MIDIDEVICE$$module$src$structures=[["device_name","char",64],["interface_name","char",64],["device_id","char",64],["midi_module",\n"char",64],["isOutput","int"]];var module$src$structures={};const csoundGetSr$$module$src$modules$attributes=a=>b=>a.exports.csoundGetSr(b);csoundGetSr$$module$src$modules$attributes.toString=()=>"getSr = async () => Number;";const csoundGetKr$$module$src$modules$attributes=a=>b=>a.exports.csoundGetKr(b);csoundGetKr$$module$src$modules$attributes.toString=()=>"getKr = async () => Number;";const csoundGetKsmps$$module$src$modules$attributes=a=>b=>a.exports.csoundGetKsmps(b);csoundGetKsmps$$module$src$modules$attributes.toString=()=>"getKsmps = async () => Number;";\nconst csoundGetNchnls$$module$src$modules$attributes=a=>b=>a.exports.csoundGetNchnls(b);csoundGetNchnls$$module$src$modules$attributes.toString=()=>"getNchnls = async () => Number;";const csoundGetNchnlsInput$$module$src$modules$attributes=a=>b=>a.exports.csoundGetNchnlsInput(b);csoundGetNchnlsInput$$module$src$modules$attributes.toString=()=>"getNchnlsInput = async () => Number;";const csoundGet0dBFS$$module$src$modules$attributes=a=>b=>a.exports.csoundGet0dBFS(b);\ncsoundGet0dBFS$$module$src$modules$attributes.toString=()=>"get0dBFS = async () => Number;";const csoundGetA4$$module$src$modules$attributes=a=>b=>a.exports.csoundGetA4(b);csoundGetA4$$module$src$modules$attributes.toString=()=>"getA4 = async () => Number;";const csoundGetCurrentTimeSamples$$module$src$modules$attributes=a=>b=>a.exports.csoundGetCurrentTimeSamples(b);csoundGetCurrentTimeSamples$$module$src$modules$attributes.toString=()=>"getCurrentTimeSamples = async () => Number;";\nconst csoundGetSizeOfMYFLT$$module$src$modules$attributes=a=>b=>a.exports.csoundGetSizeOfMYFLT(b);csoundGetSizeOfMYFLT$$module$src$modules$attributes.toString=()=>"getSizeOfMYFLT = async () => Number;";const csoundSetOption$$module$src$modules$attributes=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundSetOption(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundSetOption$$module$src$modules$attributes.toString=()=>"setOption = async (option) => Number;";\nconst csoundSetParams$$module$src$modules$attributes=a=>(b,c)=>{a.exports.csoundSetParams(b,c)};csoundSetParams$$module$src$modules$attributes.toString=()=>"setParams = async (csoundParams) => undefined;";\nconst csoundGetParams$$module$src$modules$attributes=a=>b=>{var {buffer:c}=a.wasi.memory;const d=sizeofStruct$$module$src$utils$native_sizes(CSOUND_PARAMS$$module$src$structures),e=a.exports.allocCsoundParamsStruct();c=new Uint8Array(c,e,d);a.exports.csoundGetParams(b,e);b=structBufferToObject$$module$src$utils$structure_buffer_to_object(CSOUND_PARAMS$$module$src$structures,c);a.exports.freeCsoundParams(e);return b};csoundGetParams$$module$src$modules$attributes.toString=()=>"getParams = async () => CSOUND_PARAMS;";\nconst csoundGetDebug$$module$src$modules$attributes=a=>b=>a.exports.csoundGetDebug(b);csoundGetDebug$$module$src$modules$attributes.toString=()=>"getDebug = async () => Number;";const csoundSetDebug$$module$src$modules$attributes=a=>(b,c)=>{a.exports.csoundSetDebug(b,c)};csoundSetDebug$$module$src$modules$attributes.toString=()=>"setDebug = async (number) => undefined;";var module$src$modules$attributes={};module$src$modules$attributes.csoundGet0dBFS=csoundGet0dBFS$$module$src$modules$attributes;\nmodule$src$modules$attributes.csoundGetA4=csoundGetA4$$module$src$modules$attributes;module$src$modules$attributes.csoundGetCurrentTimeSamples=csoundGetCurrentTimeSamples$$module$src$modules$attributes;module$src$modules$attributes.csoundGetDebug=csoundGetDebug$$module$src$modules$attributes;module$src$modules$attributes.csoundGetKr=csoundGetKr$$module$src$modules$attributes;module$src$modules$attributes.csoundGetKsmps=csoundGetKsmps$$module$src$modules$attributes;\nmodule$src$modules$attributes.csoundGetNchnls=csoundGetNchnls$$module$src$modules$attributes;module$src$modules$attributes.csoundGetNchnlsInput=csoundGetNchnlsInput$$module$src$modules$attributes;module$src$modules$attributes.csoundGetParams=csoundGetParams$$module$src$modules$attributes;module$src$modules$attributes.csoundGetSizeOfMYFLT=csoundGetSizeOfMYFLT$$module$src$modules$attributes;module$src$modules$attributes.csoundGetSr=csoundGetSr$$module$src$modules$attributes;\nmodule$src$modules$attributes.csoundSetDebug=csoundSetDebug$$module$src$modules$attributes;module$src$modules$attributes.csoundSetOption=csoundSetOption$$module$src$modules$attributes;module$src$modules$attributes.csoundSetParams=csoundSetParams$$module$src$modules$attributes;const csoundGetInputBufferSize$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetInputBufferSize(b);csoundGetInputBufferSize$$module$src$modules$rtaudio.toString=()=>"getInputBufferSize = async () => Number;";const csoundGetOutputBufferSize$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetOutputBufferSize(b);csoundGetOutputBufferSize$$module$src$modules$rtaudio.toString=()=>"getOutputBufferSize = async () => Number;";const csoundGetInputBuffer$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetInputBuffer(b);\ncsoundGetInputBuffer$$module$src$modules$rtaudio.toString=()=>"getInputBuffer = async () => Number;";const csoundGetOutputBuffer$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetOutputBuffer(b);csoundGetOutputBuffer$$module$src$modules$rtaudio.toString=()=>"getOutputBuffer = async () => Number;";const csoundGetSpin$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetSpin(b);csoundGetSpin$$module$src$modules$rtaudio.toString=()=>"getSpin = async (csound) => Number;";\nconst csoundGetSpout$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetSpout(b);csoundGetSpout$$module$src$modules$rtaudio.toString=()=>"getSpout = async () => Number;";var module$src$modules$rtaudio={};module$src$modules$rtaudio.csoundGetInputBuffer=csoundGetInputBuffer$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetInputBufferSize=csoundGetInputBufferSize$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetOutputBuffer=csoundGetOutputBuffer$$module$src$modules$rtaudio;\nmodule$src$modules$rtaudio.csoundGetOutputBufferSize=csoundGetOutputBufferSize$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetSpin=csoundGetSpin$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetSpout=csoundGetSpout$$module$src$modules$rtaudio;function add$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>add$$module$node_modules$rambda$dist$rambda_mjs(a,c):Number(a)+Number(b)}const cloneList$$module$node_modules$rambda$dist$rambda_mjs=a=>Array.prototype.slice.call(a);function curry$$module$node_modules$rambda$dist$rambda_mjs(a,b=[]){return(...c)=>{c=[...b,...c];return c.length>=a.length?a(...c):curry$$module$node_modules$rambda$dist$rambda_mjs(a,c)}}\nfunction adjustFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d=0>a?c.length+a:a;if(a>=c.length||0>d)return c;a=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);a[d]=b(a[d]);return a}const adjust$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(adjustFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction all$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>all$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(let c=0;c<b.length;c++)if(!a(b[c]))return!1;return!0}function allPass$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{let c=0;for(;c<a.length;){if(!a[c](...b))return!1;c++}return!0}}function always$$module$node_modules$rambda$dist$rambda_mjs(a){return b=>a}\nfunction and$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>and$$module$node_modules$rambda$dist$rambda_mjs(a,c):a&&b}function any$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>any$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=0;for(;c<b.length;){if(a(b[c],c))return!0;c++}return!1}\nfunction anyPass$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{let c=0;for(;c<a.length;){if(a[c](...b))return!0;c++}return!1}}function append$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>append$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof b)return b.split("").concat(a);const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(b);c.push(a);return c}\nfunction apply$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>apply$$module$node_modules$rambda$dist$rambda_mjs(a,c):a.apply(this,b)}const {isArray:isArray$$module$node_modules$rambda$dist$rambda_mjs}=Array;\nfunction __findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a,b=0){for(const c in a)!1!==a.hasOwnProperty(c)&&"constructor"!==c&&("object"===typeof a[c]&&(b=Math.max(b,__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a[c]))),"function"===typeof a[c]&&(b=Math.max(b,a[c].length)));return b}\nfunction __filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(){const a=[];let b=0;const c=arguments.length;for(;b<c&&"undefined"!==typeof arguments[b];)a[b]=arguments[b],b++;return a}\nfunction __applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){var d=b-c.length;if(1===d)return f=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f));if(2===d)return(f,g)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g));if(3===d)return(f,g,h)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,\nb,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g,h));if(4===d)return(f,g,h,k)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g,h,k));if(4<d)return(...f)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,...f));if(isArray$$module$node_modules$rambda$dist$rambda_mjs(a)){var e=[];d=0;const f=a.length;\nfor(;d<f;d++){if("object"===typeof a[d]||isArray$$module$node_modules$rambda$dist$rambda_mjs(a[d]))e[d]=__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a[d],b,c);"function"===typeof a[d]&&(e[d]=a[d](...c))}return e}d={};for(e in a)!1!==a.hasOwnProperty(e)&&"constructor"!==e&&("object"===typeof a[e]?d[e]=__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a[e],b,c):"function"===typeof a[e]&&(d[e]=a[e](...c)));return d}\nfunction applySpec$$module$node_modules$rambda$dist$rambda_mjs(a,...b){const c=__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a);return 0===c?()=>({}):__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,c,b)}function assocFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return Object.assign({},c,{[a]:b})}const assoc$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(assocFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction _isInteger$$module$node_modules$rambda$dist$rambda_mjs(a){return a<<0===a}const isInteger$$module$node_modules$rambda$dist$rambda_mjs=Number.isInteger||_isInteger$$module$node_modules$rambda$dist$rambda_mjs;\nfunction assocPathFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d="string"===typeof a?a.split(".").map(e=>isInteger$$module$node_modules$rambda$dist$rambda_mjs(Number(e))?Number(e):e):a;if(0===d.length)return b;a=d[0];if(1<d.length){const e="object"===typeof c&&null!==c&&c.hasOwnProperty(a)?c[a]:isInteger$$module$node_modules$rambda$dist$rambda_mjs(d[1])?[]:{};b=assocPathFn$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(d,1),b,e)}return isInteger$$module$node_modules$rambda$dist$rambda_mjs(a)&&\nisArray$$module$node_modules$rambda$dist$rambda_mjs(c)?(c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c),c[a]=b,c):assoc$$module$node_modules$rambda$dist$rambda_mjs(a,b,c)}const assocPath$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(assocPathFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction _curryN$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return function(){var d=0;let e=0;const f=b.length,g=arguments.length,h=Array(f+g);for(;d<f;)h[d]=b[d],d++;for(;e<g;)h[f+e]=arguments[e],e++;d=a-h.length;return h.length>=a?c.apply(this,h):_arity$1$$module$node_modules$rambda$dist$rambda_mjs(d,_curryN$$module$node_modules$rambda$dist$rambda_mjs(a,h,c))}}\nfunction _arity$1$$module$node_modules$rambda$dist$rambda_mjs(a,b){switch(a){case 0:return function(){return b.apply(this,arguments)};case 1:return function(c){return b.apply(this,arguments)};case 2:return function(c,d){return b.apply(this,arguments)};case 3:return function(c,d,e){return b.apply(this,arguments)};case 4:return function(c,d,e,f){return b.apply(this,arguments)};case 5:return function(c,d,e,f,g){return b.apply(this,arguments)};case 6:return function(c,d,e,f,g,h){return b.apply(this,arguments)};\ncase 7:return function(c,d,e,f,g,h,k){return b.apply(this,arguments)};case 8:return function(c,d,e,f,g,h,k,l){return b.apply(this,arguments)};case 9:return function(c,d,e,f,g,h,k,l,m){return b.apply(this,arguments)};default:return function(c,d,e,f,g,h,k,l,m,n){return b.apply(this,arguments)}}}\nfunction curryN$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>curryN$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(10<a)throw Error("First argument to _arity must be a non-negative integer no greater than ten");return _arity$1$$module$node_modules$rambda$dist$rambda_mjs(a,_curryN$$module$node_modules$rambda$dist$rambda_mjs(a,[],b))}\nfunction bind$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>bind$$module$node_modules$rambda$dist$rambda_mjs(a,c):curryN$$module$node_modules$rambda$dist$rambda_mjs(a.length,(...c)=>a.apply(b,c))}function both$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>both$$module$node_modules$rambda$dist$rambda_mjs(a,c):(...c)=>a(...c)&&b(...c)}\nfunction chain$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>chain$$module$node_modules$rambda$dist$rambda_mjs(a,c):[].concat(...b.map(a))}function clampFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(a>b)throw Error("min must not be greater than max in clamp(min, max, value)");if(c>=a&&c<=b)return c;if(c>b)return b;if(c<a)return a}const clamp$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(clampFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction clone$$module$node_modules$rambda$dist$rambda_mjs(a){const b=isArray$$module$node_modules$rambda$dist$rambda_mjs(a)?Array(a.length):{};if(a&&a.getTime)return new Date(a.getTime());for(const c in a){const d=a[c];b[c]="object"===typeof d&&null!==d?d.getTime?new Date(d.getTime()):clone$$module$node_modules$rambda$dist$rambda_mjs(d):d}return b}function complement$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>!a(...b)}\nclass ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs{constructor(a){this.value=a}}function reduceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(c))throw new TypeError("reduce: list must be array or iterable");let d=0;const e=c.length;for(;d<e;){b=a(b,c[d],d,c);if(b instanceof ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs)return b.value;d++}return b}\nconst reduce$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(reduceFn$$module$node_modules$rambda$dist$rambda_mjs),reduceStopper$$module$node_modules$rambda$dist$rambda_mjs=a=>new ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs(a);\nfunction _arity$$module$node_modules$rambda$dist$rambda_mjs(a,b){switch(a){case 0:return function(){return b.apply(this,arguments)};case 1:return function(c){return b.apply(this,arguments)};case 2:return function(c,d){return b.apply(this,arguments)};case 3:return function(c,d,e){return b.apply(this,arguments)};case 4:return function(c,d,e,f){return b.apply(this,arguments)};case 5:return function(c,d,e,f,g){return b.apply(this,arguments)};case 6:return function(c,d,e,f,g,h){return b.apply(this,arguments)};\ncase 7:return function(c,d,e,f,g,h,k){return b.apply(this,arguments)};case 8:return function(c,d,e,f,g,h,k,l){return b.apply(this,arguments)};case 9:return function(c,d,e,f,g,h,k,l,m){return b.apply(this,arguments)};case 10:return function(c,d,e,f,g,h,k,l,m,n){return b.apply(this,arguments)};default:throw Error("First argument to _arity must be a non-negative integer no greater than ten");}}\nfunction _pipe$$module$node_modules$rambda$dist$rambda_mjs(a,b){return function(){return b.call(this,a.apply(this,arguments))}}\nfunction pipe$$module$node_modules$rambda$dist$rambda_mjs(){if(0===arguments.length)throw Error("pipe requires at least one argument");return _arity$$module$node_modules$rambda$dist$rambda_mjs(arguments[0].length,reduceFn$$module$node_modules$rambda$dist$rambda_mjs(_pipe$$module$node_modules$rambda$dist$rambda_mjs,arguments[0],Array.prototype.slice.call(arguments,1,Infinity)))}\nfunction compose$$module$node_modules$rambda$dist$rambda_mjs(){if(0===arguments.length)throw Error("compose requires at least one argument");return pipe$$module$node_modules$rambda$dist$rambda_mjs.apply(this,Array.prototype.slice.call(arguments,0).reverse())}function concat$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>concat$$module$node_modules$rambda$dist$rambda_mjs(a,c):"string"===typeof a?`${a}${b}`:[...a,...b]}\nfunction cond$$module$node_modules$rambda$dist$rambda_mjs(a){return b=>{let c=!1,d;a.forEach(([e,f])=>{!c&&e(b)&&(c=!0,d=f(b))});return d}}const {keys:keys$1$$module$node_modules$rambda$dist$rambda_mjs}=Object;function mapArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){let d=0;const e=Array(b.length);for(;d<b.length;)e[d]=c?a(b[d],d):a(b[d]),d++;return e}\nfunction mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,g);let c=0;const d=keys$1$$module$node_modules$rambda$dist$rambda_mjs(b),e=d.length,f={};for(;c<e;){const g=d[c];f[g]=a(b[g],g,b);c++}return f}const mapObjIndexed$$module$node_modules$rambda$dist$rambda_mjs=mapObject$$module$node_modules$rambda$dist$rambda_mjs;\nfunction map$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>map$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!b)throw Error(INCORRECT_ITERABLE_INPUT);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?mapArray$$module$node_modules$rambda$dist$rambda_mjs(a,b):mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}\nfunction max$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>max$$module$node_modules$rambda$dist$rambda_mjs(a,c):b>a?b:a}\nfunction converge$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>converge$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=reduce$$module$node_modules$rambda$dist$rambda_mjs((d,e)=>max$$module$node_modules$rambda$dist$rambda_mjs(d,e.length),0,b);return curryN$$module$node_modules$rambda$dist$rambda_mjs(c,function(){return a.apply(this,map$$module$node_modules$rambda$dist$rambda_mjs(d=>d.apply(this,arguments),b))})}\nfunction count$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>count$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?b.filter(c=>a(c)).length:0}function countBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>countBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c={};b.forEach(d=>{d=a(d);c[d]?c[d]++:c[d]=1});return c}\nconst dec$$module$node_modules$rambda$dist$rambda_mjs=a=>a-1;function isFalsy$$module$node_modules$rambda$dist$rambda_mjs(a){return void 0===a||null===a||!0===Number.isNaN(a)}function defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,c):isFalsy$$module$node_modules$rambda$dist$rambda_mjs(b)?a:b}\nfunction type$$module$node_modules$rambda$dist$rambda_mjs(a){if(null===a)return"Null";if(void 0===a)return"Undefined";if(Number.isNaN(a))return"NaN";a=Object.prototype.toString.call(a).slice(8,-1);return"AsyncFunction"===a?"Promise":a}\nfunction _lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`Cannot read property \'indexOf\' of ${b}`);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(!["Object","Array","NaN","RegExp"].includes(c))return b.lastIndexOf(a);({length:c}=b);let d=-1;for(;-1<--c&&-1===d;)equals$$module$node_modules$rambda$dist$rambda_mjs(b[c],a)&&(d=c);return d}\nfunction _indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`Cannot read property \'indexOf\' of ${b}`);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(!["Object","Array","NaN","RegExp"].includes(c))return b.indexOf(a);let d=c=-1;const {length:e}=b;for(;++c<e&&-1===d;)equals$$module$node_modules$rambda$dist$rambda_mjs(b[c],a)&&(d=c);return d}\nfunction _arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(a){const b=[];let c;for(;!(c=a.next()).done;)b.push(c.value);return b}function _equalsSets$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(a.size!==b.size)return!1;a=_arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(a.values());const c=_arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(b.values());return 0===a.filter(d=>-1===_indexOf$$module$node_modules$rambda$dist$rambda_mjs(d,c)).length}\nfunction parseError$$module$node_modules$rambda$dist$rambda_mjs(a){const b=a.__proto__.toString();return["Error","TypeError"].includes(b)?[b,a.message]:[]}function parseDate$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toDateString?[!0,a.getTime()]:[!1]}function parseRegex$$module$node_modules$rambda$dist$rambda_mjs(a){return a.constructor!==RegExp?[!1]:[!0,a.toString()]}\nfunction equals$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>equals$$module$node_modules$rambda$dist$rambda_mjs(a,f);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(c!==type$$module$node_modules$rambda$dist$rambda_mjs(b))return!1;if("Function"===c)return void 0===a.name?!1:a.name===b.name;if(["NaN","Undefined","Null"].includes(c))return!0;if("Number"===c)return Object.is(-0,a)!==Object.is(-0,b)?!1:a.toString()===b.toString();if(["String","Boolean"].includes(c))return a.toString()===\nb.toString();if("Array"===c){c=Array.from(a);const f=Array.from(b);if(c.toString()!==f.toString())return!1;let g=!0;c.forEach((h,k)=>{g&&(h===f[k]||equals$$module$node_modules$rambda$dist$rambda_mjs(h,f[k])||(g=!1))});return g}var d=parseRegex$$module$node_modules$rambda$dist$rambda_mjs(a),e=parseRegex$$module$node_modules$rambda$dist$rambda_mjs(b);if(d[0])return e[0]?d[1]===e[1]:!1;if(e[0])return!1;d=parseDate$$module$node_modules$rambda$dist$rambda_mjs(a);e=parseDate$$module$node_modules$rambda$dist$rambda_mjs(b);\nif(d[0])return e[0]?d[1]===e[1]:!1;if(e[0])return!1;d=parseError$$module$node_modules$rambda$dist$rambda_mjs(a);e=parseError$$module$node_modules$rambda$dist$rambda_mjs(b);if(d[0])return e[0]?d[0]===e[0]&&d[1]===e[1]:!1;if("Set"===c)return _equalsSets$$module$node_modules$rambda$dist$rambda_mjs(a,b);if("Object"===c){c=Object.keys(a);if(c.length!==Object.keys(b).length)return!1;let f=!0;c.forEach(g=>{if(f){const h=a[g];g=b[g];h===g||equals$$module$node_modules$rambda$dist$rambda_mjs(h,g)||(f=!1)}});\nreturn f}return!1}function includes$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>includes$$module$node_modules$rambda$dist$rambda_mjs(a,c);if("string"===typeof b)return b.includes(a);if(!b)throw new TypeError(`Cannot read property \\\'indexOf\\\' of ${b}`);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?-1<_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b):!1}\nclass _Set$$module$node_modules$rambda$dist$rambda_mjs{constructor(){this.set=new Set;this.items={}}checkUniqueness(a){var b=type$$module$node_modules$rambda$dist$rambda_mjs(a);return["Null","Undefined","NaN"].includes(b)?b in this.items?!1:this.items[b]=!0:["Object","Array"].includes(b)?b in this.items?-1===_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,this.items[b])?(this.items[b].push(a),!0):!1:(this.items[b]=[a],!0):(b=this.set.size,this.set.add(a),this.set.size!==b)}}\nfunction uniq$$module$node_modules$rambda$dist$rambda_mjs(a){const b=new _Set$$module$node_modules$rambda$dist$rambda_mjs,c=[];a.forEach(d=>{b.checkUniqueness(d)&&c.push(d)});return c}function difference$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>difference$$module$node_modules$rambda$dist$rambda_mjs(a,c):uniq$$module$node_modules$rambda$dist$rambda_mjs(a).filter(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,b))}\nfunction dissoc$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>dissoc$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(null===b||void 0===b)return{};const c={};for(const d in b)c[d]=b[d];delete c[a];return c}function divide$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>divide$$module$node_modules$rambda$dist$rambda_mjs(a,c):a/b}\nfunction drop$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>drop$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.slice(0<a?a:0)}function dropLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>dropLast$$module$node_modules$rambda$dist$rambda_mjs(a,c):0<a?b.slice(0,-a):b.slice()}\nfunction dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);if(0===b.length)return b;const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if("function"!==typeof a)throw Error(`\'predicate\' is from wrong type ${typeof a}`);if(!c&&"string"!==typeof b)throw Error(`\'iterable\' is from wrong type ${typeof b}`);let d=!1;const e=[];let f=b.length;for(;0<f;)f--,d||!1!==a(b[f])?d&&e.push(b[f]):\n(d=!0,e.push(b[f]));return c?e.reverse():e.reverse().join("")}function dropRepeats$$module$node_modules$rambda$dist$rambda_mjs(a){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error(`${a} is not a list`);const b=[];a.reduce((c,d)=>{equals$$module$node_modules$rambda$dist$rambda_mjs(c,d)||b.push(d);return d},void 0);return b}\nfunction dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`${b} is not a list`);const c=[];b.reduce((d,e)=>{if(void 0===d)return c.push(e),e;a(d,e)||c.push(e);return e},void 0);return c}\nfunction dropWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>dropWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if(!c&&"string"!==typeof b)throw Error("`iterable` is neither list nor a string");let d=!1;const e=[];let f=-1;for(;f++<b.length-1;)d?e.push(b[f]):a(b[f])||(d||(d=!0),e.push(b[f]));return c?e:e.join("")}\nfunction either$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>either$$module$node_modules$rambda$dist$rambda_mjs(a,c):(...c)=>!(!a(...c)&&!b(...c))}\nfunction endsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>endsWith$$module$node_modules$rambda$dist$rambda_mjs(a,e);if("string"===typeof b)return b.endsWith(a);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))return!1;const c=b.length-a.length;let d=!0;return a.filter((e,f)=>{if(!d)return!1;(e=equals$$module$node_modules$rambda$dist$rambda_mjs(e,b[f+c]))||(d=!1);return e}).length===a.length}\nfunction prop$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>prop$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(b)return b[a]}function eqPropsFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return equals$$module$node_modules$rambda$dist$rambda_mjs(prop$$module$node_modules$rambda$dist$rambda_mjs(a,b),prop$$module$node_modules$rambda$dist$rambda_mjs(a,c))}const eqProps$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(eqPropsFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction evolveArray$$module$node_modules$rambda$dist$rambda_mjs(a,b){return mapArray$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?a[d](c):c,b,!0)}\nfunction evolveObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return mapObject$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>{if("Object"===type$$module$node_modules$rambda$dist$rambda_mjs(c)){const e=type$$module$node_modules$rambda$dist$rambda_mjs(a[d]);return"Function"===e?a[d](c):"Object"===e?evolve$$module$node_modules$rambda$dist$rambda_mjs(a[d],c):c}return"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?a[d](c):c},b)}\nfunction evolve$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>evolve$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=type$$module$node_modules$rambda$dist$rambda_mjs(a),d=type$$module$node_modules$rambda$dist$rambda_mjs(b);if(d!==c)throw Error("iterableType !== rulesType");if(!["Object","Array"].includes(c))throw Error(`\'iterable\' and \'rules\' are from wrong type ${c}`);return"Object"===d?evolveObject$$module$node_modules$rambda$dist$rambda_mjs(a,b):evolveArray$$module$node_modules$rambda$dist$rambda_mjs(a,\nb)}function F$$module$node_modules$rambda$dist$rambda_mjs(){return!1}function filterObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={};for(const d in b)a(b[d],d,b)&&(c[d]=b[d]);return c}function filterArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){let d=0;const e=b.length,f=[];for(;d<e;)(c?a(b[d],d):a(b[d]))&&f.push(b[d]),d++;return f}\nfunction filter$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>filter$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!b)throw Error("Incorrect iterable input");return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?filterArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,!1):filterObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}\nfunction find$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>find$$module$node_modules$rambda$dist$rambda_mjs(a,e);let c=0;const d=b.length;for(;c<d;){const e=b[c];if(a(e))return e;c++}}function findIndex$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>findIndex$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=b.length;let d=-1;for(;++d<c;)if(a(b[d]))return d;return-1}\nfunction findLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>findLast$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=b.length;for(;0<=--c;)if(a(b[c]))return b[c]}function findLastIndex$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>findLastIndex$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=b.length;for(;0<=--c;)if(a(b[c]))return c;return-1}\nfunction flatten$$module$node_modules$rambda$dist$rambda_mjs(a,b){b=void 0===b?[]:b;for(let c=0;c<a.length;c++)isArray$$module$node_modules$rambda$dist$rambda_mjs(a[c])?flatten$$module$node_modules$rambda$dist$rambda_mjs(a[c],b):b.push(a[c]);return b}\nfunction flipFn$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{if(1===b.length)return c=>a(c,b[0]);if(2===b.length)return a(b[1],b[0]);if(3===b.length)return a(b[1],b[0],b[2]);if(4===b.length)return a(b[1],b[0],b[2],b[3]);throw Error("R.flip doesn\'t work with arity > 4");}}function flip$$module$node_modules$rambda$dist$rambda_mjs(a){return flipFn$$module$node_modules$rambda$dist$rambda_mjs(a)}\nfunction forEach$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>forEach$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(void 0!==b){if(isArray$$module$node_modules$rambda$dist$rambda_mjs(b))for(var c=0,d=b.length;c<d;)a(b[c]),c++;else{c=0;d=keys$1$$module$node_modules$rambda$dist$rambda_mjs(b);const e=d.length;for(;c<e;){const f=d[c];a(b[f],f,b);c++}}return b}}\nfunction fromPairs$$module$node_modules$rambda$dist$rambda_mjs(a){const b={};a.forEach(([c,d])=>b[c]=d);return b}function groupBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>groupBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c={};for(let d=0;d<b.length;d++){const e=b[d],f=a(e);c[f]||(c[f]=[]);c[f].push(e)}return c}\nfunction groupWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw new TypeError("list.reduce is not a function");const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(b);if(1===b.length)return[c];const d=[];let e=[];c.reduce((f,g,h)=>{if(0===h)return g;const k=a(f,g),l=0===e.length;h=h===b.length-1;if(k)return l&&e.push(f),e.push(g),h&&d.push(e),g;if(l)return d.push([f]),h&&d.push([g]),g;d.push(e);h&&d.push([g]);e=[];return g},\nvoid 0);return d}function has$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>has$$module$node_modules$rambda$dist$rambda_mjs(a,c):b?b.hasOwnProperty(a):!1}function createPath$$module$node_modules$rambda$dist$rambda_mjs(a,b="."){return"string"===typeof a?a.split(b):a}\nfunction path$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>path$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=b,d=0,e=createPath$$module$node_modules$rambda$dist$rambda_mjs(a);d<e.length;){if(null===c||void 0===c||null===c[e[d]])return;c=c[e[d]];d++}return c}}\nfunction hasPath$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>hasPath$$module$node_modules$rambda$dist$rambda_mjs(a,c):void 0!==path$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function head$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a[0]||"":a[0]}function _objectIs$$module$node_modules$rambda$dist$rambda_mjs(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b}const objectIs$$module$node_modules$rambda$dist$rambda_mjs=Object.is||_objectIs$$module$node_modules$rambda$dist$rambda_mjs;\nfunction identical$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>identical$$module$node_modules$rambda$dist$rambda_mjs(a,c):objectIs$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function identity$$module$node_modules$rambda$dist$rambda_mjs(a){return a}function ifElseFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return(...d)=>!0===("boolean"===typeof a?a:a(...d))?b(...d):c(...d)}\nconst ifElse$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(ifElseFn$$module$node_modules$rambda$dist$rambda_mjs),inc$$module$node_modules$rambda$dist$rambda_mjs=a=>a+1;function indexByPath$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={};for(let d=0;d<b.length;d++){const e=b[d];c[path$$module$node_modules$rambda$dist$rambda_mjs(a,e)]=e}return c}\nfunction indexBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>indexBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof a)return indexByPath$$module$node_modules$rambda$dist$rambda_mjs(a,b);const c={};for(let d=0;d<b.length;d++){const e=b[d];c[a(e)]=e}return c}\nfunction indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function baseSlice$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){let d=-1,{length:e}=a;c=c>e?e:c;0>c&&(c+=e);e=b>c?0:c-b>>>0;b>>>=0;for(c=Array(e);++d<e;)c[d]=a[d+b];return c}\nfunction init$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a.slice(0,-1):a.length?baseSlice$$module$node_modules$rambda$dist$rambda_mjs(a,0,-1):[]}function intersection$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>intersection$$module$node_modules$rambda$dist$rambda_mjs(a,c):filter$$module$node_modules$rambda$dist$rambda_mjs(c=>includes$$module$node_modules$rambda$dist$rambda_mjs(c,a),b)}\nfunction intersperse$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>intersperse$$module$node_modules$rambda$dist$rambda_mjs(a,f);let c=-1;const d=b.length,e=[];for(;++c<d;)c===d-1?e.push(b[c]):e.push(b[c],a);return e}function is$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>is$$module$node_modules$rambda$dist$rambda_mjs(a,c):null!=b&&b.constructor===a||b instanceof a}\nfunction isEmpty$$module$node_modules$rambda$dist$rambda_mjs(a){const b=type$$module$node_modules$rambda$dist$rambda_mjs(a);return["Undefined","NaN","Number","Null"].includes(b)?!1:a?"Object"===b?0===Object.keys(a).length:"Array"===b?0===a.length:!1:!0}function isNil$$module$node_modules$rambda$dist$rambda_mjs(a){return void 0===a||null===a}\nfunction join$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>join$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.join(a)}function juxt$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>a.map(c=>c(...b))}function keys$$module$node_modules$rambda$dist$rambda_mjs(a){return Object.keys(a)}function last$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a[a.length-1]||"":a[a.length-1]}\nfunction lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function length$$module$node_modules$rambda$dist$rambda_mjs(a){return isArray$$module$node_modules$rambda$dist$rambda_mjs(a)||"string"===typeof a?a.length:NaN}\nfunction lens$$module$node_modules$rambda$dist$rambda_mjs(a,b){return function(c){return function(d){return c(a(d)).map(e=>b(e,d))}}}function nth$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>nth$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=0>a?b.length+a:a;return"[object String]"===Object.prototype.toString.call(b)?b.charAt(c):b[c]}\nfunction updateFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);return-1===a?c.fill(b,a):c.fill(b,a,a+1)}const update$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(updateFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction lensIndex$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(nth$$module$node_modules$rambda$dist$rambda_mjs(a),update$$module$node_modules$rambda$dist$rambda_mjs(a))}function lensPath$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(path$$module$node_modules$rambda$dist$rambda_mjs(a),assocPath$$module$node_modules$rambda$dist$rambda_mjs(a))}\nfunction lensProp$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(prop$$module$node_modules$rambda$dist$rambda_mjs(a),assoc$$module$node_modules$rambda$dist$rambda_mjs(a))}function match$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>match$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=b.match(a);return null===c?[]:c}\nfunction mathMod$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mathMod$$module$node_modules$rambda$dist$rambda_mjs(a,c):!isInteger$$module$node_modules$rambda$dist$rambda_mjs(a)||!isInteger$$module$node_modules$rambda$dist$rambda_mjs(b)||1>b?NaN:(a%b+b)%b}function maxByFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)>a(b)?c:b}const maxBy$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(maxByFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction sum$$module$node_modules$rambda$dist$rambda_mjs(a){return a.reduce((b,c)=>b+c,0)}function mean$$module$node_modules$rambda$dist$rambda_mjs(a){return sum$$module$node_modules$rambda$dist$rambda_mjs(a)/a.length}function median$$module$node_modules$rambda$dist$rambda_mjs(a){var b=a.length;if(0===b)return NaN;const c=2-b%2;b=(b-c)/2;return mean$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(a,0).sort((d,e)=>d===e?0:d<e?-1:1).slice(b,b+c))}\nfunction mergeRight$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mergeRight$$module$node_modules$rambda$dist$rambda_mjs(a,c):Object.assign({},a||{},b||{})}function mergeAll$$module$node_modules$rambda$dist$rambda_mjs(a){let b={};map$$module$node_modules$rambda$dist$rambda_mjs(c=>{b=mergeRight$$module$node_modules$rambda$dist$rambda_mjs(b,c)},a);return b}\nfunction mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=clone$$module$node_modules$rambda$dist$rambda_mjs(a);Object.keys(b).forEach(d=>{"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(b[d])?"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?c[d]=mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a[d],b[d]):c[d]=b[d]:c[d]=b[d]});return c}\nfunction mergeLeft$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mergeLeft$$module$node_modules$rambda$dist$rambda_mjs(a,c):mergeRight$$module$node_modules$rambda$dist$rambda_mjs(b,a)}function mergeWithFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d={};Object.keys(b).forEach(e=>{d[e]=void 0===c[e]?b[e]:a(b[e],c[e])});Object.keys(c).forEach(e=>{void 0===d[e]&&(d[e]=void 0===b[e]?c[e]:a(b[e],c[e]))});return d}\nconst mergeWith$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(mergeWithFn$$module$node_modules$rambda$dist$rambda_mjs);function min$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>min$$module$node_modules$rambda$dist$rambda_mjs(a,c):b<a?b:a}function minByFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)<a(b)?c:b}const minBy$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(minByFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction ownKeys$$module$node_modules$rambda$dist$rambda_mjs(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}));c.push.apply(c,d)}return c}\nfunction _objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{};b%2?ownKeys$$module$node_modules$rambda$dist$rambda_mjs(Object(c),!0).forEach(function(d){_defineProperty$$module$node_modules$rambda$dist$rambda_mjs(a,d,c[d])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(c)):ownKeys$$module$node_modules$rambda$dist$rambda_mjs(Object(c)).forEach(function(d){Object.defineProperty(a,\nd,Object.getOwnPropertyDescriptor(c,d))})}return a}function _defineProperty$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c;return a}function isIterable$$module$node_modules$rambda$dist$rambda_mjs(a){return Array.isArray(a)||"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(a)}\nfunction modifyFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return isIterable$$module$node_modules$rambda$dist$rambda_mjs(c)&&void 0!==c[a]?isArray$$module$node_modules$rambda$dist$rambda_mjs(c)?updateFn$$module$node_modules$rambda$dist$rambda_mjs(a,b(c[a]),c):_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},c),{},{[a]:b(c[a])}):c}const modify$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(modifyFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){a=createPath$$module$node_modules$rambda$dist$rambda_mjs(a);if(1===a.length)return _objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},c),{},{[a[0]]:b(c[a[0]])});if(void 0===path$$module$node_modules$rambda$dist$rambda_mjs(a,c))return c;b=modifyPath$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(a,1),b,c[a[0]]);return b===c[a[0]]?c:assoc$$module$node_modules$rambda$dist$rambda_mjs(a[0],\nb,c)}const modifyPath$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs);function modulo$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>modulo$$module$node_modules$rambda$dist$rambda_mjs(a,c):a%b}\nfunction moveFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(0>a||0>b)throw Error("Rambda.move does not support negative indexes");if(a>c.length-1||b>c.length-1)return c;const d=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);d[a]=c[b];d[b]=c[a];return d}const move$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(moveFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction multiply$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>multiply$$module$node_modules$rambda$dist$rambda_mjs(a,c):a*b}function negate$$module$node_modules$rambda$dist$rambda_mjs(a){return-a}function none$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>none$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(let c=0;c<b.length;c++)if(a(b[c]))return!1;return!0}\nfunction not$$module$node_modules$rambda$dist$rambda_mjs(a){return!a}function objOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>objOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):{[a]:b}}function of$$module$node_modules$rambda$dist$rambda_mjs(a){return[a]}\nfunction omit$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>omit$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(null!==b&&void 0!==b){var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={};for(const e in b)c.includes(e)||(d[e]=b[e]);return d}}\nfunction on$$module$node_modules$rambda$dist$rambda_mjs(a,b,c,d){return 3===arguments.length?e=>on$$module$node_modules$rambda$dist$rambda_mjs(a,b,c,e):2===arguments.length?(e,f)=>on$$module$node_modules$rambda$dist$rambda_mjs(a,b,e,f):a(b(c),b(d))}function onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b){let c;return function(){a&&(c=a.apply(b||this,arguments),a=null);return c}}\nfunction once$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length){const c=onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b);return curry$$module$node_modules$rambda$dist$rambda_mjs(c)}return onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function or$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>or$$module$node_modules$rambda$dist$rambda_mjs(a,c):a||b}const Identity$$module$node_modules$rambda$dist$rambda_mjs=a=>({x:a,map:b=>Identity$$module$node_modules$rambda$dist$rambda_mjs(b(a))});\nfunction overFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(d=>Identity$$module$node_modules$rambda$dist$rambda_mjs(b(d)))(c).x}const over$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(overFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction partial$$module$node_modules$rambda$dist$rambda_mjs(a,...b){const c=a.length;return(...d)=>b.length+d.length>=c?a(...b,...d):partial$$module$node_modules$rambda$dist$rambda_mjs(a,...[...b,...d])}function partialObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return c=>a(mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(c,b))}\nfunction partitionObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={},d={};Object.entries(b).forEach(([e,f])=>{a(f,e)?c[e]=f:d[e]=f});return[c,d]}function partitionArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){const d=[],e=[];let f=-1;for(;f++<b.length-1;)(c?a(b[f],f):a(b[f]))?d.push(b[f]):e.push(b[f]);return[d,e]}\nfunction partition$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>partition$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?partitionArray$$module$node_modules$rambda$dist$rambda_mjs(a,b):partitionObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}\nfunction pathEqFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return equals$$module$node_modules$rambda$dist$rambda_mjs(path$$module$node_modules$rambda$dist$rambda_mjs(a,c),b)}const pathEq$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(pathEqFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction pathOrFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,path$$module$node_modules$rambda$dist$rambda_mjs(b,c))}const pathOr$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(pathOrFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction paths$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>paths$$module$node_modules$rambda$dist$rambda_mjs(a,c):a.map(c=>path$$module$node_modules$rambda$dist$rambda_mjs(c,b))}\nfunction pick$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>pick$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={},e=0;e<c.length;)c[e]in b&&(d[c[e]]=b[c[e]]),e++;return d}}\nfunction pickAll$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>pickAll$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={},e=0;e<c.length;)d[c[e]]=c[e]in b?b[c[e]]:void 0,e++;return d}}\nfunction pluck$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>pluck$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=[];map$$module$node_modules$rambda$dist$rambda_mjs(d=>{void 0!==d[a]&&c.push(d[a])},b);return c}function prepend$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>prepend$$module$node_modules$rambda$dist$rambda_mjs(a,c):"string"===typeof b?[a].concat(b.split("")):[a].concat(b)}\nconst product$$module$node_modules$rambda$dist$rambda_mjs=reduce$$module$node_modules$rambda$dist$rambda_mjs(multiply$$module$node_modules$rambda$dist$rambda_mjs,1);function propEqFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c?equals$$module$node_modules$rambda$dist$rambda_mjs(b,prop$$module$node_modules$rambda$dist$rambda_mjs(a,c)):!1}const propEq$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propEqFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction propIsFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return is$$module$node_modules$rambda$dist$rambda_mjs(a,c[b])}const propIs$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propIsFn$$module$node_modules$rambda$dist$rambda_mjs);function propOrFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c?defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,c[b]):a}const propOr$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propOrFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction props$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>props$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error("propsToPick is not a list");return mapArray$$module$node_modules$rambda$dist$rambda_mjs(c=>b[c],a)}function propSatisfiesFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(prop$$module$node_modules$rambda$dist$rambda_mjs(b,c))}\nconst propSatisfies$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propSatisfiesFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction range$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>range$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(Number.isNaN(Number(a))||Number.isNaN(Number(b)))throw new TypeError("Both arguments to range must be numbers");if(b<a)return[];const c=b-a,d=Array(c);for(let e=0;e<c;e++)d[e]=a+e;return d}\nfunction reject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>reject$$module$node_modules$rambda$dist$rambda_mjs(a,c):filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!a(c),b)}function repeat$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>repeat$$module$node_modules$rambda$dist$rambda_mjs(a,c):Array(b).fill(a)}function replaceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c.replace(a,b)}\nconst replace$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(replaceFn$$module$node_modules$rambda$dist$rambda_mjs);function reverse$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a.split("").reverse().join(""):a.slice().reverse()}function setFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return over$$module$node_modules$rambda$dist$rambda_mjs(a,always$$module$node_modules$rambda$dist$rambda_mjs(b),c)}\nconst set$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(setFn$$module$node_modules$rambda$dist$rambda_mjs);function sliceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c.slice(a,b)}const slice$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(sliceFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction sort$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>sort$$module$node_modules$rambda$dist$rambda_mjs(a,c):cloneList$$module$node_modules$rambda$dist$rambda_mjs(b).sort(a)}function sortBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>sortBy$$module$node_modules$rambda$dist$rambda_mjs(a,c):cloneList$$module$node_modules$rambda$dist$rambda_mjs(b).sort((c,d)=>{c=a(c);d=a(d);return c===d?0:c<d?-1:1})}\nfunction split$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>split$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.split(a)}function maybe$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){b=a&&"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(b)?b():b;c=a||"Function"!==type$$module$node_modules$rambda$dist$rambda_mjs(c)?c:c();return a?b:c}\nfunction take$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>take$$module$node_modules$rambda$dist$rambda_mjs(a,c):0>a?b.slice():"string"===typeof b?b.slice(0,a):baseSlice$$module$node_modules$rambda$dist$rambda_mjs(b,0,a)}\nfunction splitAt$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>splitAt$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(!b)throw new TypeError(`Cannot read property \'slice\' of ${b}`);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b)&&"string"!==typeof b)return[[],[]];const c=maybe$$module$node_modules$rambda$dist$rambda_mjs(0>a,0>b.length+a?0:b.length+a,a);return[take$$module$node_modules$rambda$dist$rambda_mjs(c,b),drop$$module$node_modules$rambda$dist$rambda_mjs(c,\nb)]}function splitEvery$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>splitEvery$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(1>a)throw Error("First argument to splitEvery must be a positive integer");const c=[];let d=0;for(;d<b.length;)c.push(b.slice(d,d+=a));return c}\nfunction splitWhen$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>splitWhen$$module$node_modules$rambda$dist$rambda_mjs(a,g);if(!b)throw new TypeError(`Cannot read property \'length\' of ${b}`);const c=[],d=[];let e=!1,f=-1;for(;f++<b.length-1;)e?d.push(b[f]):a(b[f])?(d.push(b[f]),e=!0):c.push(b[f]);return[c,d]}\nfunction startsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>startsWith$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof b)return b.startsWith(a);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))return!1;let c=!0;return a.filter((d,e)=>{if(!c)return!1;(d=equals$$module$node_modules$rambda$dist$rambda_mjs(d,b[e]))||(c=!1);return d}).length===a.length}\nfunction subtract$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>subtract$$module$node_modules$rambda$dist$rambda_mjs(a,c):a-b}\nfunction symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs(a,c):concat$$module$node_modules$rambda$dist$rambda_mjs(filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,b),a),filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,a),b))}\nfunction T$$module$node_modules$rambda$dist$rambda_mjs(){return!0}function tail$$module$node_modules$rambda$dist$rambda_mjs(a){return drop$$module$node_modules$rambda$dist$rambda_mjs(1,a)}\nfunction takeLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>takeLast$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=b.length;if(0>a)return b.slice();let d=a>c?c:a;return"string"===typeof b?b.slice(c-d):baseSlice$$module$node_modules$rambda$dist$rambda_mjs(b,c-d,c)}\nfunction takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(0===b.length)return b;let c=!1;const d=[];let e=b.length;for(;!c||0===e;)e--,!1===a(b[e])?c=!0:c||d.push(b[e]);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?d.reverse():d.reverse().join("")}\nfunction takeWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>takeWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if(!c&&"string"!==typeof b)throw Error("`iterable` is neither list nor a string");let d=!0;const e=[];let f=-1;for(;f++<b.length-1;)a(b[f])?d&&e.push(b[f]):d&&(d=!1);return c?e:e.join("")}\nfunction tap$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>tap$$module$node_modules$rambda$dist$rambda_mjs(a,c);a(b);return b}function test$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>test$$module$node_modules$rambda$dist$rambda_mjs(a,c);if("string"===typeof a)throw new TypeError(`\\u2018test\\u2019 requires a value of type RegExp as its first argument; received "${a}"`);return-1!==b.search(a)}\nfunction times$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>times$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!isInteger$$module$node_modules$rambda$dist$rambda_mjs(b)||0>b)throw new RangeError("n must be an integer");return map$$module$node_modules$rambda$dist$rambda_mjs(a,range$$module$node_modules$rambda$dist$rambda_mjs(0,b))}function toLower$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toLowerCase()}\nfunction toPairs$$module$node_modules$rambda$dist$rambda_mjs(a){return Object.entries(a)}function toString$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toString()}function toUpper$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toUpperCase()}function transpose$$module$node_modules$rambda$dist$rambda_mjs(a){return a.reduce((b,c)=>{c.forEach((d,e)=>isArray$$module$node_modules$rambda$dist$rambda_mjs(b[e])?b[e].push(d):b.push([d]));return b},[])}\nfunction trim$$module$node_modules$rambda$dist$rambda_mjs(a){return a.trim()}const isFunction$$module$node_modules$rambda$dist$rambda_mjs=a=>["Promise","Function"].includes(type$$module$node_modules$rambda$dist$rambda_mjs(a));\nfunction tryCatch$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isFunction$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error(`R.tryCatch | fn \'${a}\'`);const c=isFunction$$module$node_modules$rambda$dist$rambda_mjs(b);return(...d)=>{try{return a(...d)}catch(e){return c?b(e,...d):b}}}function unapply$$module$node_modules$rambda$dist$rambda_mjs(a){return function(...b){return a.call(this,b)}}\nfunction union$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>union$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(a);b.forEach(d=>{includes$$module$node_modules$rambda$dist$rambda_mjs(d,a)||c.push(d)});return c}\nfunction uniqBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>uniqBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=new Set;return b.filter(d=>{if(c.has(a(d)))return!1;c.add(a(d));return!0})}function includesWith$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){let d=!1,e=-1;for(;++e<c.length&&!d;)a(b,c[e])&&(d=!0);return d}\nfunction uniqWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>uniqWith$$module$node_modules$rambda$dist$rambda_mjs(a,e);let c=-1;const d=[];for(;++c<b.length;){const e=b[c];includesWith$$module$node_modules$rambda$dist$rambda_mjs(a,e,d)||d.push(e)}return d}function unless$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>unless$$module$node_modules$rambda$dist$rambda_mjs(a,c):c=>a(c)?c:b(c)}\nfunction unwind$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>unwind$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b[a])?mapArray$$module$node_modules$rambda$dist$rambda_mjs(c=>_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},b),{},{[a]:c}),b[a]):[b]}\nfunction values$$module$node_modules$rambda$dist$rambda_mjs(a){return"Object"!==type$$module$node_modules$rambda$dist$rambda_mjs(a)?[]:Object.values(a)}const Const$$module$node_modules$rambda$dist$rambda_mjs=a=>({x:a,map:b=>Const$$module$node_modules$rambda$dist$rambda_mjs(a)});function view$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>view$$module$node_modules$rambda$dist$rambda_mjs(a,c):a(Const$$module$node_modules$rambda$dist$rambda_mjs)(b).x}\nfunction whenFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)?b(c):c}const when$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(whenFn$$module$node_modules$rambda$dist$rambda_mjs);function where$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(void 0===b)return d=>where$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=!0;for(const d in a){if(!c)continue;const e=a[d](b[d]);c&&!1===e&&(c=!1)}return c}\nfunction whereAny$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(void 0===b)return c=>whereAny$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(const c in a)if(a[c](b[c]))return!0;return!1}\nfunction whereEq$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>whereEq$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=filter$$module$node_modules$rambda$dist$rambda_mjs((d,e)=>equals$$module$node_modules$rambda$dist$rambda_mjs(d,b[e]),a);return Object.keys(c).length===Object.keys(a).length}\nfunction without$$module$node_modules$rambda$dist$rambda_mjs(a,b){return void 0===b?c=>without$$module$node_modules$rambda$dist$rambda_mjs(a,c):reduce$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>-1<_indexOf$$module$node_modules$rambda$dist$rambda_mjs(d,a)?c:c.concat(d),[],b)}function xor$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>xor$$module$node_modules$rambda$dist$rambda_mjs(a,c):!!a&&!b||!!b&&!a}\nfunction zip$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>zip$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=[],d=Math.min(a.length,b.length);for(let e=0;e<d;e++)c[e]=[a[e],b[e]];return c}function zipObj$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>zipObj$$module$node_modules$rambda$dist$rambda_mjs(a,c):take$$module$node_modules$rambda$dist$rambda_mjs(b.length,a).reduce((c,d,e)=>{c[d]=b[e];return c},{})}\nfunction zipWithFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return take$$module$node_modules$rambda$dist$rambda_mjs(b.length>c.length?c.length:b.length,b).map((d,e)=>a(d,c[e]))}const zipWith$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(zipWithFn$$module$node_modules$rambda$dist$rambda_mjs);var module$node_modules$rambda$dist$rambda_mjs={};module$node_modules$rambda$dist$rambda_mjs.F=F$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.T=T$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.__findHighestArity=__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._arity=_arity$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._indexOf=_indexOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._lastIndexOf=_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs._pipe=_pipe$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.add=add$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.adjust=adjust$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.all=all$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.allPass=allPass$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.always=always$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.and=and$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.any=any$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.anyPass=anyPass$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.append=append$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.apply=apply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.applySpec=applySpec$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.assoc=assoc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.assocPath=assocPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.bind=bind$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.both=both$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.chain=chain$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.clamp=clamp$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.clone=clone$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.complement=complement$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.compose=compose$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.concat=concat$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.cond=cond$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.converge=converge$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.count=count$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.countBy=countBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.curry=curry$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.curryN=curryN$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dec=dec$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.defaultTo=defaultTo$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.difference=difference$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dissoc=dissoc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.divide=divide$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.drop=drop$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropLast=dropLast$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.dropLastWhile=dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropRepeats=dropRepeats$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropRepeatsWith=dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropWhile=dropWhile$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.either=either$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.endsWith=endsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.eqProps=eqProps$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.equals=equals$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.evolve=evolve$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.evolveArray=evolveArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.evolveObject=evolveObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filter=filter$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filterArray=filterArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filterObject=filterObject$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.find=find$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findIndex=findIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findLast=findLast$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findLastIndex=findLastIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.flatten=flatten$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.flip=flip$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.forEach=forEach$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.fromPairs=fromPairs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.groupBy=groupBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.groupWith=groupWith$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.has=has$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.hasPath=hasPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.head=head$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.identical=identical$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.identity=identity$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.ifElse=ifElse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.inc=inc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.includes=includes$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.indexBy=indexBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.indexOf=indexOf$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.init=init$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.intersection=intersection$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.intersperse=intersperse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.is=is$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.isEmpty=isEmpty$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.isNil=isNil$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.join=join$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.juxt=juxt$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.keys=keys$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.last=last$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.lastIndexOf=lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.length=length$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lens=lens$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lensIndex=lensIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lensPath=lensPath$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.lensProp=lensProp$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.map=map$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapArray=mapArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapObjIndexed=mapObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapObject=mapObject$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.match=match$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mathMod=mathMod$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.max=max$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.maxBy=maxBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.maxByFn=maxByFn$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.mean=mean$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.median=median$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.merge=mergeRight$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeAll=mergeAll$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeDeepRight=mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.mergeLeft=mergeLeft$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeRight=mergeRight$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeWith=mergeWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.min=min$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.minBy=minBy$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.minByFn=minByFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modify=modify$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modifyPath=modifyPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modifyPathFn=modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modulo=modulo$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.move=move$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.multiply=multiply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.negate=negate$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.none=none$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.not=not$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.nth=nth$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.objOf=objOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.of=of$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.omit=omit$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.on=on$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.once=once$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.or=or$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.over=over$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partial=partial$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partialObject=partialObject$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.partition=partition$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partitionArray=partitionArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partitionObject=partitionObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.path=path$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pathEq=pathEq$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.pathOr=pathOr$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.paths=paths$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pick=pick$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pickAll=pickAll$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pipe=pipe$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.pluck=pluck$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.prepend=prepend$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.product=product$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.prop=prop$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propEq=propEq$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.propIs=propIs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propOr=propOr$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propSatisfies=propSatisfies$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.props=props$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.range=range$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.reduce=reduce$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reduceFn=reduceFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reduceStopper=reduceStopper$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reject=reject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.repeat=repeat$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.replace=replace$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reverse=reverse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.set=set$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.slice=slice$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.sort=sort$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.sortBy=sortBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.split=split$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitAt=splitAt$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitEvery=splitEvery$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitWhen=splitWhen$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.startsWith=startsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.subtract=subtract$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.sum=sum$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.symmetricDifference=symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tail=tail$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.take=take$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeLast=takeLast$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeLastWhile=takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeWhile=takeWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tap=tap$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.test=test$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.times=times$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toLower=toLower$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toPairs=toPairs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toString=toString$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.toUpper=toUpper$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.transpose=transpose$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.trim=trim$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tryCatch=tryCatch$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.type=type$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.unapply=unapply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.union=union$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniq=uniq$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniqBy=uniqBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniqWith=uniqWith$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.unless=unless$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.unwind=unwind$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.update=update$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.updateFn=updateFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.values=values$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.view=view$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.when=when$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.where=where$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.whereAny=whereAny$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.whereEq=whereEq$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.without=without$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.xor=xor$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zip=zip$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zipObj=zipObj$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zipWith=zipWith$$module$node_modules$rambda$dist$rambda_mjs;const csoundSetMidiCallbacks$$module$src$modules$rtmidi=a=>b=>{a.exports.csoundSetMidiCallbacks(b)},csoundGetMIDIDevList$$module$src$modules$rtmidi=a=>(b,c)=>{const {buffer:d}=a.wasi.memory,e=a.exports.csoundGetMIDIDevList(b,void 0,c?1:0);if(0===e)return[];const f=sizeofStruct$$module$src$utils$native_sizes(CS_MIDIDEVICE$$module$src$structures),g=a.exports.allocCsMidiDeviceStruct(e);a.exports.csoundGetMIDIDevList(b,g,c?1:0);const h=new Uint8Array(d,g,f*e);b=range$$module$node_modules$rambda$dist$rambda_mjs(0,\ne).map(k=>structBufferToObject$$module$src$utils$structure_buffer_to_object(CS_MIDIDEVICE$$module$src$structures,h.subarray(k*f,f)));a.exports.freeCsMidiDeviceStruct(g);return b};csoundGetMIDIDevList$$module$src$modules$rtmidi.toString=()=>"getMIDIDevList = async (isOutput) => Object;";\nconst csoundGetRtMidiName$$module$src$modules$rtmidi=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.getRtMidiName(b);c=new Uint8Array(c,b,128);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""};csoundGetRtMidiName$$module$src$modules$rtmidi.toString=()=>"getRtMidiName = async () => String;";\nconst csoundGetMidiOutFileName$$module$src$modules$rtmidi=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.getMidiOutFileName(b);c=new Uint8Array(c,b,128);b&&0<b.length&&freeStringPtr$$module$src$utils$string_pointers(a,b);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""},_isRequestingRtMidiInput$$module$src$modules$rtmidi=a=>b=>a.exports.isRequestingRtMidiInput(b),csoundPushMidiMessage$$module$src$modules$rtmidi=a=>(b,c,d,e)=>{a.exports.pushMidiMessage(b,\nc,d,e)};csoundPushMidiMessage$$module$src$modules$rtmidi.toString=()=>"midiMessage = async (status, data1, data2) => undefined;";var module$src$modules$rtmidi={};module$src$modules$rtmidi._isRequestingRtMidiInput=_isRequestingRtMidiInput$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundGetMIDIDevList=csoundGetMIDIDevList$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundGetMidiOutFileName=csoundGetMidiOutFileName$$module$src$modules$rtmidi;\nmodule$src$modules$rtmidi.csoundGetRtMidiName=csoundGetRtMidiName$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundPushMidiMessage=csoundPushMidiMessage$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundSetMidiCallbacks=csoundSetMidiCallbacks$$module$src$modules$rtmidi;const csoundInputMessage$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundInputMessage(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundInputMessage$$module$src$modules$control_events.toString=()=>"inputMessage = async (scoreEvent) => Number;";\nconst csoundInputMessageAsync$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundInputMessageAsync(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundInputMessageAsync$$module$src$modules$control_events.toString=()=>"inputMessageAsync = async (scoreEvent) => Number;";\nconst csoundGetControlChannel$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundGetControlChannelWasi(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundGetControlChannel$$module$src$modules$control_events.toString=()=>"getControlChannel = async (channelName) => Number;";\nconst csoundSetControlChannel$$module$src$modules$control_events=a=>(b,c,d)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);a.exports.csoundSetControlChannel(b,c,d);freeStringPtr$$module$src$utils$string_pointers(a,c)};csoundSetControlChannel$$module$src$modules$control_events.toString=()=>"setControlChannel = async (channelName, value) => void;";\nconst csoundGetStringChannel$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundGetStringChannelWasi(b,c);const d=ptr2string$$module$src$utils$string_pointers(a,b);freeStringPtr$$module$src$utils$string_pointers(a,c);freeStringPtr$$module$src$utils$string_pointers(a,b);return d};csoundGetStringChannel$$module$src$modules$control_events.toString=()=>"getStringChannel = async (channelName) => String;";\nconst csoundSetStringChannel$$module$src$modules$control_events=a=>(b,c,d)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);d=string2ptr$$module$src$utils$string_pointers(a,d);a.exports.csoundSetStringChannel(b,c,d);freeStringPtr$$module$src$utils$string_pointers(a,c);freeStringPtr$$module$src$utils$string_pointers(a,d)};csoundSetStringChannel$$module$src$modules$control_events.toString=()=>"setStringChannel = async (channelName, value) => void;";var module$src$modules$control_events={};\nmodule$src$modules$control_events.csoundGetControlChannel=csoundGetControlChannel$$module$src$modules$control_events;module$src$modules$control_events.csoundGetStringChannel=csoundGetStringChannel$$module$src$modules$control_events;module$src$modules$control_events.csoundInputMessage=csoundInputMessage$$module$src$modules$control_events;module$src$modules$control_events.csoundInputMessageAsync=csoundInputMessageAsync$$module$src$modules$control_events;\nmodule$src$modules$control_events.csoundSetControlChannel=csoundSetControlChannel$$module$src$modules$control_events;module$src$modules$control_events.csoundSetStringChannel=csoundSetStringChannel$$module$src$modules$control_events;const csoundGetOutputName$$module$src$modules$general_io=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.csoundGetOutputName(b);c=new Uint8Array(c,b,64);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""};csoundGetOutputName$$module$src$modules$general_io.toString=()=>"getOutputName = async () => String;";\nconst csoundGetInputName$$module$src$modules$general_io=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.csoundGetInputName(b);c=new Uint8Array(c,b,64);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""};csoundGetInputName$$module$src$modules$general_io.toString=()=>"getInputName = async (csound) => String;";var module$src$modules$general_io={};module$src$modules$general_io.csoundGetInputName=csoundGetInputName$$module$src$modules$general_io;\nmodule$src$modules$general_io.csoundGetOutputName=csoundGetOutputName$$module$src$modules$general_io;const csoundAppendEnv$$module$src$modules$extra=a=>(b,c,d)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);d=string2ptr$$module$src$utils$string_pointers(a,d);b=a.exports.csoundAppendEnv(b,c,d);freeStringPtr$$module$src$utils$string_pointers(a,c);freeStringPtr$$module$src$utils$string_pointers(a,d);return b};csoundAppendEnv$$module$src$modules$extra.toString=()=>"appendEnv = async (csound, variable, value) => Number;";const csoundShouldDaemonize$$module$src$modules$extra=a=>b=>a.exports.csoundShouldDaemonize(b);\nvar module$src$modules$extra={};module$src$modules$extra.csoundAppendEnv=csoundAppendEnv$$module$src$modules$extra;module$src$modules$extra.csoundShouldDaemonize=csoundShouldDaemonize$$module$src$modules$extra;const csoundIsScorePending$$module$src$modules$score_handling=a=>b=>a.exports.csoundIsScorePending(b);csoundIsScorePending$$module$src$modules$score_handling.toString=()=>"isScorePending = async () => Number;";const csoundSetScorePending$$module$src$modules$score_handling=a=>(b,c)=>a.exports.csoundSetScorePending(b,c);csoundSetScorePending$$module$src$modules$score_handling.toString=()=>"setScorePending = async (pending) => Number;";\nconst csoundReadScore$$module$src$modules$score_handling=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundReadScore(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundReadScore$$module$src$modules$score_handling.toString=()=>"readScore = async (score) => Number;";const csoundGetScoreTime$$module$src$modules$score_handling=a=>b=>a.exports.csoundGetScoreTime(b);csoundGetScoreTime$$module$src$modules$score_handling.toString=()=>"getScoreTime = async () => Number;";\nconst csoundGetScoreOffsetSeconds$$module$src$modules$score_handling=a=>b=>a.exports.csoundGetScoreOffsetSeconds(b);csoundGetScoreOffsetSeconds$$module$src$modules$score_handling.toString=()=>"getScoreOffsetSeconds = async () => Number;";const csoundSetScoreOffsetSeconds$$module$src$modules$score_handling=a=>(b,c)=>a.exports.csoundSetScoreOffsetSeconds(b,c);csoundSetScoreOffsetSeconds$$module$src$modules$score_handling.toString=()=>"setScoreOffsetSeconds = async () => Number;";\nconst csoundRewindScore$$module$src$modules$score_handling=a=>b=>a.exports.csoundRewindScore(b);csoundRewindScore$$module$src$modules$score_handling.toString=()=>"rewindScore = async () => undefined;";var module$src$modules$score_handling={};module$src$modules$score_handling.csoundGetScoreOffsetSeconds=csoundGetScoreOffsetSeconds$$module$src$modules$score_handling;module$src$modules$score_handling.csoundGetScoreTime=csoundGetScoreTime$$module$src$modules$score_handling;\nmodule$src$modules$score_handling.csoundIsScorePending=csoundIsScorePending$$module$src$modules$score_handling;module$src$modules$score_handling.csoundReadScore=csoundReadScore$$module$src$modules$score_handling;module$src$modules$score_handling.csoundRewindScore=csoundRewindScore$$module$src$modules$score_handling;module$src$modules$score_handling.csoundSetScoreOffsetSeconds=csoundSetScoreOffsetSeconds$$module$src$modules$score_handling;module$src$modules$score_handling.csoundSetScorePending=csoundSetScorePending$$module$src$modules$score_handling;const csoundTableLength$$module$src$modules$table=a=>(b,c)=>a.exports.csoundTableLength(b,c);csoundTableLength$$module$src$modules$table.toString=()=>"tableLength = async (tableNum) => Number;";const csoundTableGet$$module$src$modules$table=a=>(b,c,d)=>a.exports.csoundTableGet(b,c,d);csoundTableGet$$module$src$modules$table.toString=()=>"tableGet = async (tableNum, tableIndex) => Number;";const csoundTableSet$$module$src$modules$table=a=>(b,c,d,e)=>a.exports.csoundTableSet(b,c,d,e);\ncsoundTableSet$$module$src$modules$table.toString=()=>"tableSet = async (tableNum, tableIndex, value) => undefined;";const csoundTableCopyIn$$module$src$modules$table=a=>(b,c,d)=>{const e=a.exports.allocFloatArray(d.length);(new Float64Array(a.wasi.memory.buffer,e,d.length)).set(d);a.exports.csoundTableCopyIn(b,c,e);a.exports.freeFloatArrayMem(e)};csoundTableCopyIn$$module$src$modules$table.toString=()=>"tableCopyIn = async (tableNum, float64Array) => undefined;";\nconst csoundTableCopyOut$$module$src$modules$table=a=>(b,c)=>{var d=a.exports.csoundTableLength(b,c);if(0<d){const e=a.exports.allocFloatArray(d);a.exports.csoundTableCopyOut(b,c,e);({buffer:b}=a.wasi.memory);d=new Float64Array(b,e,d);a.exports.freeFloatArrayMem(e);return Float64Array.from(d)}};csoundTableCopyOut$$module$src$modules$table.toString=()=>"tableCopyOut = async (tableNum) => ?Float64Array;";const csoundGetTable$$module$src$modules$table=csoundTableCopyOut$$module$src$modules$table;\ncsoundTableCopyOut$$module$src$modules$table.toString=csoundTableCopyOut$$module$src$modules$table.toString;const csoundGetTableArgs$$module$src$modules$table=a=>(b,c)=>{const d=a.exports.allocFloatArray(1024);a.exports.csoundGetTableArgs(b,d,c);({buffer:b}=a.wasi.memory);b=new Float64Array(b,d,1024);a.exports.freeFloatArrayMem(d);return b};csoundGetTableArgs$$module$src$modules$table.toString=()=>"getTableArgs = async (tableNum) => ?Float64Array;";\nconst csoundIsNamedGEN$$module$src$modules$table=a=>(b,c)=>a.exports.csoundIsNamedGEN(b,c);csoundIsNamedGEN$$module$src$modules$table.toString=()=>"isNamedGEN = async (tableNum) => number;";const csoundGetNamedGEN$$module$src$modules$table=a=>(b,c)=>{var d=a.exports.csoundIsNamedGEN(b,c);if(0<d){const e=a.exports.allocStringMem(d);a.exports.csoundGetNamedGEN(b,e,c,d);({buffer:b}=a.wasi.memory);d=new Uint8Array(b,e,d);return uint2String$$module$src$utils$text_encoders(d)}};\ncsoundGetNamedGEN$$module$src$modules$table.toString=()=>"getNamedGEN = async (tableNum) => ?string;";var module$src$modules$table={};module$src$modules$table.csoundGetNamedGEN=csoundGetNamedGEN$$module$src$modules$table;module$src$modules$table.csoundGetTable=csoundTableCopyOut$$module$src$modules$table;module$src$modules$table.csoundGetTableArgs=csoundGetTableArgs$$module$src$modules$table;module$src$modules$table.csoundIsNamedGEN=csoundIsNamedGEN$$module$src$modules$table;\nmodule$src$modules$table.csoundTableCopyIn=csoundTableCopyIn$$module$src$modules$table;module$src$modules$table.csoundTableCopyOut=csoundTableCopyOut$$module$src$modules$table;module$src$modules$table.csoundTableGet=csoundTableGet$$module$src$modules$table;module$src$modules$table.csoundTableLength=csoundTableLength$$module$src$modules$table;module$src$modules$table.csoundTableSet=csoundTableSet$$module$src$modules$table;function writeFile$$module$src$filesystem$worker_fs(a){return(b,c,d)=>{b="string"===typeof d?encoder$$module$src$utils$text_encoders.encode(d):d;a.wasi.writeFile(c,b)}}writeFile$$module$src$filesystem$worker_fs.toString=()=>"async (path, data) => void";function appendFile$$module$src$filesystem$worker_fs(a){return(b,c,d)=>{b="string"===typeof d?encoder$$module$src$utils$text_encoders.encode(d):d;a.wasi.appendFile(c,b)}}appendFile$$module$src$filesystem$worker_fs.toString=()=>"async (path, data) => void";\nfunction readFile$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.readFile(c)}readFile$$module$src$filesystem$worker_fs.toString=()=>"async (path) => ?Uint8Array";function unlink$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.unlink(c)}unlink$$module$src$filesystem$worker_fs.toString=()=>"async (path) => void";function readdir$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.readdir(c)}readdir$$module$src$filesystem$worker_fs.toString=()=>"async (path) => string[]";\nfunction mkdir$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.mkdir(c)}mkdir$$module$src$filesystem$worker_fs.toString=()=>"async (path) => void";var module$src$filesystem$worker_fs={};module$src$filesystem$worker_fs.appendFile=appendFile$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.mkdir=mkdir$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.readFile=readFile$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.readdir=readdir$$module$src$filesystem$worker_fs;\nmodule$src$filesystem$worker_fs.unlink=unlink$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.writeFile=writeFile$$module$src$filesystem$worker_fs;const api$$module$src$libcsound={csoundCreate:csoundCreate$$module$src$modules$instantiation,csoundDestroy:csoundDestroy$$module$src$modules$instantiation,csoundGetAPIVersion:csoundGetAPIVersion$$module$src$modules$instantiation,csoundGetVersion:csoundGetVersion$$module$src$modules$instantiation,csoundInitialize:csoundInitialize$$module$src$modules$instantiation,csoundParseOrc:csoundParseOrc$$module$src$modules$performance,csoundCompileTree:csoundCompileTree$$module$src$modules$performance,csoundCompileOrc:csoundCompileOrc$$module$src$modules$performance,\ncsoundEvalCode:csoundEvalCode$$module$src$modules$performance,csoundStart:csoundStart$$module$src$modules$performance,csoundCompileCsd:csoundCompileCsd$$module$src$modules$performance,csoundCompileCsdText:csoundCompileCsdText$$module$src$modules$performance,csoundPerform:csoundPerform$$module$src$modules$performance,csoundPerformKsmps:csoundPerformKsmps$$module$src$modules$performance,csoundPerformBuffer:csoundPerformBuffer$$module$src$modules$performance,csoundStop:csoundStop$$module$src$modules$performance,\ncsoundCleanup:csoundCleanup$$module$src$modules$performance,csoundReset:csoundReset$$module$src$modules$performance,csoundGetSr:csoundGetSr$$module$src$modules$attributes,csoundGetKr:csoundGetKr$$module$src$modules$attributes,csoundGetKsmps:csoundGetKsmps$$module$src$modules$attributes,csoundGetNchnls:csoundGetNchnls$$module$src$modules$attributes,csoundGetNchnlsInput:csoundGetNchnlsInput$$module$src$modules$attributes,csoundGet0dBFS:csoundGet0dBFS$$module$src$modules$attributes,csoundGetA4:csoundGetA4$$module$src$modules$attributes,\ncsoundGetCurrentTimeSamples:csoundGetCurrentTimeSamples$$module$src$modules$attributes,csoundGetSizeOfMYFLT:csoundGetSizeOfMYFLT$$module$src$modules$attributes,csoundSetOption:csoundSetOption$$module$src$modules$attributes,csoundSetParams:csoundSetParams$$module$src$modules$attributes,csoundGetParams:csoundGetParams$$module$src$modules$attributes,csoundGetDebug:csoundGetDebug$$module$src$modules$attributes,csoundSetDebug:csoundSetDebug$$module$src$modules$attributes,csoundGetInputBufferSize:csoundGetInputBufferSize$$module$src$modules$rtaudio,\ncsoundGetOutputBufferSize:csoundGetOutputBufferSize$$module$src$modules$rtaudio,csoundGetInputBuffer:csoundGetInputBuffer$$module$src$modules$rtaudio,csoundGetOutputBuffer:csoundGetOutputBuffer$$module$src$modules$rtaudio,csoundGetSpin:csoundGetSpin$$module$src$modules$rtaudio,csoundGetSpout:csoundGetSpout$$module$src$modules$rtaudio,csoundGetMIDIDevList:csoundGetMIDIDevList$$module$src$modules$rtmidi,csoundSetMidiCallbacks:csoundSetMidiCallbacks$$module$src$modules$rtmidi,csoundGetRtMidiName:csoundGetRtMidiName$$module$src$modules$rtmidi,\ncsoundGetMidiOutFileName:csoundGetMidiOutFileName$$module$src$modules$rtmidi,csoundPushMidiMessage:csoundPushMidiMessage$$module$src$modules$rtmidi,_isRequestingRtMidiInput:_isRequestingRtMidiInput$$module$src$modules$rtmidi,csoundInputMessage:csoundInputMessage$$module$src$modules$control_events,csoundInputMessageAsync:csoundInputMessageAsync$$module$src$modules$control_events,csoundGetControlChannel:csoundGetControlChannel$$module$src$modules$control_events,csoundSetControlChannel:csoundSetControlChannel$$module$src$modules$control_events,\ncsoundGetStringChannel:csoundGetStringChannel$$module$src$modules$control_events,csoundSetStringChannel:csoundSetStringChannel$$module$src$modules$control_events,csoundGetInputName:csoundGetInputName$$module$src$modules$general_io,csoundGetOutputName:csoundGetOutputName$$module$src$modules$general_io,csoundAppendEnv:csoundAppendEnv$$module$src$modules$extra,csoundShouldDaemonize:csoundShouldDaemonize$$module$src$modules$extra,csoundIsScorePending:csoundIsScorePending$$module$src$modules$score_handling,\ncsoundSetScorePending:csoundSetScorePending$$module$src$modules$score_handling,csoundReadScore:csoundReadScore$$module$src$modules$score_handling,csoundGetScoreTime:csoundGetScoreTime$$module$src$modules$score_handling,csoundGetScoreOffsetSeconds:csoundGetScoreOffsetSeconds$$module$src$modules$score_handling,csoundSetScoreOffsetSeconds:csoundSetScoreOffsetSeconds$$module$src$modules$score_handling,csoundRewindScore:csoundRewindScore$$module$src$modules$score_handling,csoundTableLength:csoundTableLength$$module$src$modules$table,\ncsoundTableGet:csoundTableGet$$module$src$modules$table,csoundTableSet:csoundTableSet$$module$src$modules$table,csoundTableCopyIn:csoundTableCopyIn$$module$src$modules$table,csoundTableCopyOut:csoundTableCopyOut$$module$src$modules$table,csoundGetTable:csoundTableCopyOut$$module$src$modules$table,csoundGetTableArgs:csoundGetTableArgs$$module$src$modules$table,csoundIsNamedGEN:csoundIsNamedGEN$$module$src$modules$table,csoundGetNamedGEN:csoundGetNamedGEN$$module$src$modules$table,fs:module$src$filesystem$worker_fs};\nvar $jscompDefaultExport$$module$src$libcsound=function(a){return mergeAll$$module$node_modules$rambda$dist$rambda_mjs([reduce$$module$node_modules$rambda$dist$rambda_mjs((b,c)=>assoc$$module$node_modules$rambda$dist$rambda_mjs(c,api$$module$src$libcsound[c](a),b),{},keys$$module$node_modules$rambda$dist$rambda_mjs(dissoc$$module$node_modules$rambda$dist$rambda_mjs("fs")(api$$module$src$libcsound))),reduce$$module$node_modules$rambda$dist$rambda_mjs((b,c)=>assoc$$module$node_modules$rambda$dist$rambda_mjs(c,\napi$$module$src$libcsound.fs[c](a),b),{},keys$$module$node_modules$rambda$dist$rambda_mjs(module$src$filesystem$worker_fs))])},module$src$libcsound={};module$src$libcsound.api=api$$module$src$libcsound;module$src$libcsound.default=$jscompDefaultExport$$module$src$libcsound;const dlinit$$module$src$dlinit=(a,b,c,d)=>{if(b.exports.csoundModuleInit){var e=new WebAssembly.Global({value:"i32",mutable:!0},0),f=new WebAssembly.Global({value:"i32",mutable:!0},0),g=new WebAssembly.Global({value:"i32",mutable:!0},0);const h=new WebAssembly.Global({value:"i32",mutable:!0},0);let k=c.length;"function"===typeof b.exports.csoundModuleCreate&&(c.grow(1),e.value=k,c.set(k,b.exports.csoundModuleCreate),k+=1);"function"===typeof b.exports.csoundModuleInit&&(c.grow(1),f.value=k,c.set(k,\nb.exports.csoundModuleInit),k+=1);"function"===typeof b.exports.csoundModuleDestroy&&(c.grow(1),g.value=k,c.set(k,b.exports.csoundModuleDestroy),k+=1);"function"===typeof b.exports.csoundModuleErrorCodeToString&&(c.grow(1),h.value=k,c.set(k,b.exports.csoundModuleErrorCodeToString));a.exports.csoundWasiLoadPlugin(d,e,f,g,h)}else b.exports.csound_opcode_init||b.exports.csound_fgen_init?(e=new WebAssembly.Global({value:"i32",mutable:!0},0),f=new WebAssembly.Global({value:"i32",mutable:!0},0),g=c.length,\n"function"===typeof b.exports.csound_opcode_init&&(e.value=g,c.grow(1),c.set(g,b.exports.csound_opcode_init),g+=1),"function"===typeof b.exports.csound_fgen_init&&(f.value=g,c.grow(1),c.set(g,b.exports.csound_fgen_init)),a.exports.csoundWasiLoadOpcodeLibrary(d,f,e)):console.error("Plugin doesn\'t export nececcary functions to quality as csound plugin.")};var module$src$dlinit={};module$src$dlinit.dlinit=dlinit$$module$src$dlinit;void 0!==goog.global&&(goog.global={});goog.global.BigInt||(goog.global.BigInt=void 0===BigInt?Number:BigInt);\nconst WASI_ESUCCESS$$module$src$filesystem$constants=0,WASI_E2BIG$$module$src$filesystem$constants=1,WASI_EACCES$$module$src$filesystem$constants=2,WASI_EADDRINUSE$$module$src$filesystem$constants=3,WASI_EADDRNOTAVAIL$$module$src$filesystem$constants=4,WASI_EAFNOSUPPORT$$module$src$filesystem$constants=5,WASI_EAGAIN$$module$src$filesystem$constants=6,WASI_EALREADY$$module$src$filesystem$constants=7,WASI_EBADF$$module$src$filesystem$constants=8,WASI_EBADMSG$$module$src$filesystem$constants=9,WASI_EBUSY$$module$src$filesystem$constants=\n10,WASI_ECANCELED$$module$src$filesystem$constants=11,WASI_ECHILD$$module$src$filesystem$constants=12,WASI_ECONNABORTED$$module$src$filesystem$constants=13,WASI_ECONNREFUSED$$module$src$filesystem$constants=14,WASI_ECONNRESET$$module$src$filesystem$constants=15,WASI_EDEADLK$$module$src$filesystem$constants=16,WASI_EDESTADDRREQ$$module$src$filesystem$constants=17,WASI_EDOM$$module$src$filesystem$constants=18,WASI_EDQUOT$$module$src$filesystem$constants=19,WASI_EEXIST$$module$src$filesystem$constants=\n20,WASI_EFAULT$$module$src$filesystem$constants=21,WASI_EFBIG$$module$src$filesystem$constants=22,WASI_EHOSTUNREACH$$module$src$filesystem$constants=23,WASI_EIDRM$$module$src$filesystem$constants=24,WASI_EILSEQ$$module$src$filesystem$constants=25,WASI_EINPROGRESS$$module$src$filesystem$constants=26,WASI_EINTR$$module$src$filesystem$constants=27,WASI_EINVAL$$module$src$filesystem$constants=28,WASI_EIO$$module$src$filesystem$constants=29,WASI_EISCONN$$module$src$filesystem$constants=30,WASI_EISDIR$$module$src$filesystem$constants=\n31,WASI_ELOOP$$module$src$filesystem$constants=32,WASI_EMFILE$$module$src$filesystem$constants=33,WASI_EMLINK$$module$src$filesystem$constants=34,WASI_EMSGSIZE$$module$src$filesystem$constants=35,WASI_EMULTIHOP$$module$src$filesystem$constants=36,WASI_ENAMETOOLONG$$module$src$filesystem$constants=37,WASI_ENETDOWN$$module$src$filesystem$constants=38,WASI_ENETRESET$$module$src$filesystem$constants=39,WASI_ENETUNREACH$$module$src$filesystem$constants=40,WASI_ENFILE$$module$src$filesystem$constants=41,\nWASI_ENOBUFS$$module$src$filesystem$constants=42,WASI_ENODEV$$module$src$filesystem$constants=43,WASI_ENOENT$$module$src$filesystem$constants=44,WASI_ENOEXEC$$module$src$filesystem$constants=45,WASI_ENOLCK$$module$src$filesystem$constants=46,WASI_ENOLINK$$module$src$filesystem$constants=47,WASI_ENOMEM$$module$src$filesystem$constants=48,WASI_ENOMSG$$module$src$filesystem$constants=49,WASI_ENOPROTOOPT$$module$src$filesystem$constants=50,WASI_ENOSPC$$module$src$filesystem$constants=51,WASI_ENOSYS$$module$src$filesystem$constants=\n52,WASI_ENOTCONN$$module$src$filesystem$constants=53,WASI_ENOTDIR$$module$src$filesystem$constants=54,WASI_ENOTEMPTY$$module$src$filesystem$constants=55,WASI_ENOTRECOVERABLE$$module$src$filesystem$constants=56,WASI_ENOTSOCK$$module$src$filesystem$constants=57,WASI_ENOTSUP$$module$src$filesystem$constants=58,WASI_ENOTTY$$module$src$filesystem$constants=59,WASI_ENXIO$$module$src$filesystem$constants=60,WASI_EOVERFLOW$$module$src$filesystem$constants=61,WASI_EOWNERDEAD$$module$src$filesystem$constants=\n62,WASI_EPERM$$module$src$filesystem$constants=63,WASI_EPIPE$$module$src$filesystem$constants=64,WASI_EPROTO$$module$src$filesystem$constants=65,WASI_EPROTONOSUPPORT$$module$src$filesystem$constants=66,WASI_EPROTOTYPE$$module$src$filesystem$constants=67,WASI_ERANGE$$module$src$filesystem$constants=68,WASI_EROFS$$module$src$filesystem$constants=69,WASI_ESPIPE$$module$src$filesystem$constants=70,WASI_ESRCH$$module$src$filesystem$constants=71,WASI_ESTALE$$module$src$filesystem$constants=72,WASI_ETIMEDOUT$$module$src$filesystem$constants=\n73,WASI_ETXTBSY$$module$src$filesystem$constants=74,WASI_EXDEV$$module$src$filesystem$constants=75,WASI_ENOTCAPABLE$$module$src$filesystem$constants=76,WASI_SIGABRT$$module$src$filesystem$constants=0,WASI_SIGALRM$$module$src$filesystem$constants=1,WASI_SIGBUS$$module$src$filesystem$constants=2,WASI_SIGCHLD$$module$src$filesystem$constants=3,WASI_SIGCONT$$module$src$filesystem$constants=4,WASI_SIGFPE$$module$src$filesystem$constants=5,WASI_SIGHUP$$module$src$filesystem$constants=6,WASI_SIGILL$$module$src$filesystem$constants=\n7,WASI_SIGINT$$module$src$filesystem$constants=8,WASI_SIGKILL$$module$src$filesystem$constants=9,WASI_SIGPIPE$$module$src$filesystem$constants=10,WASI_SIGQUIT$$module$src$filesystem$constants=11,WASI_SIGSEGV$$module$src$filesystem$constants=12,WASI_SIGSTOP$$module$src$filesystem$constants=13,WASI_SIGTERM$$module$src$filesystem$constants=14,WASI_SIGTRAP$$module$src$filesystem$constants=15,WASI_SIGTSTP$$module$src$filesystem$constants=16,WASI_SIGTTIN$$module$src$filesystem$constants=17,WASI_SIGTTOU$$module$src$filesystem$constants=\n18,WASI_SIGURG$$module$src$filesystem$constants=19,WASI_SIGUSR1$$module$src$filesystem$constants=20,WASI_SIGUSR2$$module$src$filesystem$constants=21,WASI_SIGVTALRM$$module$src$filesystem$constants=22,WASI_SIGXCPU$$module$src$filesystem$constants=23,WASI_SIGXFSZ$$module$src$filesystem$constants=24,WASI_FILETYPE_UNKNOWN$$module$src$filesystem$constants=0,WASI_FILETYPE_BLOCK_DEVICE$$module$src$filesystem$constants=1,WASI_FILETYPE_CHARACTER_DEVICE$$module$src$filesystem$constants=2,WASI_FILETYPE_DIRECTORY$$module$src$filesystem$constants=\n3,WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants=4,WASI_FILETYPE_SOCKET_DGRAM$$module$src$filesystem$constants=5,WASI_FILETYPE_SOCKET_STREAM$$module$src$filesystem$constants=6,WASI_FILETYPE_SYMBOLIC_LINK$$module$src$filesystem$constants=7,WASI_FDFLAG_APPEND$$module$src$filesystem$constants=1,WASI_FDFLAG_DSYNC$$module$src$filesystem$constants=2,WASI_FDFLAG_NONBLOCK$$module$src$filesystem$constants=4,WASI_FDFLAG_RSYNC$$module$src$filesystem$constants=8,WASI_FDFLAG_SYNC$$module$src$filesystem$constants=\n16,WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants=goog.global.BigInt(1),WASI_RIGHT_FD_READ$$module$src$filesystem$constants=goog.global.BigInt(2),WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants=goog.global.BigInt(4),WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants=goog.global.BigInt(8),WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants=goog.global.BigInt(16),WASI_RIGHT_FD_TELL$$module$src$filesystem$constants=goog.global.BigInt(32),WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants=\ngoog.global.BigInt(64),WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants=goog.global.BigInt(128),WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants=goog.global.BigInt(256),WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants=goog.global.BigInt(512),WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants=goog.global.BigInt(1024),WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants=goog.global.BigInt(2048),WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants=\ngoog.global.BigInt(4096),WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants=goog.global.BigInt(8192),WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants=goog.global.BigInt(16384),WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants=goog.global.BigInt(32768),WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants=goog.global.BigInt(65536),WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants=goog.global.BigInt(131072),WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants=\ngoog.global.BigInt(262144),WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants=goog.global.BigInt(524288),WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants=goog.global.BigInt(1048576),WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants=goog.global.BigInt(2097152),WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants=goog.global.BigInt(4194304),WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants=goog.global.BigInt(8388608),WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants=\ngoog.global.BigInt(16777216),WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants=goog.global.BigInt(33554432),WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants=goog.global.BigInt(67108864),WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants=goog.global.BigInt(134217728),WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants=goog.global.BigInt(268435456),RIGHTS_ALL$$module$src$filesystem$constants=WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_READ$$module$src$filesystem$constants|\nWASI_RIGHT_FD_SEEK$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_TELL$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants|WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants|WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants|WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants|\nWASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants|WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants|WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants|WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants|\nWASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants|WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants|WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants|WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants|\nWASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants,RIGHTS_BLOCK_DEVICE_BASE$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_BLOCK_DEVICE_INHERITING$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_CHARACTER_DEVICE_BASE$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_CHARACTER_DEVICE_INHERITING$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants=\nWASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_TELL$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants|WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|\nWASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants,RIGHTS_REGULAR_FILE_INHERITING$$module$src$filesystem$constants=goog.global.BigInt(0),RIGHTS_DIRECTORY_BASE$$module$src$filesystem$constants=WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants|\nWASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants|WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants|WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants|WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants|WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants|WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants|\nWASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants|WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants|\nWASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants,RIGHTS_DIRECTORY_INHERITING$$module$src$filesystem$constants=RIGHTS_DIRECTORY_BASE$$module$src$filesystem$constants|RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants,RIGHTS_SOCKET_BASE$$module$src$filesystem$constants=WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|\nWASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants|WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants,RIGHTS_SOCKET_INHERITING$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_TTY_BASE$$module$src$filesystem$constants=WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants,\nRIGHTS_TTY_INHERITING$$module$src$filesystem$constants=goog.global.BigInt(0),WASI_CLOCK_REALTIME$$module$src$filesystem$constants=0,WASI_CLOCK_MONOTONIC$$module$src$filesystem$constants=1,WASI_CLOCK_PROCESS_CPUTIME_ID$$module$src$filesystem$constants=2,WASI_CLOCK_THREAD_CPUTIME_ID$$module$src$filesystem$constants=3,WASI_EVENTTYPE_CLOCK$$module$src$filesystem$constants=0,WASI_EVENTTYPE_FD_READ$$module$src$filesystem$constants=1,WASI_EVENTTYPE_FD_WRITE$$module$src$filesystem$constants=2,WASI_FILESTAT_SET_ATIM$$module$src$filesystem$constants=\n1,WASI_FILESTAT_SET_ATIM_NOW$$module$src$filesystem$constants=2,WASI_FILESTAT_SET_MTIM$$module$src$filesystem$constants=4,WASI_FILESTAT_SET_MTIM_NOW$$module$src$filesystem$constants=8,WASI_O_CREAT$$module$src$filesystem$constants=1,WASI_O_DIRECTORY$$module$src$filesystem$constants=2,WASI_O_EXCL$$module$src$filesystem$constants=4,WASI_O_TRUNC$$module$src$filesystem$constants=8,WASI_PREOPENTYPE_DIR$$module$src$filesystem$constants=0,WASI_DIRCOOKIE_START$$module$src$filesystem$constants=0,WASI_STDIN_FILENO$$module$src$filesystem$constants=\n0,WASI_STDOUT_FILENO$$module$src$filesystem$constants=1,WASI_STDERR_FILENO$$module$src$filesystem$constants=2,WASI_WHENCE_SET$$module$src$filesystem$constants=0,WASI_WHENCE_CUR$$module$src$filesystem$constants=1,WASI_WHENCE_END$$module$src$filesystem$constants=2;var module$src$filesystem$constants={};module$src$filesystem$constants.RIGHTS_ALL=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_BLOCK_DEVICE_BASE=RIGHTS_ALL$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.RIGHTS_BLOCK_DEVICE_INHERITING=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_CHARACTER_DEVICE_BASE=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_CHARACTER_DEVICE_INHERITING=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_DIRECTORY_BASE=RIGHTS_DIRECTORY_BASE$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_DIRECTORY_INHERITING=RIGHTS_DIRECTORY_INHERITING$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.RIGHTS_REGULAR_FILE_BASE=RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_REGULAR_FILE_INHERITING=RIGHTS_REGULAR_FILE_INHERITING$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_SOCKET_BASE=RIGHTS_SOCKET_BASE$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_SOCKET_INHERITING=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_TTY_BASE=RIGHTS_TTY_BASE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.RIGHTS_TTY_INHERITING=RIGHTS_TTY_INHERITING$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_CLOCK_MONOTONIC=WASI_CLOCK_MONOTONIC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_CLOCK_PROCESS_CPUTIME_ID=WASI_CLOCK_PROCESS_CPUTIME_ID$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_CLOCK_REALTIME=WASI_CLOCK_REALTIME$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_CLOCK_THREAD_CPUTIME_ID=WASI_CLOCK_THREAD_CPUTIME_ID$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_DIRCOOKIE_START=WASI_DIRCOOKIE_START$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_E2BIG=WASI_E2BIG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EACCES=WASI_EACCES$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EADDRINUSE=WASI_EADDRINUSE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EADDRNOTAVAIL=WASI_EADDRNOTAVAIL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EAFNOSUPPORT=WASI_EAFNOSUPPORT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EAGAIN=WASI_EAGAIN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EALREADY=WASI_EALREADY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EBADF=WASI_EBADF$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EBADMSG=WASI_EBADMSG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EBUSY=WASI_EBUSY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECANCELED=WASI_ECANCELED$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECHILD=WASI_ECHILD$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECONNABORTED=WASI_ECONNABORTED$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ECONNREFUSED=WASI_ECONNREFUSED$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECONNRESET=WASI_ECONNRESET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EDEADLK=WASI_EDEADLK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EDESTADDRREQ=WASI_EDESTADDRREQ$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EDOM=WASI_EDOM$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EDQUOT=WASI_EDQUOT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EEXIST=WASI_EEXIST$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EFAULT=WASI_EFAULT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EFBIG=WASI_EFBIG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EHOSTUNREACH=WASI_EHOSTUNREACH$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EIDRM=WASI_EIDRM$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EILSEQ=WASI_EILSEQ$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EINPROGRESS=WASI_EINPROGRESS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EINTR=WASI_EINTR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EINVAL=WASI_EINVAL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EIO=WASI_EIO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EISCONN=WASI_EISCONN$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EISDIR=WASI_EISDIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ELOOP=WASI_ELOOP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMFILE=WASI_EMFILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMLINK=WASI_EMLINK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMSGSIZE=WASI_EMSGSIZE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMULTIHOP=WASI_EMULTIHOP$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENAMETOOLONG=WASI_ENAMETOOLONG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENETDOWN=WASI_ENETDOWN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENETRESET=WASI_ENETRESET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENETUNREACH=WASI_ENETUNREACH$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENFILE=WASI_ENFILE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENOBUFS=WASI_ENOBUFS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENODEV=WASI_ENODEV$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOENT=WASI_ENOENT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOEXEC=WASI_ENOEXEC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOLCK=WASI_ENOLCK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOLINK=WASI_ENOLINK$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENOMEM=WASI_ENOMEM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOMSG=WASI_ENOMSG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOPROTOOPT=WASI_ENOPROTOOPT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOSPC=WASI_ENOSPC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOSYS=WASI_ENOSYS$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENOTCAPABLE=WASI_ENOTCAPABLE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTCONN=WASI_ENOTCONN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTDIR=WASI_ENOTDIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTEMPTY=WASI_ENOTEMPTY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTRECOVERABLE=WASI_ENOTRECOVERABLE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENOTSOCK=WASI_ENOTSOCK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTSUP=WASI_ENOTSUP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTTY=WASI_ENOTTY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENXIO=WASI_ENXIO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EOVERFLOW=WASI_EOVERFLOW$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EOWNERDEAD=WASI_EOWNERDEAD$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPERM=WASI_EPERM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPIPE=WASI_EPIPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPROTO=WASI_EPROTO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPROTONOSUPPORT=WASI_EPROTONOSUPPORT$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EPROTOTYPE=WASI_EPROTOTYPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ERANGE=WASI_ERANGE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EROFS=WASI_EROFS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ESPIPE=WASI_ESPIPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ESRCH=WASI_ESRCH$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ESTALE=WASI_ESTALE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ESUCCESS=WASI_ESUCCESS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ETIMEDOUT=WASI_ETIMEDOUT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ETXTBSY=WASI_ETXTBSY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EVENTTYPE_CLOCK=WASI_EVENTTYPE_CLOCK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EVENTTYPE_FD_READ=WASI_EVENTTYPE_FD_READ$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EVENTTYPE_FD_WRITE=WASI_EVENTTYPE_FD_WRITE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EXDEV=WASI_EXDEV$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_APPEND=WASI_FDFLAG_APPEND$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_DSYNC=WASI_FDFLAG_DSYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_NONBLOCK=WASI_FDFLAG_NONBLOCK$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_FDFLAG_RSYNC=WASI_FDFLAG_RSYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_SYNC=WASI_FDFLAG_SYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILESTAT_SET_ATIM=WASI_FILESTAT_SET_ATIM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILESTAT_SET_ATIM_NOW=WASI_FILESTAT_SET_ATIM_NOW$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILESTAT_SET_MTIM=WASI_FILESTAT_SET_MTIM$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_FILESTAT_SET_MTIM_NOW=WASI_FILESTAT_SET_MTIM_NOW$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_BLOCK_DEVICE=WASI_FILETYPE_BLOCK_DEVICE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_CHARACTER_DEVICE=WASI_FILETYPE_CHARACTER_DEVICE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_DIRECTORY=WASI_FILETYPE_DIRECTORY$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_FILETYPE_REGULAR_FILE=WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_SOCKET_DGRAM=WASI_FILETYPE_SOCKET_DGRAM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_SOCKET_STREAM=WASI_FILETYPE_SOCKET_STREAM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_SYMBOLIC_LINK=WASI_FILETYPE_SYMBOLIC_LINK$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_FILETYPE_UNKNOWN=WASI_FILETYPE_UNKNOWN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_CREAT=WASI_O_CREAT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_DIRECTORY=WASI_O_DIRECTORY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_EXCL=WASI_O_EXCL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_TRUNC=WASI_O_TRUNC$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_PREOPENTYPE_DIR=WASI_PREOPENTYPE_DIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_ADVISE=WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_ALLOCATE=WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_DATASYNC=WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_FD_FILESTAT_GET=WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_FILESTAT_SET_SIZE=WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_FILESTAT_SET_TIMES=WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_READ=WASI_RIGHT_FD_READ$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_FD_READDIR=WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_SEEK=WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_SYNC=WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_TELL=WASI_RIGHT_FD_TELL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_WRITE=WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_PATH_CREATE_DIRECTORY=WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_CREATE_FILE=WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_FILESTAT_GET=WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_LINK_SOURCE=WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_LINK_TARGET=WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_OPEN=WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_PATH_READLINK=WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_REMOVE_DIRECTORY=WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_RENAME_SOURCE=WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_RENAME_TARGET=WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_PATH_SYMLINK=WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_UNLINK_FILE=WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_POLL_FD_READWRITE=WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_SOCK_SHUTDOWN=WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGABRT=WASI_SIGABRT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGALRM=WASI_SIGALRM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGBUS=WASI_SIGBUS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGCHLD=WASI_SIGCHLD$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGCONT=WASI_SIGCONT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGFPE=WASI_SIGFPE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGHUP=WASI_SIGHUP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGILL=WASI_SIGILL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGINT=WASI_SIGINT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGKILL=WASI_SIGKILL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGPIPE=WASI_SIGPIPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGQUIT=WASI_SIGQUIT$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGSEGV=WASI_SIGSEGV$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGSTOP=WASI_SIGSTOP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTERM=WASI_SIGTERM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTRAP=WASI_SIGTRAP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTSTP=WASI_SIGTSTP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTTIN=WASI_SIGTTIN$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGTTOU=WASI_SIGTTOU$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGURG=WASI_SIGURG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGUSR1=WASI_SIGUSR1$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGUSR2=WASI_SIGUSR2$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGVTALRM=WASI_SIGVTALRM$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGXCPU=WASI_SIGXCPU$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGXFSZ=WASI_SIGXFSZ$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_STDERR_FILENO=WASI_STDERR_FILENO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_STDIN_FILENO=WASI_STDIN_FILENO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_STDOUT_FILENO=WASI_STDOUT_FILENO$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_WHENCE_CUR=WASI_WHENCE_CUR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_WHENCE_END=WASI_WHENCE_END$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_WHENCE_SET=WASI_WHENCE_SET$$module$src$filesystem$constants;goog.debug={};function module$contents$goog$debug$Error_DebugError(a,b){if(Error.captureStackTrace)Error.captureStackTrace(this,module$contents$goog$debug$Error_DebugError);else{const c=Error().stack;c&&(this.stack=c)}a&&(this.message=String(a));void 0!==b&&(this.cause=b);this.reportErrorToServer=!0}goog.inherits(module$contents$goog$debug$Error_DebugError,Error);module$contents$goog$debug$Error_DebugError.prototype.name="CustomError";goog.debug.Error=module$contents$goog$debug$Error_DebugError;goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;function module$contents$goog$asserts_AssertionError(a,b){module$contents$goog$debug$Error_DebugError.call(this,module$contents$goog$asserts_subs(a,b));this.messagePattern=a}goog.inherits(module$contents$goog$asserts_AssertionError,module$contents$goog$debug$Error_DebugError);goog.asserts.AssertionError=module$contents$goog$asserts_AssertionError;module$contents$goog$asserts_AssertionError.prototype.name="AssertionError";\ngoog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};let module$contents$goog$asserts_errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;function module$contents$goog$asserts_subs(a,b){a=a.split("%s");let c="";const d=a.length-1;for(let e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");return c+a[d]}\nfunction module$contents$goog$asserts_doAssertFailure(a,b,c,d){let e="Assertion failed",f;c?(e+=": "+c,f=d):a&&(e+=": "+a,f=b);a=new module$contents$goog$asserts_AssertionError(""+e,f||[]);module$contents$goog$asserts_errorHandler_(a)}goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(module$contents$goog$asserts_errorHandler_=a)};\ngoog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&module$contents$goog$asserts_doAssertFailure("",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertExists=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&null==a&&module$contents$goog$asserts_doAssertFailure("Expected to exist: %s.",[a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&module$contents$goog$asserts_errorHandler_(new module$contents$goog$asserts_AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"number"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"string"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"function"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&module$contents$goog$asserts_doAssertFailure("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!Array.isArray(a)&&module$contents$goog$asserts_doAssertFailure("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"boolean"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||module$contents$goog$asserts_doAssertFailure("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||module$contents$goog$asserts_doAssertFailure("Expected instanceof %s but got %s.",[module$contents$goog$asserts_getType(b),module$contents$goog$asserts_getType(a)],c,Array.prototype.slice.call(arguments,3));return a};\ngoog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||"number"==typeof a&&isFinite(a)||module$contents$goog$asserts_doAssertFailure("Expected %s to be a finite number but it is not.",[a],b,Array.prototype.slice.call(arguments,2));return a};\nfunction module$contents$goog$asserts_getType(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;const module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR;goog.array.ASSUME_NATIVE_FUNCTIONS=module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS;function module$contents$goog$array_peek(a){return a[a.length-1]}goog.array.peek=module$contents$goog$array_peek;goog.array.last=module$contents$goog$array_peek;\nconst module$contents$goog$array_indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.indexOf(b,c);for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};goog.array.indexOf=module$contents$goog$array_indexOf;\nconst module$contents$goog$array_lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.lastIndexOf(b,c);for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};\ngoog.array.lastIndexOf=module$contents$goog$array_lastIndexOf;const module$contents$goog$array_forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEach=module$contents$goog$array_forEach;\nfunction module$contents$goog$array_forEachRight(a,b,c){var d=a.length;const e="string"===typeof a?a.split(""):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a)}goog.array.forEachRight=module$contents$goog$array_forEachRight;\nconst module$contents$goog$array_filter=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){const d=a.length,e=[];let f=0;const g="string"===typeof a?a.split(""):a;for(let h=0;h<d;h++)if(h in g){const k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};goog.array.filter=module$contents$goog$array_filter;\nconst module$contents$goog$array_map=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){const d=a.length,e=Array(d),f="string"===typeof a?a.split(""):a;for(let g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};goog.array.map=module$contents$goog$array_map;\nconst module$contents$goog$array_reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){let e=c;module$contents$goog$array_forEach(a,function(f,g){e=b.call(d,e,f,g,a)});return e};goog.array.reduce=module$contents$goog$array_reduce;\nconst module$contents$goog$array_reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){let e=c;module$contents$goog$array_forEachRight(a,function(f,g){e=b.call(d,e,f,g,a)});return e};goog.array.reduceRight=module$contents$goog$array_reduceRight;\nconst module$contents$goog$array_some=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};goog.array.some=module$contents$goog$array_some;\nconst module$contents$goog$array_every=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.every=module$contents$goog$array_every;\nfunction module$contents$goog$array_count(a,b,c){let d=0;module$contents$goog$array_forEach(a,function(e,f,g){b.call(c,e,f,g)&&++d},c);return d}goog.array.count=module$contents$goog$array_count;function module$contents$goog$array_find(a,b,c){b=module$contents$goog$array_findIndex(a,b,c);return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}goog.array.find=module$contents$goog$array_find;\nfunction module$contents$goog$array_findIndex(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1}goog.array.findIndex=module$contents$goog$array_findIndex;function module$contents$goog$array_findRight(a,b,c){b=module$contents$goog$array_findIndexRight(a,b,c);return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}goog.array.findRight=module$contents$goog$array_findRight;\nfunction module$contents$goog$array_findIndexRight(a,b,c){var d=a.length;const e="string"===typeof a?a.split(""):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1}goog.array.findIndexRight=module$contents$goog$array_findIndexRight;function module$contents$goog$array_contains(a,b){return 0<=module$contents$goog$array_indexOf(a,b)}goog.array.contains=module$contents$goog$array_contains;function module$contents$goog$array_isEmpty(a){return 0==a.length}goog.array.isEmpty=module$contents$goog$array_isEmpty;\nfunction module$contents$goog$array_clear(a){if(!Array.isArray(a))for(let b=a.length-1;0<=b;b--)delete a[b];a.length=0}goog.array.clear=module$contents$goog$array_clear;function module$contents$goog$array_insert(a,b){module$contents$goog$array_contains(a,b)||a.push(b)}goog.array.insert=module$contents$goog$array_insert;function module$contents$goog$array_insertAt(a,b,c){module$contents$goog$array_splice(a,c,0,b)}goog.array.insertAt=module$contents$goog$array_insertAt;\nfunction module$contents$goog$array_insertArrayAt(a,b,c){goog.partial(module$contents$goog$array_splice,a,c,0).apply(null,b)}goog.array.insertArrayAt=module$contents$goog$array_insertArrayAt;function module$contents$goog$array_insertBefore(a,b,c){let d;2==arguments.length||0>(d=module$contents$goog$array_indexOf(a,c))?a.push(b):module$contents$goog$array_insertAt(a,b,d)}goog.array.insertBefore=module$contents$goog$array_insertBefore;\nfunction module$contents$goog$array_remove(a,b){b=module$contents$goog$array_indexOf(a,b);let c;(c=0<=b)&&module$contents$goog$array_removeAt(a,b);return c}goog.array.remove=module$contents$goog$array_remove;function module$contents$goog$array_removeLast(a,b){b=module$contents$goog$array_lastIndexOf(a,b);return 0<=b?(module$contents$goog$array_removeAt(a,b),!0):!1}goog.array.removeLast=module$contents$goog$array_removeLast;\nfunction module$contents$goog$array_removeAt(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length}goog.array.removeAt=module$contents$goog$array_removeAt;function module$contents$goog$array_removeIf(a,b,c){b=module$contents$goog$array_findIndex(a,b,c);return 0<=b?(module$contents$goog$array_removeAt(a,b),!0):!1}goog.array.removeIf=module$contents$goog$array_removeIf;\nfunction module$contents$goog$array_removeAllIf(a,b,c){let d=0;module$contents$goog$array_forEachRight(a,function(e,f){b.call(c,e,f,a)&&module$contents$goog$array_removeAt(a,f)&&d++});return d}goog.array.removeAllIf=module$contents$goog$array_removeAllIf;function module$contents$goog$array_concat(a){return Array.prototype.concat.apply([],arguments)}goog.array.concat=module$contents$goog$array_concat;function module$contents$goog$array_join(a){return Array.prototype.concat.apply([],arguments)}\ngoog.array.join=module$contents$goog$array_join;function module$contents$goog$array_toArray(a){const b=a.length;if(0<b){const c=Array(b);for(let d=0;d<b;d++)c[d]=a[d];return c}return[]}const module$contents$goog$array_clone=goog.array.toArray=module$contents$goog$array_toArray;goog.array.clone=module$contents$goog$array_toArray;\nfunction module$contents$goog$array_extend(a,b){for(let c=1;c<arguments.length;c++){const d=arguments[c];if(goog.isArrayLike(d)){const e=a.length||0,f=d.length||0;a.length=e+f;for(let g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}}goog.array.extend=module$contents$goog$array_extend;function module$contents$goog$array_splice(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,module$contents$goog$array_slice(arguments,1))}goog.array.splice=module$contents$goog$array_splice;\nfunction module$contents$goog$array_slice(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)}goog.array.slice=module$contents$goog$array_slice;\nfunction module$contents$goog$array_removeDuplicates(a,b,c){b=b||a;var d=function(g){return goog.isObject(g)?"o"+goog.getUid(g):(typeof g).charAt(0)+g};c=c||d;let e=d=0;const f={};for(;e<a.length;){const g=a[e++],h=c(g);Object.prototype.hasOwnProperty.call(f,h)||(f[h]=!0,b[d++]=g)}b.length=d}goog.array.removeDuplicates=module$contents$goog$array_removeDuplicates;\nfunction module$contents$goog$array_binarySearch(a,b,c){return module$contents$goog$array_binarySearch_(a,c||module$contents$goog$array_defaultCompare,!1,b)}goog.array.binarySearch=module$contents$goog$array_binarySearch;function module$contents$goog$array_binarySelect(a,b,c){return module$contents$goog$array_binarySearch_(a,b,!0,void 0,c)}goog.array.binarySelect=module$contents$goog$array_binarySelect;\nfunction module$contents$goog$array_binarySearch_(a,b,c,d,e){let f=0,g=a.length,h;for(;f<g;){const k=f+(g-f>>>1);let l;l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l)}return h?f:-f-1}function module$contents$goog$array_sort(a,b){a.sort(b||module$contents$goog$array_defaultCompare)}goog.array.sort=module$contents$goog$array_sort;\nfunction module$contents$goog$array_stableSort(a,b){const c=Array(a.length);for(let e=0;e<a.length;e++)c[e]={index:e,value:a[e]};const d=b||module$contents$goog$array_defaultCompare;module$contents$goog$array_sort(c,function(e,f){return d(e.value,f.value)||e.index-f.index});for(b=0;b<a.length;b++)a[b]=c[b].value}goog.array.stableSort=module$contents$goog$array_stableSort;\nfunction module$contents$goog$array_sortByKey(a,b,c){const d=c||module$contents$goog$array_defaultCompare;module$contents$goog$array_sort(a,function(e,f){return d(b(e),b(f))})}goog.array.sortByKey=module$contents$goog$array_sortByKey;function module$contents$goog$array_sortObjectsByKey(a,b,c){module$contents$goog$array_sortByKey(a,function(d){return d[b]},c)}goog.array.sortObjectsByKey=module$contents$goog$array_sortObjectsByKey;\nfunction module$contents$goog$array_isSorted(a,b,c){b=b||module$contents$goog$array_defaultCompare;for(let d=1;d<a.length;d++){const e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0}goog.array.isSorted=module$contents$goog$array_isSorted;function module$contents$goog$array_equals(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;const d=a.length;c=c||module$contents$goog$array_defaultCompareEquality;for(let e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0}\ngoog.array.equals=module$contents$goog$array_equals;function module$contents$goog$array_compare3(a,b,c){c=c||module$contents$goog$array_defaultCompare;const d=Math.min(a.length,b.length);for(let e=0;e<d;e++){const f=c(a[e],b[e]);if(0!=f)return f}return module$contents$goog$array_defaultCompare(a.length,b.length)}goog.array.compare3=module$contents$goog$array_compare3;function module$contents$goog$array_defaultCompare(a,b){return a>b?1:a<b?-1:0}goog.array.defaultCompare=module$contents$goog$array_defaultCompare;\nfunction module$contents$goog$array_inverseDefaultCompare(a,b){return-module$contents$goog$array_defaultCompare(a,b)}goog.array.inverseDefaultCompare=module$contents$goog$array_inverseDefaultCompare;function module$contents$goog$array_defaultCompareEquality(a,b){return a===b}goog.array.defaultCompareEquality=module$contents$goog$array_defaultCompareEquality;\nfunction module$contents$goog$array_binaryInsert(a,b,c){c=module$contents$goog$array_binarySearch(a,b,c);return 0>c?(module$contents$goog$array_insertAt(a,b,-(c+1)),!0):!1}goog.array.binaryInsert=module$contents$goog$array_binaryInsert;function module$contents$goog$array_binaryRemove(a,b,c){b=module$contents$goog$array_binarySearch(a,b,c);return 0<=b?module$contents$goog$array_removeAt(a,b):!1}goog.array.binaryRemove=module$contents$goog$array_binaryRemove;\nfunction module$contents$goog$array_bucket(a,b,c){const d={};for(let e=0;e<a.length;e++){const f=a[e],g=b.call(c,f,e,a);void 0!==g&&(d[g]||(d[g]=[])).push(f)}return d}goog.array.bucket=module$contents$goog$array_bucket;function module$contents$goog$array_bucketToMap(a,b){const c=new Map;for(let d=0;d<a.length;d++){const e=a[d],f=b(e,d,a);if(void 0!==f){let g=c.get(f);g||(g=[],c.set(f,g));g.push(e)}}return c}goog.array.bucketToMap=module$contents$goog$array_bucketToMap;\nfunction module$contents$goog$array_toObject(a,b,c){const d={};module$contents$goog$array_forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d}goog.array.toObject=module$contents$goog$array_toObject;function module$contents$goog$array_toMap(a,b){const c=new Map;for(let d=0;d<a.length;d++){const e=a[d];c.set(b(e,d,a),e)}return c}goog.array.toMap=module$contents$goog$array_toMap;\nfunction module$contents$goog$array_range(a,b,c){const d=[];let e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d}goog.array.range=module$contents$goog$array_range;function module$contents$goog$array_repeat(a,b){const c=[];for(let d=0;d<b;d++)c[d]=a;return c}goog.array.repeat=module$contents$goog$array_repeat;\nfunction module$contents$goog$array_flatten(a){const b=[];for(let d=0;d<arguments.length;d++){const e=arguments[d];if(Array.isArray(e))for(let f=0;f<e.length;f+=8192){var c=module$contents$goog$array_slice(e,f,f+8192);c=module$contents$goog$array_flatten.apply(null,c);for(let g=0;g<c.length;g++)b.push(c[g])}else b.push(e)}return b}goog.array.flatten=module$contents$goog$array_flatten;\nfunction module$contents$goog$array_rotate(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a}goog.array.rotate=module$contents$goog$array_rotate;function module$contents$goog$array_moveItem(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])}goog.array.moveItem=module$contents$goog$array_moveItem;\nfunction module$contents$goog$array_zip(a){if(!arguments.length)return[];const b=[];let c=arguments[0].length;for(var d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){const e=[];for(let f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b}goog.array.zip=module$contents$goog$array_zip;function module$contents$goog$array_shuffle(a,b){b=b||Math.random;for(let c=a.length-1;0<c;c--){const d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e}}\ngoog.array.shuffle=module$contents$goog$array_shuffle;function module$contents$goog$array_copyByIndex(a,b){const c=[];module$contents$goog$array_forEach(b,function(d){c.push(a[d])});return c}goog.array.copyByIndex=module$contents$goog$array_copyByIndex;function module$contents$goog$array_concatMap(a,b,c){return module$contents$goog$array_concat.apply([],module$contents$goog$array_map(a,b,c))}goog.array.concatMap=module$contents$goog$array_concatMap;goog.dom.asserts={};goog.dom.asserts.assertIsLocation=function(a){if(goog.asserts.ENABLE_ASSERTS){var b=goog.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s",goog.dom.asserts.debugStringForType_(a))}return a};\ngoog.dom.asserts.assertIsElementType_=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=goog.dom.asserts.getWindow_(a);c&&"undefined"!=typeof c[b]&&(a&&(a instanceof c[b]||!(a instanceof c.Location||a instanceof c.Element))||goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s",b,goog.dom.asserts.debugStringForType_(a)))}return a};goog.dom.asserts.assertIsHTMLAnchorElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAnchorElement")};\ngoog.dom.asserts.assertIsHTMLButtonElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLButtonElement")};goog.dom.asserts.assertIsHTMLLinkElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLLinkElement")};goog.dom.asserts.assertIsHTMLImageElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLImageElement")};goog.dom.asserts.assertIsHTMLAudioElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAudioElement")};\ngoog.dom.asserts.assertIsHTMLVideoElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLVideoElement")};goog.dom.asserts.assertIsHTMLInputElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLInputElement")};goog.dom.asserts.assertIsHTMLTextAreaElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLTextAreaElement")};goog.dom.asserts.assertIsHTMLCanvasElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLCanvasElement")};\ngoog.dom.asserts.assertIsHTMLEmbedElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLEmbedElement")};goog.dom.asserts.assertIsHTMLFormElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFormElement")};goog.dom.asserts.assertIsHTMLFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFrameElement")};goog.dom.asserts.assertIsHTMLIFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLIFrameElement")};\ngoog.dom.asserts.assertIsHTMLObjectElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLObjectElement")};goog.dom.asserts.assertIsHTMLScriptElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLScriptElement")};\ngoog.dom.asserts.debugStringForType_=function(a){if(goog.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return"<object could not be stringified>"}else return void 0===a?"undefined":null===a?"null":typeof a};goog.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,c=b&&(b.defaultView||b.parentWindow);c=c||goog.global;if(c.Element&&c.Location)return c}catch(d){}return null};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=function(){return!1};goog.functions.TRUE=function(){return!0};goog.functions.NULL=function(){return null};goog.functions.UNDEFINED=function(){};goog.functions.EMPTY=goog.functions.UNDEFINED;goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};\ngoog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){const c=Array.prototype.slice.call(arguments,1);return function(){let d=this;d===goog.global&&(d=void 0);const e=Array.prototype.slice.call(arguments);e.push.apply(e,c);return a.apply(d,e)}};\ngoog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};goog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){const c=arguments,d=c.length;return function(){let e;d&&(e=c[d-1].apply(this,arguments));for(let f=d-2;0<=f;f--)e=c[f].call(this,e);return e}};\ngoog.functions.sequence=function(a){const b=arguments,c=b.length;return function(){let d;for(let e=0;e<c;e++)d=b[e].apply(this,arguments);return d}};goog.functions.and=function(a){const b=arguments,c=b.length;return function(){for(let d=0;d<c;d++)if(!b[d].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){const b=arguments,c=b.length;return function(){for(let d=0;d<c;d++)if(b[d].apply(this,arguments))return!0;return!1}};\ngoog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};goog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){let b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){let b=a;return function(){if(b){const c=b;b=null;c()}}};\ngoog.functions.debounce=function(a,b,c){let d=0;return function(e){goog.global.clearTimeout(d);const f=arguments;d=goog.global.setTimeout(function(){a.apply(c,f)},b)}};goog.functions.throttle=function(a,b,c){let d=0,e=!1,f=[];const g=function(){d=0;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);let k=f;f=[];a.apply(c,k)};return function(k){f=arguments;d?e=!0:h()}};\ngoog.functions.rateLimit=function(a,b,c){let d=0;const e=function(){d=0};return function(f){d||(d=goog.global.setTimeout(e,b),a.apply(c,arguments))}};goog.functions.isFunction=a=>"function"===typeof a;goog.string={};goog.string.TypedString=function(){};goog.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||"";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};\ngoog.DEBUG&&(goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"});goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail("expected object of type Const, got \'"+a+"\'");return"type_error:Const"};\ngoog.string.Const.from=function(a){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.Const.EMPTY=goog.string.Const.from("");goog.html={};goog.html.trustedtypes={};goog.html.trustedtypes.POLICY_NAME=goog.TRUSTED_TYPES_POLICY_NAME?goog.TRUSTED_TYPES_POLICY_NAME+"#html":"";goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse=function(){if(!goog.html.trustedtypes.POLICY_NAME)return null;void 0===goog.html.trustedtypes.cachedPolicy_&&(goog.html.trustedtypes.cachedPolicy_=goog.createTrustedTypesPolicy(goog.html.trustedtypes.POLICY_NAME));return goog.html.trustedtypes.cachedPolicy_};const module$contents$goog$html$SafeScript_CONSTRUCTOR_TOKEN_PRIVATE={};\nclass module$contents$goog$html$SafeScript_SafeScript{constructor(a,b){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=b===module$contents$goog$html$SafeScript_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}toString(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()}static fromConstant(a){a=goog.string.Const.unwrap(a);return 0===a.length?module$contents$goog$html$SafeScript_SafeScript.EMPTY:module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)}static fromJson(a){return module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(module$contents$goog$html$SafeScript_SafeScript.stringify_(a))}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()}static unwrap(a){return module$contents$goog$html$SafeScript_SafeScript.unwrapTrustedScript(a).toString()}static unwrapTrustedScript(a){if(a instanceof\nmodule$contents$goog$html$SafeScript_SafeScript&&a.constructor===module$contents$goog$html$SafeScript_SafeScript)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;(0,goog.asserts.fail)("expected object of type SafeScript, got \'"+a+"\' of type "+goog.typeOf(a));return"type_error:SafeScript"}static stringify_(a){return JSON.stringify(a).replace(/</g,"\\\\x3c")}static createSafeScriptSecurityPrivateDoNotAccessOrElse(a){const b=goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScript(a):\na;return new module$contents$goog$html$SafeScript_SafeScript(a,module$contents$goog$html$SafeScript_CONSTRUCTOR_TOKEN_PRIVATE)}}module$contents$goog$html$SafeScript_SafeScript.EMPTY=function(){return module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("")}();goog.html.SafeScript=module$contents$goog$html$SafeScript_SafeScript;goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.UrlObject_=function(){};goog.fs.url.UrlObject_.prototype.createObjectURL=function(a){};goog.fs.url.UrlObject_.prototype.revokeObjectURL=function(a){};\ngoog.fs.url.getUrlObject_=function(){const a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error("This browser doesn\'t seem to support blob URLs");};goog.fs.url.findUrlObject_=function(){return void 0!==goog.global.URL&&void 0!==goog.global.URL.createObjectURL?goog.global.URL:void 0!==goog.global.createObjectURL?goog.global:null};goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.fs.blob={};goog.fs.blob.getBlob=function(a){var b=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==b){b=new b;for(let c=0;c<arguments.length;c++)b.append(arguments[c]);return b.getBlob()}return goog.fs.blob.getBlobWithProperties(Array.prototype.slice.call(arguments))};\ngoog.fs.blob.getBlobWithProperties=function(a,b,c){var d=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==d){d=new d;for(let e=0;e<a.length;e++)d.append(a[e],c);return d.getBlob(b)}if(void 0!==goog.global.Blob)return d={},b&&(d.type=b),c&&(d.endings=c),new Blob(a,d);throw Error("This browser doesn\'t seem to support creating Blobs");};goog.html.TrustedResourceUrl=class{constructor(a,b){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=b===goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:""}toString(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+""}};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};\ngoog.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var c=goog.html.TrustedResourceUrl.unwrap(this);c=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);var d=c[3]||"";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1]+goog.html.TrustedResourceUrl.stringifyParams_("?",c[2]||"",a)+goog.html.TrustedResourceUrl.stringifyParams_("#",d,b))};goog.html.TrustedResourceUrl.unwrap=function(a){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};\ngoog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail("expected object of type TrustedResourceUrl, got \'"+a+"\' of type "+goog.typeOf(a));return"type_error:TrustedResourceUrl"};\ngoog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(d,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error(\'Found marker, "\'+e+\'", in format string, "\'+c+\'", but no valid label mapping found in args: \'+JSON.stringify(b));d=b[e];return d instanceof goog.string.Const?goog.string.Const.unwrap(d):\nencodeURIComponent(String(d))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\\w+)}/g;goog.html.TrustedResourceUrl.BASE_URL_=RegExp("^((https:)?//[0-9a-z.:[\\\\]-]+/|/[^/\\\\\\\\]|[^:/\\\\\\\\%]+/|[^:/\\\\\\\\%]*[?#]|about:blank#)","i");goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/;\ngoog.html.TrustedResourceUrl.formatWithParams=function(a,b,c,d){return goog.html.TrustedResourceUrl.format(a,b).cloneWithParams(c,d)};goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b="",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.TrustedResourceUrl.fromSafeScript=function(a){a=goog.fs.blob.getBlobWithProperties([module$contents$goog$html$SafeScript_SafeScript.unwrap(a)],"text/javascript");a=goog.fs.url.createObjectUrl(a);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};\ngoog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){const b=goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScriptURL(a):a;return new goog.html.TrustedResourceUrl(a,goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};\ngoog.html.TrustedResourceUrl.stringifyParams_=function(a,b,c){if(null==c)return b;if("string"===typeof c)return c?a+encodeURIComponent(c):"";for(var d in c)if(Object.prototype.hasOwnProperty.call(c,d)){var e=c[d];e=Array.isArray(e)?e:[e];for(var f=0;f<e.length;f++){var g=e[f];null!=g&&(b||(b=a),b+=(b.length>a.length?"&":"")+encodeURIComponent(d)+"="+encodeURIComponent(String(g)))}}return b};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){const c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.slice(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.slice(a.length-b.length))};\ngoog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\\s\\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};\ngoog.string.internal.newLineToBr=function(a,b){return a.replace(/(\\r\\n|\\r|\\n)/g,b?"<br />":"<br>")};\ngoog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.internal.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.internal.LT_RE_,\n"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.internal.GT_RE_,"&gt;"));-1!=a.indexOf(\'"\')&&(a=a.replace(goog.string.internal.QUOT_RE_,"&quot;"));-1!=a.indexOf("\'")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\\x00")&&(a=a.replace(goog.string.internal.NULL_RE_,"&#0;"))}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/"/g;goog.string.internal.SINGLE_QUOTE_RE_=/\'/g;\ngoog.string.internal.NULL_RE_=/\\x00/g;goog.string.internal.ALL_RE_=/[\\x00&<>"\']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g," &#160;"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};\ngoog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(".");b=goog.string.internal.trim(String(b)).split(".");const d=Math.max(a.length,b.length);for(let g=0;0==c&&g<d;g++){var e=a[g]||"",f=b[g]||"";do{e=/(\\d*)(\\D*)(.*)/.exec(e)||["","","",""];f=/(\\d*)(\\D*)(.*)/.exec(f)||["","","",""];if(0==e[0].length&&0==f[0].length)break;c=0==e[1].length?0:parseInt(e[1],10);const h=0==f[1].length?0:parseInt(f[1],10);c=goog.string.internal.compareElements_(c,h)||\ngoog.string.internal.compareElements_(0==e[2].length,0==f[2].length)||goog.string.internal.compareElements_(e[2],f[2]);e=e[3];f=f[3]}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.html.SafeUrl=class{constructor(a,b){this.privateDoNotAccessOrElseSafeUrlWrappedValue_=b===goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:""}toString(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()}};goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};\ngoog.html.SafeUrl.unwrap=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;goog.asserts.fail("expected object of type SafeUrl, got \'"+a+"\' of type "+goog.typeOf(a));return"type_error:SafeUrl"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};\ngoog.html.SAFE_MIME_TYPE_PATTERN_=RegExp(\'^(?:audio/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font/\\\\w+|image/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon|heic|heif)|video/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\\\\w+=(?:\\\\w+|"[\\\\w;,= ]+"))*$\',"i");goog.html.SafeUrl.isSafeMimeType=function(a){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a)};\ngoog.html.SafeUrl.fromBlob=function(a){a=goog.html.SafeUrl.isSafeMimeType(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.revokeObjectUrl=function(a){a=a.getTypedStringValue();a!==goog.html.SafeUrl.INNOCUOUS_STRING&&goog.fs.url.revokeObjectUrl(a)};\ngoog.html.SafeUrl.fromMediaSource=function(a){goog.asserts.assert("MediaSource"in goog.global,"No support for MediaSource");a=a instanceof MediaSource?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.DATA_URL_PATTERN_=/^data:(.*);base64,[a-z0-9+\\/]+=*$/i;\ngoog.html.SafeUrl.tryFromDataUrl=function(a){a=String(a);a=a.replace(/(%0A|%0D)/g,"");return a.match(goog.html.DATA_URL_PATTERN_)?goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):null};goog.html.SafeUrl.fromDataUrl=function(a){return goog.html.SafeUrl.tryFromDataUrl(a)||goog.html.SafeUrl.INNOCUOUS_URL};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"tel:")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SIP_URL_PATTERN_=RegExp("^sip[s]?:[+a-z0-9_.!$%&\'*\\\\/=^`{|}~-]+@([a-z0-9-]+\\\\.)+[a-z0-9]{2,63}$","i");goog.html.SafeUrl.fromSipUrl=function(a){goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromFacebookMessengerUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"fb-messenger://share")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.fromWhatsAppUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"whatsapp://send")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromSmsUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"sms:")&&goog.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf("#");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(c){return!1}return/^(?:[a-z0-9\\-_.~]|%[0-9a-f]{2})+$/i.test(a)};goog.html.SafeUrl.fromSshUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"ssh://")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\\/\\/([^\\/]+)\\//,a,b)};goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\\/\\/([^\\/]+)\\//,a,b)};goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\\/\\/([^\\/]+)\\//,a,b)};\ngoog.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,c){(a=a.exec(b))?(a=a[1],-1==(c instanceof goog.string.Const?[goog.string.Const.unwrap(c)]:c.map(function(d){return goog.string.Const.unwrap(d)})).indexOf(a)&&(b=goog.html.SafeUrl.INNOCUOUS_STRING)):b=goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeUrl.fromTrustedResourceUrl=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a))};\ngoog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_;goog.html.SafeUrl.trySanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SAFE_URL_PATTERN_.test(a)?goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):goog.html.SafeUrl.tryFromDataUrl(a)};\ngoog.html.SafeUrl.sanitize=function(a){return goog.html.SafeUrl.trySanitize(a)||goog.html.SafeUrl.INNOCUOUS_URL};\ngoog.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=goog.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a),"%s does not match the safe URL pattern",a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){return new goog.html.SafeUrl(a,goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};goog.html.SafeUrl.INNOCUOUS_URL=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.SafeUrl.INNOCUOUS_STRING);goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");const module$contents$goog$html$SafeStyle_CONSTRUCTOR_TOKEN_PRIVATE={};\nclass module$contents$goog$html$SafeStyle_SafeStyle{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=b===module$contents$goog$html$SafeStyle_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}static fromConstant(a){a=goog.string.Const.unwrap(a);if(0===a.length)return module$contents$goog$html$SafeStyle_SafeStyle.EMPTY;(0,goog.asserts.assert)((0,goog.string.internal.endsWith)(a,";"),`Last character of style string is not \';\': ${a}`);(0,goog.asserts.assert)((0,goog.string.internal.contains)(a,\n":"),"Style string must contain at least one \':\', to specify a \\"name: value\\" pair: "+a);return module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_}toString(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_.toString()}static unwrap(a){if(a instanceof module$contents$goog$html$SafeStyle_SafeStyle&&a.constructor===module$contents$goog$html$SafeStyle_SafeStyle)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n(0,goog.asserts.fail)(`expected object of type SafeStyle, got \'${a}`+"\' of type "+goog.typeOf(a));return"type_error:SafeStyle"}static createSafeStyleSecurityPrivateDoNotAccessOrElse(a){return new module$contents$goog$html$SafeStyle_SafeStyle(a,module$contents$goog$html$SafeStyle_CONSTRUCTOR_TOKEN_PRIVATE)}static create(a){let b="";for(let c in a)if(Object.prototype.hasOwnProperty.call(a,c)){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error(`Name allows only [-_a-zA-Z0-9], got: ${c}`);let d=a[c];null!=d&&\n(d=Array.isArray(d)?d.map(module$contents$goog$html$SafeStyle_sanitizePropertyValue).join(" "):module$contents$goog$html$SafeStyle_sanitizePropertyValue(d),b+=`${c}:${d};`)}return b?module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):module$contents$goog$html$SafeStyle_SafeStyle.EMPTY}static concat(a){let b="";const c=d=>{Array.isArray(d)?d.forEach(c):b+=module$contents$goog$html$SafeStyle_SafeStyle.unwrap(d)};Array.prototype.forEach.call(arguments,c);\nreturn b?module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):module$contents$goog$html$SafeStyle_SafeStyle.EMPTY}}module$contents$goog$html$SafeStyle_SafeStyle.EMPTY=module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING="zClosurez";\nfunction module$contents$goog$html$SafeStyle_sanitizePropertyValue(a){if(a instanceof goog.html.SafeUrl)return\'url("\'+goog.html.SafeUrl.unwrap(a).replace(/</g,"%3c").replace(/[\\\\"]/g,"\\\\$&")+\'")\';a=a instanceof goog.string.Const?goog.string.Const.unwrap(a):module$contents$goog$html$SafeStyle_sanitizePropertyValueString(String(a));if(/[{;}]/.test(a))throw new module$contents$goog$asserts_AssertionError("Value does not allow [{;}], got: %s.",[a]);return a}\nfunction module$contents$goog$html$SafeStyle_sanitizePropertyValueString(a){const b=a.replace(module$contents$goog$html$SafeStyle_FUNCTIONS_RE,"$1").replace(module$contents$goog$html$SafeStyle_FUNCTIONS_RE,"$1").replace(module$contents$goog$html$SafeStyle_URL_RE,"url");if(module$contents$goog$html$SafeStyle_VALUE_RE.test(b)){if(module$contents$goog$html$SafeStyle_COMMENT_RE.test(a))return(0,goog.asserts.fail)(`String value disallows comments, got: ${a}`),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING;\nif(!module$contents$goog$html$SafeStyle_hasBalancedQuotes(a))return(0,goog.asserts.fail)(`String value requires balanced quotes, got: ${a}`),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING;if(!module$contents$goog$html$SafeStyle_hasBalancedSquareBrackets(a))return(0,goog.asserts.fail)("String value requires balanced square brackets and one identifier per pair of brackets, got: "+a),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING}else return(0,goog.asserts.fail)(`String value allows only ${module$contents$goog$html$SafeStyle_VALUE_ALLOWED_CHARS}`+\n" and simple functions, got: "+a),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING;return module$contents$goog$html$SafeStyle_sanitizeUrl(a)}function module$contents$goog$html$SafeStyle_hasBalancedQuotes(a){let b=!0,c=!0;for(let d=0;d<a.length;d++){const e=a.charAt(d);"\'"==e&&c?b=!b:\'"\'==e&&b&&(c=!c)}return b&&c}\nfunction module$contents$goog$html$SafeStyle_hasBalancedSquareBrackets(a){let b=!0;const c=/^[-_a-zA-Z0-9]$/;for(let d=0;d<a.length;d++){const e=a.charAt(d);if("]"==e){if(b)return!1;b=!0}else if("["==e){if(!b)return!1;b=!1}else if(!b&&!c.test(e))return!1}return b}\nconst module$contents$goog$html$SafeStyle_VALUE_ALLOWED_CHARS="[-,.\\"\'%_!#/ a-zA-Z0-9\\\\[\\\\]]",module$contents$goog$html$SafeStyle_VALUE_RE=new RegExp(`^${module$contents$goog$html$SafeStyle_VALUE_ALLOWED_CHARS}+\\$`),module$contents$goog$html$SafeStyle_URL_RE=RegExp("\\\\b(url\\\\([ \\t\\n]*)(\'[ -&(-\\\\[\\\\]-~]*\'|\\"[ !#-\\\\[\\\\]-~]*\\"|[!#-&*-\\\\[\\\\]-~]*)([ \\t\\n]*\\\\))","g"),module$contents$goog$html$SafeStyle_ALLOWED_FUNCTIONS="calc cubic-bezier fit-content hsl hsla linear-gradient matrix minmax radial-gradient repeat rgb rgba (rotate|scale|translate)(X|Y|Z|3d)? steps var".split(" "),\nmodule$contents$goog$html$SafeStyle_FUNCTIONS_RE=new RegExp("\\\\b("+module$contents$goog$html$SafeStyle_ALLOWED_FUNCTIONS.join("|")+")\\\\([-+*/0-9a-zA-Z.%#\\\\[\\\\], ]+\\\\)","g"),module$contents$goog$html$SafeStyle_COMMENT_RE=/\\/\\*/;function module$contents$goog$html$SafeStyle_sanitizeUrl(a){return a.replace(module$contents$goog$html$SafeStyle_URL_RE,(b,c,d,e)=>{let f="";d=d.replace(/^([\'"])(.*)\\1$/,(g,h,k)=>{f=h;return k});b=goog.html.SafeUrl.sanitize(d).getTypedStringValue();return c+f+b+f+e})}\ngoog.html.SafeStyle=module$contents$goog$html$SafeStyle_SafeStyle;goog.object={};function module$contents$goog$object_forEach(a,b,c){for(const d in a)b.call(c,a[d],d,a)}function module$contents$goog$object_filter(a,b,c){const d={};for(const e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d}function module$contents$goog$object_map(a,b,c){const d={};for(const e in a)d[e]=b.call(c,a[e],e,a);return d}function module$contents$goog$object_some(a,b,c){for(const d in a)if(b.call(c,a[d],d,a))return!0;return!1}\nfunction module$contents$goog$object_every(a,b,c){for(const d in a)if(!b.call(c,a[d],d,a))return!1;return!0}function module$contents$goog$object_getCount(a){let b=0;for(const c in a)b++;return b}function module$contents$goog$object_getAnyKey(a){for(const b in a)return b}function module$contents$goog$object_getAnyValue(a){for(const b in a)return a[b]}function module$contents$goog$object_contains(a,b){return module$contents$goog$object_containsValue(a,b)}\nfunction module$contents$goog$object_getValues(a){const b=[];let c=0;for(const d in a)b[c++]=a[d];return b}function module$contents$goog$object_getKeys(a){const b=[];let c=0;for(const d in a)b[c++]=d;return b}function module$contents$goog$object_getValueByKeys(a,b){var c=goog.isArrayLike(b);const d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]]}return a}function module$contents$goog$object_containsKey(a,b){return null!==a&&b in a}\nfunction module$contents$goog$object_containsValue(a,b){for(const c in a)if(a[c]==b)return!0;return!1}function module$contents$goog$object_findKey(a,b,c){for(const d in a)if(b.call(c,a[d],d,a))return d}function module$contents$goog$object_findValue(a,b,c){return(b=module$contents$goog$object_findKey(a,b,c))&&a[b]}function module$contents$goog$object_isEmpty(a){for(const b in a)return!1;return!0}function module$contents$goog$object_clear(a){for(const b in a)delete a[b]}\nfunction module$contents$goog$object_remove(a,b){let c;(c=b in a)&&delete a[b];return c}function module$contents$goog$object_add(a,b,c){if(null!==a&&b in a)throw Error(`The object already contains the key "${b}"`);module$contents$goog$object_set(a,b,c)}function module$contents$goog$object_get(a,b,c){return null!==a&&b in a?a[b]:c}function module$contents$goog$object_set(a,b,c){a[b]=c}function module$contents$goog$object_setIfUndefined(a,b,c){return b in a?a[b]:a[b]=c}\nfunction module$contents$goog$object_setWithReturnValueIfNotSet(a,b,c){if(b in a)return a[b];c=c();return a[b]=c}function module$contents$goog$object_equals(a,b){for(const c in a)if(!(c in b)||a[c]!==b[c])return!1;for(const c in b)if(!(c in a))return!1;return!0}function module$contents$goog$object_clone(a){const b={};for(const c in a)b[c]=a[c];return b}\nfunction module$contents$goog$object_unsafeClone(a){if(!a||"object"!==typeof a)return a;if("function"===typeof a.clone)return a.clone();if("undefined"!==typeof Map&&a instanceof Map)return new Map(a);if("undefined"!==typeof Set&&a instanceof Set)return new Set(a);if(a instanceof Date)return new Date(a.getTime());const b=Array.isArray(a)?[]:"function"!==typeof ArrayBuffer||"function"!==typeof ArrayBuffer.isView||!ArrayBuffer.isView(a)||a instanceof DataView?{}:new a.constructor(a.length);for(const c in a)b[c]=\nmodule$contents$goog$object_unsafeClone(a[c]);return b}function module$contents$goog$object_transpose(a){const b={};for(const c in a)b[a[c]]=c;return b}const module$contents$goog$object_PROTOTYPE_FIELDS="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");\nfunction module$contents$goog$object_extend(a,b){let c,d;for(let e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(let f=0;f<module$contents$goog$object_PROTOTYPE_FIELDS.length;f++)c=module$contents$goog$object_PROTOTYPE_FIELDS[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}}\nfunction module$contents$goog$object_create(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return module$contents$goog$object_create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");const c={};for(let d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c}\nfunction module$contents$goog$object_createSet(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return module$contents$goog$object_createSet.apply(null,arguments[0]);const c={};for(let d=0;d<b;d++)c[arguments[d]]=!0;return c}function module$contents$goog$object_createImmutableView(a){let b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b}function module$contents$goog$object_isImmutableView(a){return!!Object.isFrozen&&Object.isFrozen(a)}\nfunction module$contents$goog$object_getAllPropertyNames(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return module$contents$goog$object_getKeys(a);const d={};for(;a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){const e=Object.getOwnPropertyNames(a);for(let f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a)}return module$contents$goog$object_getKeys(d)}\nfunction module$contents$goog$object_getSuperClass(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor}goog.object.add=module$contents$goog$object_add;goog.object.clear=module$contents$goog$object_clear;goog.object.clone=module$contents$goog$object_clone;goog.object.contains=module$contents$goog$object_contains;goog.object.containsKey=module$contents$goog$object_containsKey;goog.object.containsValue=module$contents$goog$object_containsValue;goog.object.create=module$contents$goog$object_create;\ngoog.object.createImmutableView=module$contents$goog$object_createImmutableView;goog.object.createSet=module$contents$goog$object_createSet;goog.object.equals=module$contents$goog$object_equals;goog.object.every=module$contents$goog$object_every;goog.object.extend=module$contents$goog$object_extend;goog.object.filter=module$contents$goog$object_filter;goog.object.findKey=module$contents$goog$object_findKey;goog.object.findValue=module$contents$goog$object_findValue;goog.object.forEach=module$contents$goog$object_forEach;\ngoog.object.get=module$contents$goog$object_get;goog.object.getAllPropertyNames=module$contents$goog$object_getAllPropertyNames;goog.object.getAnyKey=module$contents$goog$object_getAnyKey;goog.object.getAnyValue=module$contents$goog$object_getAnyValue;goog.object.getCount=module$contents$goog$object_getCount;goog.object.getKeys=module$contents$goog$object_getKeys;goog.object.getSuperClass=module$contents$goog$object_getSuperClass;goog.object.getValueByKeys=module$contents$goog$object_getValueByKeys;\ngoog.object.getValues=module$contents$goog$object_getValues;goog.object.isEmpty=module$contents$goog$object_isEmpty;goog.object.isImmutableView=module$contents$goog$object_isImmutableView;goog.object.map=module$contents$goog$object_map;goog.object.remove=module$contents$goog$object_remove;goog.object.set=module$contents$goog$object_set;goog.object.setIfUndefined=module$contents$goog$object_setIfUndefined;goog.object.setWithReturnValueIfNotSet=module$contents$goog$object_setWithReturnValueIfNotSet;\ngoog.object.some=module$contents$goog$object_some;goog.object.transpose=module$contents$goog$object_transpose;goog.object.unsafeClone=module$contents$goog$object_unsafeClone;const module$contents$goog$html$SafeStyleSheet_CONSTRUCTOR_TOKEN_PRIVATE={};\nclass module$contents$goog$html$SafeStyleSheet_SafeStyleSheet{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=b===module$contents$goog$html$SafeStyleSheet_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}toString(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_.toString()}static createRule(a,b){if((0,goog.string.internal.contains)(a,"<"))throw Error(`Selector does not allow \'<\', got: ${a}`);const c=a.replace(/(\'|")((?!\\1)[^\\r\\n\\f\\\\]|\\\\[\\s\\S])*\\1/g,\n"");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|]+$/.test(c))throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\\\]()=^$|] and strings, got: "+a);if(!module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.hasBalancedBrackets_(c))throw Error("() and [] in selector must be balanced, got: "+a);b instanceof module$contents$goog$html$SafeStyle_SafeStyle||(b=module$contents$goog$html$SafeStyle_SafeStyle.create(b));a=`${a}{`+module$contents$goog$html$SafeStyle_SafeStyle.unwrap(b).replace(/</g,"\\\\3C ")+"}";\nreturn module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}static hasBalancedBrackets_(a){const b={"(":")","[":"]"},c=[];for(let d=0;d<a.length;d++){const e=a[d];if(b[e])c.push(b[e]);else if(module$contents$goog$object_contains(b,e)&&c.pop()!=e)return!1}return 0==c.length}static concat(a){let b="";const c=d=>{Array.isArray(d)?d.forEach(c):b+=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.unwrap(d)};Array.prototype.forEach.call(arguments,\nc);return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)}static fromConstant(a){a=goog.string.Const.unwrap(a);if(0===a.length)return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.EMPTY;(0,goog.asserts.assert)(!(0,goog.string.internal.contains)(a,"<"),`Forbidden \'<\' character in style sheet string: ${a}`);return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_}static unwrap(a){if(a instanceof\nmodule$contents$goog$html$SafeStyleSheet_SafeStyleSheet&&a.constructor===module$contents$goog$html$SafeStyleSheet_SafeStyleSheet)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;(0,goog.asserts.fail)("expected object of type SafeStyleSheet, got \'"+a+"\' of type "+goog.typeOf(a));return"type_error:SafeStyleSheet"}static createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a){return new module$contents$goog$html$SafeStyleSheet_SafeStyleSheet(a,module$contents$goog$html$SafeStyleSheet_CONSTRUCTOR_TOKEN_PRIVATE)}}\nmodule$contents$goog$html$SafeStyleSheet_SafeStyleSheet.EMPTY=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");goog.html.SafeStyleSheet=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet;goog.dom.HtmlElement=function(){};goog.dom.TagName=class{static cast(a,b){return a}constructor(){}toString(){}};goog.dom.TagName.A="A";goog.dom.TagName.ABBR="ABBR";goog.dom.TagName.ACRONYM="ACRONYM";goog.dom.TagName.ADDRESS="ADDRESS";goog.dom.TagName.APPLET="APPLET";goog.dom.TagName.AREA="AREA";goog.dom.TagName.ARTICLE="ARTICLE";goog.dom.TagName.ASIDE="ASIDE";goog.dom.TagName.AUDIO="AUDIO";goog.dom.TagName.B="B";goog.dom.TagName.BASE="BASE";goog.dom.TagName.BASEFONT="BASEFONT";goog.dom.TagName.BDI="BDI";goog.dom.TagName.BDO="BDO";\ngoog.dom.TagName.BIG="BIG";goog.dom.TagName.BLOCKQUOTE="BLOCKQUOTE";goog.dom.TagName.BODY="BODY";goog.dom.TagName.BR="BR";goog.dom.TagName.BUTTON="BUTTON";goog.dom.TagName.CANVAS="CANVAS";goog.dom.TagName.CAPTION="CAPTION";goog.dom.TagName.CENTER="CENTER";goog.dom.TagName.CITE="CITE";goog.dom.TagName.CODE="CODE";goog.dom.TagName.COL="COL";goog.dom.TagName.COLGROUP="COLGROUP";goog.dom.TagName.COMMAND="COMMAND";goog.dom.TagName.DATA="DATA";goog.dom.TagName.DATALIST="DATALIST";goog.dom.TagName.DD="DD";\ngoog.dom.TagName.DEL="DEL";goog.dom.TagName.DETAILS="DETAILS";goog.dom.TagName.DFN="DFN";goog.dom.TagName.DIALOG="DIALOG";goog.dom.TagName.DIR="DIR";goog.dom.TagName.DIV="DIV";goog.dom.TagName.DL="DL";goog.dom.TagName.DT="DT";goog.dom.TagName.EM="EM";goog.dom.TagName.EMBED="EMBED";goog.dom.TagName.FIELDSET="FIELDSET";goog.dom.TagName.FIGCAPTION="FIGCAPTION";goog.dom.TagName.FIGURE="FIGURE";goog.dom.TagName.FONT="FONT";goog.dom.TagName.FOOTER="FOOTER";goog.dom.TagName.FORM="FORM";\ngoog.dom.TagName.FRAME="FRAME";goog.dom.TagName.FRAMESET="FRAMESET";goog.dom.TagName.H1="H1";goog.dom.TagName.H2="H2";goog.dom.TagName.H3="H3";goog.dom.TagName.H4="H4";goog.dom.TagName.H5="H5";goog.dom.TagName.H6="H6";goog.dom.TagName.HEAD="HEAD";goog.dom.TagName.HEADER="HEADER";goog.dom.TagName.HGROUP="HGROUP";goog.dom.TagName.HR="HR";goog.dom.TagName.HTML="HTML";goog.dom.TagName.I="I";goog.dom.TagName.IFRAME="IFRAME";goog.dom.TagName.IMG="IMG";goog.dom.TagName.INPUT="INPUT";\ngoog.dom.TagName.INS="INS";goog.dom.TagName.ISINDEX="ISINDEX";goog.dom.TagName.KBD="KBD";goog.dom.TagName.KEYGEN="KEYGEN";goog.dom.TagName.LABEL="LABEL";goog.dom.TagName.LEGEND="LEGEND";goog.dom.TagName.LI="LI";goog.dom.TagName.LINK="LINK";goog.dom.TagName.MAIN="MAIN";goog.dom.TagName.MAP="MAP";goog.dom.TagName.MARK="MARK";goog.dom.TagName.MATH="MATH";goog.dom.TagName.MENU="MENU";goog.dom.TagName.MENUITEM="MENUITEM";goog.dom.TagName.META="META";goog.dom.TagName.METER="METER";\ngoog.dom.TagName.NAV="NAV";goog.dom.TagName.NOFRAMES="NOFRAMES";goog.dom.TagName.NOSCRIPT="NOSCRIPT";goog.dom.TagName.OBJECT="OBJECT";goog.dom.TagName.OL="OL";goog.dom.TagName.OPTGROUP="OPTGROUP";goog.dom.TagName.OPTION="OPTION";goog.dom.TagName.OUTPUT="OUTPUT";goog.dom.TagName.P="P";goog.dom.TagName.PARAM="PARAM";goog.dom.TagName.PICTURE="PICTURE";goog.dom.TagName.PRE="PRE";goog.dom.TagName.PROGRESS="PROGRESS";goog.dom.TagName.Q="Q";goog.dom.TagName.RP="RP";goog.dom.TagName.RT="RT";\ngoog.dom.TagName.RTC="RTC";goog.dom.TagName.RUBY="RUBY";goog.dom.TagName.S="S";goog.dom.TagName.SAMP="SAMP";goog.dom.TagName.SCRIPT="SCRIPT";goog.dom.TagName.SECTION="SECTION";goog.dom.TagName.SELECT="SELECT";goog.dom.TagName.SMALL="SMALL";goog.dom.TagName.SOURCE="SOURCE";goog.dom.TagName.SPAN="SPAN";goog.dom.TagName.STRIKE="STRIKE";goog.dom.TagName.STRONG="STRONG";goog.dom.TagName.STYLE="STYLE";goog.dom.TagName.SUB="SUB";goog.dom.TagName.SUMMARY="SUMMARY";goog.dom.TagName.SUP="SUP";\ngoog.dom.TagName.SVG="SVG";goog.dom.TagName.TABLE="TABLE";goog.dom.TagName.TBODY="TBODY";goog.dom.TagName.TD="TD";goog.dom.TagName.TEMPLATE="TEMPLATE";goog.dom.TagName.TEXTAREA="TEXTAREA";goog.dom.TagName.TFOOT="TFOOT";goog.dom.TagName.TH="TH";goog.dom.TagName.THEAD="THEAD";goog.dom.TagName.TIME="TIME";goog.dom.TagName.TITLE="TITLE";goog.dom.TagName.TR="TR";goog.dom.TagName.TRACK="TRACK";goog.dom.TagName.TT="TT";goog.dom.TagName.U="U";goog.dom.TagName.UL="UL";goog.dom.TagName.VAR="VAR";\ngoog.dom.TagName.VIDEO="VIDEO";goog.dom.TagName.WBR="WBR";goog.labs={};goog.labs.userAgent={};const module$contents$goog$labs$userAgent_USE_CLIENT_HINTS_OVERRIDE="",module$contents$goog$labs$userAgent_USE_CLIENT_HINTS=!1;let module$contents$goog$labs$userAgent_forceClientHintsInTests=!1;goog.labs.userAgent.setUseClientHintsForTesting=a=>{module$contents$goog$labs$userAgent_forceClientHintsInTests=a};\nconst module$contents$goog$labs$userAgent_useClientHintsRuntimeOverride=module$contents$goog$labs$userAgent_USE_CLIENT_HINTS_OVERRIDE?!!goog.getObjectByName(module$contents$goog$labs$userAgent_USE_CLIENT_HINTS_OVERRIDE):!1;goog.labs.userAgent.useClientHints=()=>module$contents$goog$labs$userAgent_USE_CLIENT_HINTS||module$contents$goog$labs$userAgent_useClientHintsRuntimeOverride||module$contents$goog$labs$userAgent_forceClientHintsInTests;goog.labs.userAgent.util={};const module$contents$goog$labs$userAgent$util_ASSUME_CLIENT_HINTS_SUPPORT=!1;function module$contents$goog$labs$userAgent$util_getNativeUserAgentString(){var a=module$contents$goog$labs$userAgent$util_getNavigator();return a&&(a=a.userAgent)?a:""}function module$contents$goog$labs$userAgent$util_getNativeUserAgentData(){const a=module$contents$goog$labs$userAgent$util_getNavigator();return a?a.userAgentData||null:null}\nfunction module$contents$goog$labs$userAgent$util_getNavigator(){return goog.global.navigator}let module$contents$goog$labs$userAgent$util_userAgentInternal=null,module$contents$goog$labs$userAgent$util_userAgentDataInternal=module$contents$goog$labs$userAgent$util_getNativeUserAgentData();\nfunction module$contents$goog$labs$userAgent$util_setUserAgent(a){module$contents$goog$labs$userAgent$util_userAgentInternal="string"===typeof a?a:module$contents$goog$labs$userAgent$util_getNativeUserAgentString()}function module$contents$goog$labs$userAgent$util_getUserAgent(){return null==module$contents$goog$labs$userAgent$util_userAgentInternal?module$contents$goog$labs$userAgent$util_getNativeUserAgentString():module$contents$goog$labs$userAgent$util_userAgentInternal}\nfunction module$contents$goog$labs$userAgent$util_setUserAgentData(a){module$contents$goog$labs$userAgent$util_userAgentDataInternal=a}function module$contents$goog$labs$userAgent$util_resetUserAgentData(){module$contents$goog$labs$userAgent$util_userAgentDataInternal=module$contents$goog$labs$userAgent$util_getNativeUserAgentData()}function module$contents$goog$labs$userAgent$util_getUserAgentData(){return module$contents$goog$labs$userAgent$util_userAgentDataInternal}\nfunction module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(a){if(!(0,goog.labs.userAgent.useClientHints)())return!1;const b=module$contents$goog$labs$userAgent$util_getUserAgentData();return b?b.brands.some(({brand:c})=>c&&(0,goog.string.internal.contains)(c,a)):!1}function module$contents$goog$labs$userAgent$util_matchUserAgent(a){const b=module$contents$goog$labs$userAgent$util_getUserAgent();return(0,goog.string.internal.contains)(b,a)}\nfunction module$contents$goog$labs$userAgent$util_matchUserAgentIgnoreCase(a){const b=module$contents$goog$labs$userAgent$util_getUserAgent();return(0,goog.string.internal.caseInsensitiveContains)(b,a)}function module$contents$goog$labs$userAgent$util_extractVersionTuples(a){const b=RegExp("([A-Z][\\\\w ]+)/([^\\\\s]+)\\\\s*(?:\\\\((.*?)\\\\))?","g"),c=[];let d;for(;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c}goog.labs.userAgent.util.ASSUME_CLIENT_HINTS_SUPPORT=module$contents$goog$labs$userAgent$util_ASSUME_CLIENT_HINTS_SUPPORT;\ngoog.labs.userAgent.util.extractVersionTuples=module$contents$goog$labs$userAgent$util_extractVersionTuples;goog.labs.userAgent.util.getNativeUserAgentString=module$contents$goog$labs$userAgent$util_getNativeUserAgentString;goog.labs.userAgent.util.getUserAgent=module$contents$goog$labs$userAgent$util_getUserAgent;goog.labs.userAgent.util.getUserAgentData=module$contents$goog$labs$userAgent$util_getUserAgentData;goog.labs.userAgent.util.matchUserAgent=module$contents$goog$labs$userAgent$util_matchUserAgent;\ngoog.labs.userAgent.util.matchUserAgentDataBrand=module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand;goog.labs.userAgent.util.matchUserAgentIgnoreCase=module$contents$goog$labs$userAgent$util_matchUserAgentIgnoreCase;goog.labs.userAgent.util.resetUserAgentData=module$contents$goog$labs$userAgent$util_resetUserAgentData;goog.labs.userAgent.util.setUserAgent=module$contents$goog$labs$userAgent$util_setUserAgent;goog.labs.userAgent.util.setUserAgentData=module$contents$goog$labs$userAgent$util_setUserAgentData;var module$exports$goog$labs$userAgent$highEntropy$highEntropyValue={AsyncValue:class{getIfLoaded(){}load(){}},HighEntropyValue:class{constructor(a){this.key_=a;this.promise_=this.value_=void 0;this.pending_=!1}getIfLoaded(){if(module$contents$goog$labs$userAgent$util_getUserAgentData())return this.value_}async load(){const a=module$contents$goog$labs$userAgent$util_getUserAgentData();if(a)return this.promise_||(this.pending_=!0,this.promise_=(async()=>{try{return this.value_=(await a.getHighEntropyValues([this.key_]))[this.key_]}finally{this.pending_=\n!1}})()),await this.promise_}resetForTesting(){if(this.pending_)throw Error("Unsafe call to resetForTesting");this.value_=this.promise_=void 0;this.pending_=!1}},Version:class{constructor(a){this.versionString_=a}toVersionStringForLogging(){return this.versionString_}isAtLeast(a){return 0<=(0,goog.string.internal.compareVersions)(this.versionString_,a)}}};var module$exports$goog$labs$userAgent$highEntropy$highEntropyData={};module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList=new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.HighEntropyValue("fullVersionList");module$exports$goog$labs$userAgent$highEntropy$highEntropyData.platformVersion=new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.HighEntropyValue("platformVersion");goog.labs.userAgent.browser={};const module$contents$goog$labs$userAgent$browser_Brand={ANDROID_BROWSER:"Android Browser",CHROMIUM:"Chromium",EDGE:"Microsoft Edge",FIREFOX:"Firefox",IE:"Internet Explorer",OPERA:"Opera",SAFARI:"Safari",SILK:"Silk"};goog.labs.userAgent.browser.Brand=module$contents$goog$labs$userAgent$browser_Brand;\nfunction module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(a=!1){if(module$contents$goog$labs$userAgent$util_ASSUME_CLIENT_HINTS_SUPPORT)return!0;if(!a&&!(0,goog.labs.userAgent.useClientHints)())return!1;a=module$contents$goog$labs$userAgent$util_getUserAgentData();return!!a&&0<a.brands.length}\nfunction module$contents$goog$labs$userAgent$browser_hasFullVersionList(){return module$contents$goog$labs$userAgent$browser_isAtLeast(module$contents$goog$labs$userAgent$browser_Brand.CHROMIUM,98)}function module$contents$goog$labs$userAgent$browser_matchOpera(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Opera")}\nfunction module$contents$goog$labs$userAgent$browser_matchIE(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Trident")||module$contents$goog$labs$userAgent$util_matchUserAgent("MSIE")}function module$contents$goog$labs$userAgent$browser_matchEdgeHtml(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Edge")}\nfunction module$contents$goog$labs$userAgent$browser_matchEdgeChromium(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(module$contents$goog$labs$userAgent$browser_Brand.EDGE):module$contents$goog$labs$userAgent$util_matchUserAgent("Edg/")}\nfunction module$contents$goog$labs$userAgent$browser_matchOperaChromium(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(module$contents$goog$labs$userAgent$browser_Brand.OPERA):module$contents$goog$labs$userAgent$util_matchUserAgent("OPR")}\nfunction module$contents$goog$labs$userAgent$browser_matchFirefox(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Firefox")||module$contents$goog$labs$userAgent$util_matchUserAgent("FxiOS")}\nfunction module$contents$goog$labs$userAgent$browser_matchSafari(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Safari")&&!(module$contents$goog$labs$userAgent$browser_matchChrome()||module$contents$goog$labs$userAgent$browser_matchCoast()||module$contents$goog$labs$userAgent$browser_matchOpera()||module$contents$goog$labs$userAgent$browser_matchEdgeHtml()||module$contents$goog$labs$userAgent$browser_matchEdgeChromium()||module$contents$goog$labs$userAgent$browser_matchOperaChromium()||\nmodule$contents$goog$labs$userAgent$browser_matchFirefox()||module$contents$goog$labs$userAgent$browser_isSilk()||module$contents$goog$labs$userAgent$util_matchUserAgent("Android"))}function module$contents$goog$labs$userAgent$browser_matchCoast(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Coast")}\nfunction module$contents$goog$labs$userAgent$browser_matchIosWebview(){return(module$contents$goog$labs$userAgent$util_matchUserAgent("iPad")||module$contents$goog$labs$userAgent$util_matchUserAgent("iPhone"))&&!module$contents$goog$labs$userAgent$browser_matchSafari()&&!module$contents$goog$labs$userAgent$browser_matchChrome()&&!module$contents$goog$labs$userAgent$browser_matchCoast()&&!module$contents$goog$labs$userAgent$browser_matchFirefox()&&module$contents$goog$labs$userAgent$util_matchUserAgent("AppleWebKit")}\nfunction module$contents$goog$labs$userAgent$browser_matchChrome(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(module$contents$goog$labs$userAgent$browser_Brand.CHROMIUM):(module$contents$goog$labs$userAgent$util_matchUserAgent("Chrome")||module$contents$goog$labs$userAgent$util_matchUserAgent("CriOS"))&&!module$contents$goog$labs$userAgent$browser_matchEdgeHtml()||module$contents$goog$labs$userAgent$browser_isSilk()}\nfunction module$contents$goog$labs$userAgent$browser_matchAndroidBrowser(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Android")&&!(module$contents$goog$labs$userAgent$browser_matchChrome()||module$contents$goog$labs$userAgent$browser_matchFirefox()||module$contents$goog$labs$userAgent$browser_matchOpera()||module$contents$goog$labs$userAgent$browser_isSilk())}const module$contents$goog$labs$userAgent$browser_isOpera=module$contents$goog$labs$userAgent$browser_matchOpera;\ngoog.labs.userAgent.browser.isOpera=module$contents$goog$labs$userAgent$browser_matchOpera;const module$contents$goog$labs$userAgent$browser_isIE=module$contents$goog$labs$userAgent$browser_matchIE;goog.labs.userAgent.browser.isIE=module$contents$goog$labs$userAgent$browser_matchIE;const module$contents$goog$labs$userAgent$browser_isEdge=module$contents$goog$labs$userAgent$browser_matchEdgeHtml;goog.labs.userAgent.browser.isEdge=module$contents$goog$labs$userAgent$browser_matchEdgeHtml;\nconst module$contents$goog$labs$userAgent$browser_isEdgeChromium=module$contents$goog$labs$userAgent$browser_matchEdgeChromium;goog.labs.userAgent.browser.isEdgeChromium=module$contents$goog$labs$userAgent$browser_matchEdgeChromium;const module$contents$goog$labs$userAgent$browser_isOperaChromium=module$contents$goog$labs$userAgent$browser_matchOperaChromium;goog.labs.userAgent.browser.isOperaChromium=module$contents$goog$labs$userAgent$browser_matchOperaChromium;\nconst module$contents$goog$labs$userAgent$browser_isFirefox=module$contents$goog$labs$userAgent$browser_matchFirefox;goog.labs.userAgent.browser.isFirefox=module$contents$goog$labs$userAgent$browser_matchFirefox;const module$contents$goog$labs$userAgent$browser_isSafari=module$contents$goog$labs$userAgent$browser_matchSafari;goog.labs.userAgent.browser.isSafari=module$contents$goog$labs$userAgent$browser_matchSafari;const module$contents$goog$labs$userAgent$browser_isCoast=module$contents$goog$labs$userAgent$browser_matchCoast;\ngoog.labs.userAgent.browser.isCoast=module$contents$goog$labs$userAgent$browser_matchCoast;const module$contents$goog$labs$userAgent$browser_isIosWebview=module$contents$goog$labs$userAgent$browser_matchIosWebview;goog.labs.userAgent.browser.isIosWebview=module$contents$goog$labs$userAgent$browser_matchIosWebview;const module$contents$goog$labs$userAgent$browser_isChrome=module$contents$goog$labs$userAgent$browser_matchChrome;goog.labs.userAgent.browser.isChrome=module$contents$goog$labs$userAgent$browser_matchChrome;\nconst module$contents$goog$labs$userAgent$browser_isAndroidBrowser=module$contents$goog$labs$userAgent$browser_matchAndroidBrowser;goog.labs.userAgent.browser.isAndroidBrowser=module$contents$goog$labs$userAgent$browser_matchAndroidBrowser;function module$contents$goog$labs$userAgent$browser_isSilk(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Silk")}goog.labs.userAgent.browser.isSilk=module$contents$goog$labs$userAgent$browser_isSilk;\nfunction module$contents$goog$labs$userAgent$browser_createVersionMap(a){const b={};a.forEach(c=>{b[c[0]]=c[1]});return c=>b[c.find(d=>d in b)]||""}\nfunction module$contents$goog$labs$userAgent$browser_getVersion(){var a=module$contents$goog$labs$userAgent$util_getUserAgent();if(module$contents$goog$labs$userAgent$browser_matchIE())return module$contents$goog$labs$userAgent$browser_getIEVersion(a);a=module$contents$goog$labs$userAgent$util_extractVersionTuples(a);const b=module$contents$goog$labs$userAgent$browser_createVersionMap(a);return module$contents$goog$labs$userAgent$browser_matchOpera()?b(["Version","Opera"]):module$contents$goog$labs$userAgent$browser_matchEdgeHtml()?\nb(["Edge"]):module$contents$goog$labs$userAgent$browser_matchEdgeChromium()?b(["Edg"]):module$contents$goog$labs$userAgent$browser_isSilk()?b(["Silk"]):module$contents$goog$labs$userAgent$browser_matchChrome()?b(["Chrome","CriOS","HeadlessChrome"]):(a=a[2])&&a[1]||""}goog.labs.userAgent.browser.getVersion=module$contents$goog$labs$userAgent$browser_getVersion;\nfunction module$contents$goog$labs$userAgent$browser_isVersionOrHigher(a){return 0<=(0,goog.string.internal.compareVersions)(module$contents$goog$labs$userAgent$browser_getVersion(),a)}goog.labs.userAgent.browser.isVersionOrHigher=module$contents$goog$labs$userAgent$browser_isVersionOrHigher;\nfunction module$contents$goog$labs$userAgent$browser_getIEVersion(a){var b=/rv: *([\\d\\.]*)/.exec(a);if(b&&b[1])return b[1];b="";const c=/MSIE +([\\d\\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\\/(\\d.\\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0"}else b="7.0";else b=c[1];return b}\nfunction module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a){var b=module$contents$goog$labs$userAgent$util_getUserAgent();if(a===module$contents$goog$labs$userAgent$browser_Brand.IE)return module$contents$goog$labs$userAgent$browser_matchIE()?module$contents$goog$labs$userAgent$browser_getIEVersion(b):"";b=module$contents$goog$labs$userAgent$util_extractVersionTuples(b);const c=module$contents$goog$labs$userAgent$browser_createVersionMap(b);switch(a){case module$contents$goog$labs$userAgent$browser_Brand.OPERA:if(module$contents$goog$labs$userAgent$browser_matchOpera())return c(["Version",\n"Opera"]);if(module$contents$goog$labs$userAgent$browser_matchOperaChromium())return c(["OPR"]);break;case module$contents$goog$labs$userAgent$browser_Brand.EDGE:if(module$contents$goog$labs$userAgent$browser_matchEdgeHtml())return c(["Edge"]);if(module$contents$goog$labs$userAgent$browser_matchEdgeChromium())return c(["Edg"]);break;case module$contents$goog$labs$userAgent$browser_Brand.CHROMIUM:if(module$contents$goog$labs$userAgent$browser_matchChrome())return c(["Chrome","CriOS","HeadlessChrome"])}return a===\nmodule$contents$goog$labs$userAgent$browser_Brand.FIREFOX&&module$contents$goog$labs$userAgent$browser_matchFirefox()||a===module$contents$goog$labs$userAgent$browser_Brand.SAFARI&&module$contents$goog$labs$userAgent$browser_matchSafari()||a===module$contents$goog$labs$userAgent$browser_Brand.ANDROID_BROWSER&&module$contents$goog$labs$userAgent$browser_matchAndroidBrowser()||a===module$contents$goog$labs$userAgent$browser_Brand.SILK&&module$contents$goog$labs$userAgent$browser_isSilk()?(a=b[2])&&\na[1]||"":""}\nfunction module$contents$goog$labs$userAgent$browser_versionOf_(a){if(module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()&&a!==module$contents$goog$labs$userAgent$browser_Brand.SILK){var b=module$contents$goog$labs$userAgent$util_getUserAgentData().brands.find(({brand:c})=>c===a);if(!b||!b.version)return NaN;b=b.version.split(".")}else{b=module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a);if(""===b)return NaN;b=b.split(".")}return 0===b.length?NaN:Number(b[0])}\nfunction module$contents$goog$labs$userAgent$browser_isAtLeast(a,b){(0,goog.asserts.assert)(Math.floor(b)===b,"Major version must be an integer");return module$contents$goog$labs$userAgent$browser_versionOf_(a)>=b}goog.labs.userAgent.browser.isAtLeast=module$contents$goog$labs$userAgent$browser_isAtLeast;\nfunction module$contents$goog$labs$userAgent$browser_isAtMost(a,b){(0,goog.asserts.assert)(Math.floor(b)===b,"Major version must be an integer");return module$contents$goog$labs$userAgent$browser_versionOf_(a)<=b}goog.labs.userAgent.browser.isAtMost=module$contents$goog$labs$userAgent$browser_isAtMost;\nclass module$contents$goog$labs$userAgent$browser_HighEntropyBrandVersion{constructor(a,b,c){this.brand_=a;this.version_=new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.Version(c);this.useUach_=b}getIfLoaded(){if(this.useUach_){var a=module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.getIfLoaded();if(void 0!==a)return a=a.find(({brand:b})=>this.brand_===b),(0,goog.asserts.assertExists)(a),new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.Version(a.version)}if(module$contents$goog$labs$userAgent$browser_preUachHasLoaded)return this.version_}async load(){if(this.useUach_){var a=\nawait module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.load();if(void 0!==a)return a=a.find(({brand:b})=>this.brand_===b),(0,goog.asserts.assertExists)(a),new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.Version(a.version)}else await 0;module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!0;return this.version_}}let module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!1;\nasync function module$contents$goog$labs$userAgent$browser_loadFullVersions(){module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(!0)&&await module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.load();module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!0}goog.labs.userAgent.browser.loadFullVersions=module$contents$goog$labs$userAgent$browser_loadFullVersions;\ngoog.labs.userAgent.browser.resetForTesting=()=>{module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!1;module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.resetForTesting()};\nfunction module$contents$goog$labs$userAgent$browser_fullVersionOf(a){let b="";module$contents$goog$labs$userAgent$browser_hasFullVersionList()||(b=module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a));const c=a!==module$contents$goog$labs$userAgent$browser_Brand.SILK&&module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(!0);if(c){if(!module$contents$goog$labs$userAgent$util_getUserAgentData().brands.find(({brand:d})=>d===a))return}else if(""===b)return;return new module$contents$goog$labs$userAgent$browser_HighEntropyBrandVersion(a,\nc,b)}goog.labs.userAgent.browser.fullVersionOf=module$contents$goog$labs$userAgent$browser_fullVersionOf;\nfunction module$contents$goog$labs$userAgent$browser_getVersionStringForLogging(a){if(module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(!0)){var b=module$contents$goog$labs$userAgent$browser_fullVersionOf(a);if(b){if(b=b.getIfLoaded())return b.toVersionStringForLogging();b=module$contents$goog$labs$userAgent$util_getUserAgentData().brands.find(({brand:c})=>c===a);(0,goog.asserts.assertExists)(b);return b.version}return""}return module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a)}\ngoog.labs.userAgent.browser.getVersionStringForLogging=module$contents$goog$labs$userAgent$browser_getVersionStringForLogging;goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};const module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE={};\nclass module$contents$goog$html$SafeHtml_SafeHtml{constructor(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=b===module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}toString(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}static unwrap(a){return module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(a).toString()}static unwrapTrustedHTML(a){if(a instanceof module$contents$goog$html$SafeHtml_SafeHtml&&\na.constructor===module$contents$goog$html$SafeHtml_SafeHtml)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail(`expected object of type SafeHtml, got \'${a}\' of type `+goog.typeOf(a));return"type_error:SafeHtml"}static htmlEscape(a){if(a instanceof module$contents$goog$html$SafeHtml_SafeHtml)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a))}static htmlEscapePreservingNewlines(a){if(a instanceof\nmodule$contents$goog$html$SafeHtml_SafeHtml)return a;a=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(a);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(a)))}static htmlEscapePreservingNewlinesAndSpaces(a){if(a instanceof module$contents$goog$html$SafeHtml_SafeHtml)return a;a=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(a);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(a)))}static comment(a){return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\\x3c!--"+\ngoog.string.internal.htmlEscape(a)+"--\\x3e")}static create(a,b,c){module$contents$goog$html$SafeHtml_SafeHtml.verifyTagName(String(a));return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)}static verifyTagName(a){if(!module$contents$goog$html$SafeHtml_VALID_NAMES_IN_TAG.test(a))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Invalid tag name <${a}>.`:"");if(a.toUpperCase()in module$contents$goog$html$SafeHtml_NOT_ALLOWED_TAG_NAMES)throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\n`Tag name <${a}> is not allowed for SafeHtml.`:"");}static createIframe(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);const e={};e.src=a||null;e.srcdoc=b&&module$contents$goog$html$SafeHtml_SafeHtml.unwrap(b);a=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes(e,{sandbox:""},c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)}static createSandboxIframe(a,b,c,d){if(!module$contents$goog$html$SafeHtml_SafeHtml.canUseSandboxIframe())throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\n"The browser does not support sandboxed iframes.":"");const e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox="";a=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes(e,{},c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)}static canUseSandboxIframe(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype}static createScriptSrc(a,b){goog.html.TrustedResourceUrl.unwrap(a);\na=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes({src:a},{},b);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",a)}static createScript(a,b){for(var c in b)if(Object.prototype.hasOwnProperty.call(b,c)){var d=c.toLowerCase();if("language"==d||"src"==d||"text"==d)throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Cannot set "${d}" attribute`:"");}c="";a=module$contents$goog$array_concat(a);for(d=0;d<\na.length;d++)c+=module$contents$goog$html$SafeScript_SafeScript.unwrap(a[d]);a=module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",b,a)}static createStyle(a,b){b=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes({type:"text/css"},{},b);let c="";a=module$contents$goog$array_concat(a);for(let d=0;d<a.length;d++)c+=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.unwrap(a[d]);\na=module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",b,a)}static createMetaRefresh(a,b){a=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(module$contents$goog$labs$userAgent$browser_matchIE()||module$contents$goog$labs$userAgent$browser_matchEdgeHtml())&&goog.string.internal.contains(a,";")&&(a="\'"+a.replace(/\'/g,"%27")+"\'");return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",\n{"http-equiv":"refresh",content:(b||0)+"; url="+a})}static join(a,b){a=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(a);const c=[],d=e=>{Array.isArray(e)?e.forEach(d):(e=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(e),c.push(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(e)))};b.forEach(d);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c.join(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(a)))}static concat(a){return module$contents$goog$html$SafeHtml_SafeHtml.join(module$contents$goog$html$SafeHtml_SafeHtml.EMPTY,\nArray.prototype.slice.call(arguments))}static createSafeHtmlSecurityPrivateDoNotAccessOrElse(a){const b=goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createHTML(a):a;return new module$contents$goog$html$SafeHtml_SafeHtml(a,module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE)}static createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(a,b,c){b=`<${a}`+module$contents$goog$html$SafeHtml_SafeHtml.stringifyAttributes(a,b);null==c?c=[]:Array.isArray(c)||(c=[c]);goog.dom.tags.isVoidTag(a.toLowerCase())?\n(goog.asserts.assert(!c.length,`Void tag <${a}> does not allow content.`),b+=">"):(c=module$contents$goog$html$SafeHtml_SafeHtml.concat(c),b+=">"+module$contents$goog$html$SafeHtml_SafeHtml.unwrap(c)+"</"+a+">");return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b)}static stringifyAttributes(a,b){let c="";if(b)for(let d in b)if(Object.prototype.hasOwnProperty.call(b,d)){if(!module$contents$goog$html$SafeHtml_VALID_NAMES_IN_TAG.test(d))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\n`Invalid attribute name "${d}".`:"");const e=b[d];null!=e&&(c+=" "+module$contents$goog$html$SafeHtml_getAttrNameAndValue(a,d,e))}return c}static combineAttributes(a,b,c){const d={};for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=a[e]);for(const f in b)Object.prototype.hasOwnProperty.call(b,f)&&(goog.asserts.assert(f.toLowerCase()==f,"Must be lower case"),d[f]=b[f]);if(c)for(const f in c)if(Object.prototype.hasOwnProperty.call(c,\nf)){e=f.toLowerCase();if(e in a)throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Cannot override "${e}" attribute, got "`+f+\'" with value "\'+c[f]+\'"\':"");e in b&&delete d[e];d[f]=c[f]}return d}}module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES=goog.DEBUG;module$contents$goog$html$SafeHtml_SafeHtml.SUPPORT_STYLE_ATTRIBUTE=!0;module$contents$goog$html$SafeHtml_SafeHtml.from=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape;\nconst module$contents$goog$html$SafeHtml_VALID_NAMES_IN_TAG=/^[a-zA-Z0-9-]+$/,module$contents$goog$html$SafeHtml_URL_ATTRIBUTES={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0},module$contents$goog$html$SafeHtml_NOT_ALLOWED_TAG_NAMES={[goog.dom.TagName.APPLET]:!0,[goog.dom.TagName.BASE]:!0,[goog.dom.TagName.EMBED]:!0,[goog.dom.TagName.IFRAME]:!0,[goog.dom.TagName.LINK]:!0,[goog.dom.TagName.MATH]:!0,[goog.dom.TagName.META]:!0,[goog.dom.TagName.OBJECT]:!0,[goog.dom.TagName.SCRIPT]:!0,\n[goog.dom.TagName.STYLE]:!0,[goog.dom.TagName.SVG]:!0,[goog.dom.TagName.TEMPLATE]:!0};\nfunction module$contents$goog$html$SafeHtml_getAttrNameAndValue(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if("style"==b.toLowerCase())if(module$contents$goog$html$SafeHtml_SafeHtml.SUPPORT_STYLE_ATTRIBUTE)c=module$contents$goog$html$SafeHtml_getStyleValue(c);else throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\'Attribute "style" not supported.\':"");else{if(/^on/i.test(b))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\n`Attribute "${b}`+\'" requires goog.string.Const value, "\'+c+\'" given.\':"");if(b.toLowerCase()in module$contents$goog$html$SafeHtml_URL_ATTRIBUTES)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);else if("string"===typeof c)c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Attribute "${b}" on tag "${a}`+\'" requires goog.html.SafeUrl, goog.string.Const, or string, value "\'+\nc+\'" given.\':"");}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());goog.asserts.assert("string"===typeof c||"number"===typeof c,"String or number value expected, got "+typeof c+" with value: "+c);return`${b}="`+goog.string.internal.htmlEscape(String(c))+\'"\'}\nfunction module$contents$goog$html$SafeHtml_getStyleValue(a){if(!goog.isObject(a))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\'The "style" attribute requires goog.html.SafeStyle or map of style properties, \'+typeof a+" given: "+a:"");a instanceof module$contents$goog$html$SafeStyle_SafeStyle||(a=module$contents$goog$html$SafeStyle_SafeStyle.create(a));return module$contents$goog$html$SafeStyle_SafeStyle.unwrap(a)}\nmodule$contents$goog$html$SafeHtml_SafeHtml.DOCTYPE_HTML=function(){return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>")}();module$contents$goog$html$SafeHtml_SafeHtml.EMPTY=new module$contents$goog$html$SafeHtml_SafeHtml(goog.global.trustedTypes&&goog.global.trustedTypes.emptyHTML||"",module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE);module$contents$goog$html$SafeHtml_SafeHtml.BR=function(){return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>")}();\ngoog.html.SafeHtml=module$contents$goog$html$SafeHtml_SafeHtml;goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};\ngoog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue(function(){if(goog.DEBUG&&"undefined"===typeof document)return!1;var a=document.createElement("div"),b=document.createElement("div");b.appendChild(document.createElement("div"));a.appendChild(b);if(goog.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(module$contents$goog$html$SafeHtml_SafeHtml.EMPTY);return!b.parentElement});\ngoog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS&&a.tagName){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+a.tagName+".");}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};\ngoog.dom.safe.setInnerHtmlFromConstant=function(a,b){goog.dom.safe.setInnerHtml(a,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Constant HTML to be immediatelly used."),goog.string.Const.unwrap(b)))};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setFormElementAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLFormElement(a).action=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setButtonFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLButtonElement(a).formAction=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setInputFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLInputElement(a).formAction=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=module$contents$goog$html$SafeStyle_SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b))};\ngoog.dom.safe.setAnchorHref=function(a,b){goog.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setAudioSrc=function(a,b){goog.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:audio\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setVideoSrc=function(a,b){goog.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:video\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setEmbedSrc=function(a,b){goog.dom.asserts.assertIsHTMLEmbedElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setFrameSrc=function(a,b){goog.dom.asserts.assertIsHTMLFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};\ngoog.dom.safe.setIframeSrc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};goog.dom.safe.setIframeSrcdoc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.asserts.assertIsHTMLLinkElement(a);a.rel=c;goog.string.internal.caseInsensitiveContains(c,"stylesheet")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,\'URL must be TrustedResourceUrl because "rel" contains "stylesheet"\'),a.href=goog.html.TrustedResourceUrl.unwrap(b),(b=goog.dom.safe.getStyleNonce(a.ownerDocument&&a.ownerDocument.defaultView))&&a.setAttribute("nonce",b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrap(b):\nb instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrap(b):goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitizeAssertUnchanged(b))};goog.dom.safe.setObjectData=function(a,b){goog.dom.asserts.assertIsHTMLObjectElement(a);a.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);goog.dom.safe.setNonceForScriptElement_(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};\ngoog.dom.safe.setScriptContent=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);goog.dom.safe.setNonceForScriptElement_(a);a.textContent=module$contents$goog$html$SafeScript_SafeScript.unwrapTrustedScript(b)};goog.dom.safe.setNonceForScriptElement_=function(a){const b=goog.dom.safe.getScriptNonce(a.ownerDocument&&a.ownerDocument.defaultView);b&&a.setAttribute("nonce",b)};\ngoog.dom.safe.setLocationHref=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.assignLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(goog.html.SafeUrl.unwrap(b))};\ngoog.dom.safe.replaceLocation=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(goog.html.SafeUrl.unwrap(b))};goog.dom.safe.openInWindow=function(a,b,c,d){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitizeAssertUnchanged(a);b=b||goog.global;c=c instanceof goog.string.Const?goog.string.Const.unwrap(c):c||"";return void 0!==d?b.open(goog.html.SafeUrl.unwrap(a),c,d):b.open(goog.html.SafeUrl.unwrap(a),c)};\ngoog.dom.safe.parseFromStringHtml=function(a,b){return goog.dom.safe.parseFromString(a,b,"text/html")};goog.dom.safe.parseFromString=function(a,b,c){return a.parseFromString(module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b),c)};\ngoog.dom.safe.createImageFromBlob=function(a){if(!/^image\\/.*/g.test(a.type))throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");var b=goog.global.URL.createObjectURL(a);a=new goog.global.Image;a.onload=function(){goog.global.URL.revokeObjectURL(b)};a.src=b;return a};goog.dom.safe.createContextualFragment=function(a,b){return a.createContextualFragment(module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b))};\ngoog.dom.safe.getScriptNonce=function(a){return goog.dom.safe.getNonce_("script[nonce]",a)};goog.dom.safe.getStyleNonce=function(a){return goog.dom.safe.getNonce_(\'style[nonce],link[rel="stylesheet"][nonce]\',a)};goog.dom.safe.NONCE_PATTERN_=/^[\\w+/_-]+[=]{0,2}$/;goog.dom.safe.getNonce_=function(a,b){b=(b||goog.global).document;return b.querySelector?(a=b.querySelector(a))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.dom.safe.NONCE_PATTERN_.test(a)?a:"":""};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\\u00a0",ZERO_WIDTH_SPACE:"\\u200b"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;\ngoog.string.subs=function(a,b){const c=a.split("%s");let d="";const e=Array.prototype.slice.call(arguments,1);for(;e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\\s\\xa0]+/g," ").replace(/^\\s+|\\s+$/g,"")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;\ngoog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\\t\\n\\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};\ngoog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\\u0080"<=a&&"\\ufffd">=a};goog.string.stripNewlines=function(a){return a.replace(/(\\r\\n|\\r|\\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\\r\\n|\\r|\\n)/g,"\\n")};goog.string.normalizeWhitespace=function(a){return a.replace(/\\xa0|\\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\\xa0|[ \\t]+/g," ")};\ngoog.string.collapseBreakingSpaces=function(a){return a.replace(/[\\t\\r\\n ]+/g," ").replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g,"")};goog.string.trim=goog.string.internal.trim;goog.string.trimLeft=function(a){return a.replace(/^[\\s\\xa0]+/,"")};goog.string.trimRight=function(a){return a.replace(/[\\s\\xa0]+$/,"")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;\ngoog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;const d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length);for(let g=0;g<f;g++){c=d[g];const h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\\d+|\\D+/g)};\ngoog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\\d+|\\.\\d+|\\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\\+/g," "))};goog.string.newLineToBr=goog.string.internal.newLineToBr;\ngoog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};\ngoog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};\ngoog.string.unescapeEntitiesUsingDom_=function(a,b){const c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":\'"\'};let d;d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(e,f){let g=c[e];if(g)return g;"#"==f.charAt(0)&&(f=Number("0"+f.slice(1)),isNaN(f)||(g=String.fromCharCode(f)));g||(goog.dom.safe.setInnerHtml(d,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."),\ne+" ")),g=d.firstChild.nodeValue.slice(0,-1));return c[e]=g})};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(b,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return\'"\';default:return"#"!=c.charAt(0)||(c=Number("0"+c.slice(1)),isNaN(c))?b:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};\ngoog.string.preserveSpaces=function(a){return a.replace(/(^|[\\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){const c=b.length;for(let d=0;d<c;d++){const e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};\ngoog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\\x00":"\\\\0","\\b":"\\\\b","\\f":"\\\\f","\\n":"\\\\n","\\r":"\\\\r","\\t":"\\\\t","\\v":"\\\\x0B",\'"\':\'\\\\"\',"\\\\":"\\\\\\\\","<":"\\\\u003C"};goog.string.jsEscapeCache_={"\'":"\\\\\'"};\ngoog.string.quote=function(a){a=String(a);const b=[\'"\'];for(let c=0;c<a.length;c++){const d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push(\'"\');return b.join("")};goog.string.escapeString=function(a){const b=[];for(let c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};\ngoog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];let b;const c=a.charCodeAt(0);if(31<c&&127>c)b=a;else{if(256>c){if(b="\\\\x",16>c||256<c)b+="0"}else b="\\\\u",4096>c&&(b+="0");b+=c.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=b};goog.string.contains=goog.string.internal.contains;\ngoog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){let d=a;0<=b&&b<a.length&&0<c&&(d=a.slice(0,b)+a.slice(b+c));return d};goog.string.remove=function(a,b){return a.replace(b,"")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,"")};\ngoog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,c.replace(/\\$/g,"$$$$"))};goog.string.regExpEscape=function(a){return String(a).replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g,"\\\\$1").replace(/\\x08/g,"\\\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};\ngoog.string.padNumber=function(a,b,c){if(!Number.isFinite(a))return String(a);a=void 0!==c?a.toFixed(c):String(a);c=a.indexOf(".");-1===c&&(c=a.length);const d="-"===a[0]?"-":"";d&&(a=a.substring(1));return d+goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};\ngoog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){let b=0;for(let c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){const b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};\ngoog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\\-([a-z])/g,function(b,c){return c.toUpperCase()})};goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};goog.string.toTitleCase=function(a,b){b="string"===typeof b?goog.string.regExpEscape(b):"\\\\s";return a.replace(new RegExp("(^"+(b?"|["+b+"]+":"")+")([a-z])","g"),function(c,d,e){return d+e.toUpperCase()})};\ngoog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.slice(1)).toLowerCase()};goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return"string"===typeof a?/^\\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);const d=[];for(;0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};\ngoog.string.lastComponent=function(a,b){if(b)"string"==typeof b&&(b=[b]);else return a;let c=-1;for(let d=0;d<b.length;d++){if(""==b[d])continue;const e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};\ngoog.string.editDistance=function(a,b){const c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.string.path={};goog.string.path.baseName=function(a){const b=a.lastIndexOf("/")+1;return a.slice(b)};goog.string.path.basename=goog.string.path.baseName;goog.string.path.dirname=function(a){const b=a.lastIndexOf("/")+1;a=a.slice(0,b);/^\\/+$/.test(a)||(a=a.replace(/\\/+$/,""));return a};goog.string.path.extension=function(a){a=goog.string.path.baseName(a).replace(/\\.+/g,".");const b=a.lastIndexOf(".");return 0>=b?"":a.slice(b+1)};\ngoog.string.path.join=function(a){let b=arguments[0];for(let c=1;c<arguments.length;c++){const d=arguments[c];b=goog.string.startsWith(d,"/")?d:""==b||goog.string.endsWith(b,"/")?b+d:b+("/"+d)}return b};\ngoog.string.path.normalizePath=function(a){if(""==a)return".";let b="";goog.string.startsWith(a,"/")&&(b="/",goog.string.startsWith(a,"//")&&!goog.string.startsWith(a,"///")&&(b="//"));a=a.split("/");const c=[];for(let d=0;d<a.length;d++){const e=a[d];""!=e&&"."!=e&&(".."!=e||!b&&!c.length||".."==module$contents$goog$array_peek(c)?c.push(e):c.pop())}return b+c.join("/")||"."};goog.string.path.split=function(a){const b=goog.string.path.dirname(a);a=goog.string.path.baseName(a);return[b,a]};const DEBUG_WASI$$module$src$filesystem$wasi=!1;function assertLeadingSlash$$module$src$filesystem$wasi(a){return/^\\//g.test(a)?a:`/${a}`}function removeLeadingSlash$$module$src$filesystem$wasi(a){return a.replace(/^\\//g,"")}function shouldOpenReader$$module$src$filesystem$wasi(a){return(a&(WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants))!==goog.global.BigInt(0)}\nfunction performanceNowPoly$$module$src$filesystem$wasi(){if("undefined"===typeof performance||"undefined"===typeof performance.now){const a=Date.now();return Date.now()-a}return performance.now()}function concatUint8Arrays$$module$src$filesystem$wasi(a){var b=a.reduce((d,e)=>d+e.length,0);if(0!==a.length){b=new Uint8Array(b);var c=0;for(const d of a)b.set(d,c),c+=d.length;return b}}\nconst WASI$$module$src$filesystem$wasi=function({}){this.fd=Array.from({length:4});this.fd[0]={fd:0,path:"/dev/stdin",seekPos:goog.global.BigInt(0),buffers:[]};this.fd[1]={fd:1,path:"/dev/stdout",seekPos:goog.global.BigInt(0),buffers:[]};this.fd[2]={fd:2,path:"/dev/stderr",seekPos:goog.global.BigInt(0),buffers:[]};this.fd[3]={fd:3,path:"/",seekPos:goog.global.BigInt(0),buffers:[]};this.getMemory=this.getMemory.bind(this);this.CPUTIME_START=0};\nWASI$$module$src$filesystem$wasi.prototype.start=function(a){this.CPUTIME_START=performanceNowPoly$$module$src$filesystem$wasi();a.exports._start()};WASI$$module$src$filesystem$wasi.prototype.getImports=function(a){const b={};a=WebAssembly.Module.imports(a);for(const c of a)"function"===c.kind&&c.module.startsWith("wasi_")&&("object"!==typeof b[c.module]&&(b[c.module]={}),b[c.module][c.name]=this[c.name].bind(this));return b};\nWASI$$module$src$filesystem$wasi.prototype.setMemory=function(a){this.memory=a};WASI$$module$src$filesystem$wasi.prototype.getMemory=function(){this.view&&this.view.buffer&&this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer));return this.view};WASI$$module$src$filesystem$wasi.prototype.msToNs=function(a){const b=Math.trunc(a);a=goog.global.BigInt(Math.round(1E6*(a-b)));return goog.global.BigInt(b)*goog.global.BigInt(1E6)+a};\nWASI$$module$src$filesystem$wasi.prototype.now=function(a){switch(a){case WASI_CLOCK_MONOTONIC$$module$src$filesystem$constants:return Math.floor(performanceNowPoly$$module$src$filesystem$wasi());case WASI_CLOCK_REALTIME$$module$src$filesystem$constants:return this.msToNs(Date.now());case WASI_CLOCK_PROCESS_CPUTIME_ID$$module$src$filesystem$constants:case WASI_CLOCK_THREAD_CPUTIME_ID$$module$src$filesystem$constants:return Math.floor(performanceNowPoly$$module$src$filesystem$wasi()-this.CPUTIME_START);\ndefault:return 0}};WASI$$module$src$filesystem$wasi.prototype.args_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("args_get",a,b,module$src$filesystem$constants);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.args_sizes_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("args_sizes_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.clock_res_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("args_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.clock_time_get=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("clock_time_get",a,b,c,arguments);const d=this.getMemory(),e=this.now(a);d.setBigUint64(c,goog.global.BigInt(e),!0);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.environ_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("environ_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.environ_sizes_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("environ_sizes_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_advise=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_advise",a,b,c,d,arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_allocate=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_allocate",a,b,c,arguments);return WASI_ENOSYS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_close=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_close",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_datasync=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_datasync",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_fdstat_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_fdstat_get",a,b,arguments);const c=this.getMemory();c.setUint8(b+4,WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants);c.setUint16(b+2,0,!0);c.setUint16(b+4,0,!0);c.setBigUint64(b+8,goog.global.BigInt(RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants),!0);c.setBigUint64(b+8+8,goog.global.BigInt(RIGHTS_REGULAR_FILE_INHERITING$$module$src$filesystem$constants),\n!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_fdstat_set_flags=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_fdstat_set_flags",a,b,arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_fdstat_set_rights=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_fdstat_set_rights",a,b,c,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_filestat_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_filestat_get",a,b,arguments);let c=0;this.fd[a]&&(c=this.fd[a].buffers.reduce(function(e,f){return e+(null==f?void 0:f.byteLength)?null==f?void 0:f.byteLength:0},0));const d=this.getMemory();d.setBigUint64(b,goog.global.BigInt(a),!0);b+=8;d.setBigUint64(b,goog.global.BigInt(a),!0);b+=8;d.setUint8(b,WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants);b+=8;d.setBigUint64(b,\ngoog.global.BigInt(1),!0);b+=8;d.setBigUint64(b,goog.global.BigInt(c),!0);b+=8;d.setBigUint64(b,this.msToNs(this.CPUTIME_START),!0);b+=8;d.setBigUint64(b,this.msToNs(this.CPUTIME_START),!0);d.setBigUint64(b+8,this.msToNs(this.CPUTIME_START),!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_filestat_set_size=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_filestat_set_size",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_filestat_set_times=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_filestat_set_times",a,b,c,d,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_pread=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_pread",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_prestat_dir_name=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_prestat_dir_name",a,b,c,this.fd[a]);if(!this.fd[a]&&!this.fd[a-1])return WASI_EBADF$$module$src$filesystem$constants;({path:c}=this.fd[a]);a=this.getMemory();c=encoder$$module$src$utils$text_encoders.encode(c);(new Uint8Array(a.buffer)).set(c,b);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_prestat_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_prestat_get",a,b,this.fd[a]);if(!this.fd[a])return WASI_EBADF$$module$src$filesystem$constants;var {path:c}=this.fd[a];a=this.getMemory();c=encoder$$module$src$utils$text_encoders.encode(c);a.setUint8(b,WASI_PREOPENTYPE_DIR$$module$src$filesystem$constants);a.setUint32(b+4,c.byteLength,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_pwrite=function(a,b,c,d,e){console.log("fd_pwrite",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_read=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_read",a,b,c,d,arguments);const e=this.fd[a]&&this.fd[a].buffers;var f=e.reduce((n,p)=>n+p.length,0);const g=this.getMemory();if(e&&0!==e.length){var h=Number(this.fd[a].seekPos),k=0,l=!1;if(h>=f)return k=g.getUint32(b,!0),g.setUint8(k,"\\x00"),g.setUint32(d,0,!0),WASI_ESUCCESS$$module$src$filesystem$constants;for(f=0;f<c;f++){var m=b+8*f;const n=g.getUint32(m,!0);m=g.getUint32(m+\n4,!0);l||(k+=m,Array.from({length:m},(p,q)=>q).reduce((p,q)=>{if(l)return p;const [w,r]=p;let u=p=0,A=!1,x=0,t;if(0===q)for(;!A;)t=e[p]?e[p].byteLength:0,x<=h&&t+x>h?(A=!0,u=h-x):(x+=t,p+=1);else p=w,u=r;e[p]?(g.setUint8(n+q,e[p][u]),u+1>=e[p].byteLength?(p=w+1,u=0):u+=1):(g.setUint8(n+q,"\\x00"),h+=q,l=!0);return[p,u]},[0,0]),l||(h+=m))}this.fd[a].seekPos=goog.global.BigInt(h);g.setUint32(d,k,!0);return WASI_ESUCCESS$$module$src$filesystem$constants}console.error("Reading non existent file",a,this.fd[a])};\nWASI$$module$src$filesystem$wasi.prototype.fd_readdir=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_readdir",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_renumber=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_renumber",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_seek=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_seek",a,b,c,d,arguments);const e=this.getMemory();switch(c){case WASI_WHENCE_CUR$$module$src$filesystem$constants:var f;this.fd[a].seekPos=(null!=(f=this.fd[a].seekPos)?f:goog.global.BigInt(0))+goog.global.BigInt(b);break;case WASI_WHENCE_END$$module$src$filesystem$constants:f=(this.fd[a].buffers||[]).reduce((g,h)=>g+h.length,0);this.fd[a].seekPos=BigInt(f)+BigInt(b);break;\ncase WASI_WHENCE_SET$$module$src$filesystem$constants:this.fd[a].seekPos=BigInt(b)}e.setBigUint64(d,this.fd[a].seekPos,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_sync=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_sync",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_tell=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_tell",a,b,arguments);const c=this.getMemory();this.fd[a].seekPos||(this.fd[a].seekPos=goog.global.BigInt(0));c.setBigUint64(b,this.fd[a].seekPos,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_write=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_write",{fd:a,iovs:b,iovsLength:c,nwritten:d});let e=!1;const f=this.getMemory();this.fd[a].buffers=this.fd[a].buffers||[];this.fd[a].seekPos===goog.global.BigInt(0)&&0<this.fd[a].buffers.length&&(e=!0);let g=0;for(let l=0;l<c;l++){var h=b+8*l,k=f.getUint32(h,!0);h=f.getUint32(h+4,!0);g+=h;k=new Uint8Array(f.buffer,k,h);e?this.fd[a].buffers.unshift(k.slice(0,h)):this.fd[a].buffers.push(k.slice(0,\nh))}this.fd[a].seekPos+=goog.global.BigInt(g);f.setUint32(d,g,!0);[1,2].includes(a)&&console.log(decoder$$module$src$utils$text_encoders.decode(concatUint8Arrays$$module$src$filesystem$wasi(this.fd[a].buffers)));return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_create_directory=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_create_directory",a,b,c,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_filestat_get=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_filestat_get",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_filestat_set_times=function(a,b,c,d,e,f,g){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_filestat_set_times",a,b,c,d,e,f,g,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_link=function(a,b,c,d,e,f,g){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_link",a,b,c,d,e,f,g,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_open=function(a,b,c,d,e,f,g,h,k){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_open",a,b,c,d,e,f,g,h,k,arguments);const l=this.getMemory();var m=(this.fd[a]||{path:"/"}).path,n=new Uint8Array(l.buffer,c,d);n=decoder$$module$src$utils$text_encoders.decode(n);const p=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(goog.string.path.join(3===a?"":m,n)));DEBUG_WASI$$module$src$filesystem$wasi&&console.log(";; opening path",\np,"withREader",shouldOpenReader$$module$src$filesystem$wasi(f));if(p.startsWith("/..")||"/._"===p||"/.AppleDouble"===p)return WASI_EBADF$$module$src$filesystem$constants;(m=Object.values(this.fd).find(q=>q.path===p&&Array.isArray(q.buffers)))?n=m.fd:(n=this.fd.length,this.fd[n]={fd:n});this.fd[n]={...this.fd[n],path:p,type:"file",seekPos:goog.global.BigInt(0),buffers:m?this.fd[n].buffers:[]};shouldOpenReader$$module$src$filesystem$wasi(f)&&DEBUG_WASI$$module$src$filesystem$wasi&&console.log("should open a read handle for",\np);l.setUint32(k,n,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_readlink=function(a,b,c,d,e,f){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_readlink",a,b,c,d,e,f,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_remove_directory=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_remove_directory",a,b,c);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_rename=function(a,b,c,d,e,f){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_rename",a,b,c,d,e,f,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_symlink=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_symlink",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_unlink_file=function(a,b,c){3<a&&DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_unlink_file",a,b,c,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.poll_oneoff=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("poll_oneoff",a,b,c,d,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.proc_exit=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("proc_exit",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.proc_raise=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("proc_raise",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.random_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("random_get",a,b);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.sched_yield=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sched_yield",arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.sock_recv=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sock_recv",arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.sock_send=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sock_send",arguments);return WASI_ENOSYS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.sock_shutdown=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sock_shutdown",arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.findBuffers=function(a){const b=Object.values(this.fd).find(({path:c})=>c===a);return b&&b.buffers};\nWASI$$module$src$filesystem$wasi.prototype.readdir=function(a){const b=(assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a))+"/").replace("//","/"),c=[];Object.values(this.fd).forEach(({path:d})=>!/\\//g.test(d.replace(b,""))&&c.push(d));return c.map(d=>removeLeadingSlash$$module$src$filesystem$wasi(d.replace(b,""))).filter(d=>!!d)};\nWASI$$module$src$filesystem$wasi.prototype.writeFile=function(a,b){const c=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));a=Object.keys(this.fd).length;const d=Object.values(this.fd).find(({path:e})=>e===c);this.fd[a]={fd:a,path:c,seekPos:goog.global.BigInt(0),buffers:[b]};d&&delete this.fd[d]};\nWASI$$module$src$filesystem$wasi.prototype.appendFile=function(a,b){var c=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));(c=this.findBuffers(c))?c.push(b):console.error(`Can\'t append to non-existing file ${a}`)};WASI$$module$src$filesystem$wasi.prototype.readFile=function(a){a=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));if(a=this.findBuffers(a))return concatUint8Arrays$$module$src$filesystem$wasi(a)};\nWASI$$module$src$filesystem$wasi.prototype.readStdOut=function(){const a=Object.values(this.fd[0]);return concatUint8Arrays$$module$src$filesystem$wasi(a&&a.buffers||[])};WASI$$module$src$filesystem$wasi.prototype.unlink=function(a){const b=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));(a=Object.values(this.fd).find(({path:c})=>c===b))?delete this.fd[a]:console.error(`While trying to unlink ${b}, path not found`)};\nWASI$$module$src$filesystem$wasi.prototype.mkdir=function(a){const b=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a)),c=[];Object.values(this.fd).forEach(({path:d})=>d.startsWith(b)&&c.push(d));0<c.length?console.warn(`mkdir: path ${a} already exists`):(a=Object.keys(this.fd).length,this.fd[a]={fd:a,path:b})};var module$src$filesystem$wasi={};module$src$filesystem$wasi.WASI=WASI$$module$src$filesystem$wasi;function clearArray$$module$src$utils$clear_array(a){for(;0<a.length;)a.pop()}var module$src$utils$clear_array={};module$src$utils$clear_array.clearArray=clearArray$$module$src$utils$clear_array;const CompressionMethod$$module$src$zlib$zlib={DEFLATE:8,RESERVED:15};var module$src$zlib$zlib={};module$src$zlib$zlib.CompressionMethod=CompressionMethod$$module$src$zlib$zlib;/*\n zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */\nfunction Huffman$$module$src$zlib$huffman(a){const b=a.length;let c=0,d=Number.POSITIVE_INFINITY,e,f,g,h;let k,l;for(k=0;k<b;++k)a[k]>c&&(c=a[k]),a[k]<d&&(d=a[k]);const m=1<<c,n=new Uint32Array(m);e=1;f=0;for(g=2;e<=c;){for(k=0;k<b;++k)if(a[k]===e){h=0;var p=f;for(l=0;l<e;++l)h=h<<1|p&1,p>>=1;p=e<<16|k;for(l=h;l<m;l+=g)n[l]=p;++f}++e;f<<=1;g<<=1}return[n,c,d]}var module$src$zlib$huffman={};module$src$zlib$huffman.Huffman=Huffman$$module$src$zlib$huffman;const ZLIB_RAW_INFLATE_BUFFER_SIZE$$module$src$zlib$rawinflate=32768;\nfunction RawInflate$$module$src$zlib$rawinflate(a,b){this.blocks=[];this.bufferSize=ZLIB_RAW_INFLATE_BUFFER_SIZE$$module$src$zlib$rawinflate;this.bitsbuflen=this.bitsbuf=this.ip=this.totalpos=0;this.input=new Uint8Array(a);this.bfinal=!1;this.bufferType=RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE;this.resize=!1;if(b||!(b={}))b.index&&(this.ip=b.index),b.bufferSize&&(this.bufferSize=b.bufferSize),b.bufferType&&(this.bufferType=b.bufferType),b.resize&&(this.resize=b.resize);switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:this.op=\nRawInflate$$module$src$zlib$rawinflate.MaxBackwardLength;this.output=new Uint8Array(RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength+this.bufferSize+RawInflate$$module$src$zlib$rawinflate.MaxCopyLength);break;case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:this.op=0;this.output=new Uint8Array(this.bufferSize);break;default:throw Error("invalid inflate mode");}}RawInflate$$module$src$zlib$rawinflate.BufferType={BLOCK:0,ADAPTIVE:1};\nRawInflate$$module$src$zlib$rawinflate.prototype.decompress=function(){for(;!this.bfinal;)this.parseBlock();switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:return this.concatBufferBlock();case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:return this.concatBufferDynamic();default:throw Error("invalid inflate mode");}};RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength=32768;RawInflate$$module$src$zlib$rawinflate.MaxCopyLength=258;\nRawInflate$$module$src$zlib$rawinflate.Order=function(a){return new Uint16Array(a)}([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);RawInflate$$module$src$zlib$rawinflate.LengthCodeTable=function(a){return new Uint16Array(a)}([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258]);RawInflate$$module$src$zlib$rawinflate.LengthExtraTable=function(a){return new Uint8Array(a)}([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0]);\nRawInflate$$module$src$zlib$rawinflate.DistCodeTable=function(a){return new Uint16Array(a)}([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]);RawInflate$$module$src$zlib$rawinflate.DistExtraTable=function(a){return new Uint8Array(a)}([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\nRawInflate$$module$src$zlib$rawinflate.FixedLiteralLengthTable=function(a){return a}(function(){const a=new Uint8Array(288);let b,c;b=0;for(c=a.length;b<c;++b)a[b]=143>=b?8:255>=b?9:279>=b?7:8;return Huffman$$module$src$zlib$huffman(a)}());RawInflate$$module$src$zlib$rawinflate.FixedDistanceTable=function(a){return a}(function(){const a=new Uint8Array(30);let b,c;b=0;for(c=a.length;b<c;++b)a[b]=5;return Huffman$$module$src$zlib$huffman(a)}());\nRawInflate$$module$src$zlib$rawinflate.prototype.parseBlock=function(){let a=this.readBits(3);a&1&&(this.bfinal=!0);a>>>=1;switch(a){case 0:this.parseUncompressedBlock();break;case 1:this.parseFixedHuffmanBlock();break;case 2:this.parseDynamicHuffmanBlock();break;default:throw Error("unknown BTYPE: "+a);}};\nRawInflate$$module$src$zlib$rawinflate.prototype.readBits=function(a){let b=this.bitsbuf,c=this.bitsbuflen;const d=this.input;let e=this.ip;if(e+(a-c+7>>3)>=d.length)throw Error("input buffer is broken");for(;c<a;)b|=d[e++]<<c,c+=8;this.bitsbuf=b>>>a;this.bitsbuflen=c-a;this.ip=e;return b&(1<<a)-1};\nRawInflate$$module$src$zlib$rawinflate.prototype.readCodeByTable=function(a){let b=this.bitsbuf,c=this.bitsbuflen;var d=this.input;let e=this.ip;var f=d.length;const g=a[0];for(a=a[1];c<a&&!(e>=f);)b|=d[e++]<<c,c+=8;d=g[b&(1<<a)-1];f=d>>>16;if(f>c)throw Error("invalid code length: "+f);this.bitsbuf=b>>f;this.bitsbuflen=c-f;this.ip=e;return d&65535};\nRawInflate$$module$src$zlib$rawinflate.prototype.parseUncompressedBlock=function(){const a=this.input;let b=this.ip,c=this.output,d=this.op;var e=a.length;let f;const g=c.length;this.bitsbuflen=this.bitsbuf=0;if(b+1>=e)throw Error("invalid uncompressed block header: LEN");f=a[b++]|a[b++]<<8;if(b+1>=e)throw Error("invalid uncompressed block header: NLEN");e=a[b++]|a[b++]<<8;if(f===~e)throw Error("invalid uncompressed block header: length verify");if(b+f>a.length)throw Error("input buffer is broken");\nswitch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:for(;d+f>c.length;)e=g-d,f-=e,c.set(a.subarray(b,b+e),d),d+=e,b+=e,this.op=d,c=this.expandBufferBlock(),d=this.op;break;case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:for(;d+f>c.length;)c=this.expandBufferAdaptive({fixRatio:2});break;default:throw Error("invalid inflate mode");}c.set(a.subarray(b,b+f),d);this.ip=b+f;this.op=d+f;this.output=c};\nRawInflate$$module$src$zlib$rawinflate.prototype.parseFixedHuffmanBlock=function(){switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(RawInflate$$module$src$zlib$rawinflate.FixedLiteralLengthTable,RawInflate$$module$src$zlib$rawinflate.FixedDistanceTable);break;case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:this.decodeHuffmanBlock(RawInflate$$module$src$zlib$rawinflate.FixedLiteralLengthTable,RawInflate$$module$src$zlib$rawinflate.FixedDistanceTable);\nbreak;default:throw Error("invalid inflate mode");}};\nRawInflate$$module$src$zlib$rawinflate.prototype.parseDynamicHuffmanBlock=function(){var a=this.readBits(5)+257,b=this.readBits(5)+1,c=this.readBits(4)+4,d=new Uint8Array(RawInflate$$module$src$zlib$rawinflate.Order.length);let e;for(e=0;e<c;++e)d[RawInflate$$module$src$zlib$rawinflate.Order[e]]=this.readBits(3);d=Huffman$$module$src$zlib$huffman(d);c=new Uint8Array(a+b);e=0;for(b=a+b;e<b;){var f=this.readCodeByTable(d);switch(f){case 16:for(f=3+this.readBits(2);f--;)c[e++]=g;break;case 17:for(f=\n3+this.readBits(3);f--;)c[e++]=0;var g=0;break;case 18:for(f=11+this.readBits(7);f--;)c[e++]=0;g=0;break;default:g=c[e++]=f}}g=Huffman$$module$src$zlib$huffman(c.subarray(0,a));a=Huffman$$module$src$zlib$huffman(c.subarray(a));switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(g,a);break;case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:this.decodeHuffmanBlock(g,a);break;default:throw Error("invalid inflate mode");}};\nRawInflate$$module$src$zlib$rawinflate.prototype.decodeHuffmanBlock=function(a,b){let c=this.output,d=this.op;this.currentLitlenTable=a;const e=c.length-RawInflate$$module$src$zlib$rawinflate.MaxCopyLength;var f;let g,h;const k=RawInflate$$module$src$zlib$rawinflate.LengthCodeTable,l=RawInflate$$module$src$zlib$rawinflate.LengthExtraTable,m=RawInflate$$module$src$zlib$rawinflate.DistCodeTable,n=RawInflate$$module$src$zlib$rawinflate.DistExtraTable;for(;256!==(f=this.readCodeByTable(a));)if(256>f)d>=\ne&&(this.op=d,c=this.expandBufferBlock(),d=this.op),c[d++]=f;else for(f-=257,h=k[f],0<l[f]&&(h+=this.readBits(l[f])),f=this.readCodeByTable(b),g=m[f],0<n[f]&&(g+=this.readBits(n[f])),d>=e&&(this.op=d,c=this.expandBufferBlock(),d=this.op);h--;)c[d]=c[d++-g];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=d};\nRawInflate$$module$src$zlib$rawinflate.prototype.decodeHuffmanAdaptive=function(a,b){let c=this.output,d=this.op;this.currentLitlenTable=a;let e=c.length;var f;let g,h;const k=RawInflate$$module$src$zlib$rawinflate.LengthCodeTable,l=RawInflate$$module$src$zlib$rawinflate.LengthExtraTable,m=RawInflate$$module$src$zlib$rawinflate.DistCodeTable,n=RawInflate$$module$src$zlib$rawinflate.DistExtraTable;for(;256!==(f=this.readCodeByTable(a));)if(256>f)d>=e&&(c=this.expandBufferAdaptive(),e=c.length),c[d++]=\nf;else for(f-=257,h=k[f],0<l[f]&&(h+=this.readBits(l[f])),f=this.readCodeByTable(b),g=m[f],0<n[f]&&(g+=this.readBits(n[f])),d+h>e&&(c=this.expandBufferAdaptive(),e=c.length);h--;)c[d]=c[d++-g];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=d};\nRawInflate$$module$src$zlib$rawinflate.prototype.expandBufferBlock=function(a){a=new Uint8Array(this.op-RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength);const b=this.op-RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength,c=this.output;a.set(c.subarray(RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength,a.length));this.blocks.push(a);this.totalpos+=a.length;c.set(c.subarray(b,b+RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength));this.op=RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength;\nreturn c};RawInflate$$module$src$zlib$rawinflate.prototype.expandBufferAdaptive=function(a){let b=Math.trunc(this.input.length/this.ip+1);const c=this.input,d=this.output;a&&("number"===typeof a.fixRatio&&(b=a.fixRatio),"number"===typeof a.addRatio&&(b+=a.addRatio));2>b?(a=(c.length-this.ip)/this.currentLitlenTable[2],a=Math.trunc(a/2*258),a=a<d.length?d.length+a:d.length<<1):a=d.length*b;a=new Uint8Array(a);a.set(d);return this.output=a};\nRawInflate$$module$src$zlib$rawinflate.prototype.concatBufferBlock=function(){let a=0;const b=this.output,c=this.blocks;let d;const e=new Uint8Array(this.totalpos+(this.op-RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength));let f,g,h,k;if(0===c.length)return this.output.subarray(RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength,this.op);f=0;for(g=c.length;f<g;++f)for(d=c[f],h=0,k=d.length;h<k;++h)e[a++]=d[h];f=RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength;for(g=this.op;f<\ng;++f)e[a++]=b[f];this.blocks=[];return this.buffer=e};RawInflate$$module$src$zlib$rawinflate.prototype.concatBufferDynamic=function(){let a;const b=this.op;this.resize?(a=new Uint8Array(b),a.set(this.output.subarray(0,b))):a=this.output.subarray(0,b);return this.buffer=a};var module$src$zlib$rawinflate={};module$src$zlib$rawinflate.RawInflate=RawInflate$$module$src$zlib$rawinflate;function Util$$module$src$zlib$util(){}Util$$module$src$zlib$util.stringToByteArray=function(a){a=[...a];let b,c;b=0;for(c=a.length;b<c;b++)a[b]=(a[b].charPointAt(0)&255)>>>0;return new Uint8Array([a])};var module$src$zlib$util={};module$src$zlib$util.Util=Util$$module$src$zlib$util;function Adler32$$module$src$zlib$adler32(a){"string"===typeof a&&(a=Util$$module$src$zlib$util.stringToByteArray(a));return Adler32$$module$src$zlib$adler32.update(1,a)}Adler32$$module$src$zlib$adler32.update=function(a,b){let c=a&65535;a=a>>>16&65535;let d=b.length,e,f=0;for(;0<d;){e=d>Adler32$$module$src$zlib$adler32.OptimizationParameter?Adler32$$module$src$zlib$adler32.OptimizationParameter:d;d-=e;do c+=b[f++],a+=c;while(--e);c%=65521;a%=65521}return(a<<16|c)>>>0};\nAdler32$$module$src$zlib$adler32.OptimizationParameter=1024;var module$src$zlib$adler32={};module$src$zlib$adler32.Adler32=Adler32$$module$src$zlib$adler32;function Inflate$$module$src$zlib$inflate(a,b){this.input=a;this.ip=0;if(b||!(b={}))b.index&&(this.ip=b.index),b.verify&&(this.verify=b.verify);const c=a[this.ip++],d=a[this.ip++];switch(c&15){case CompressionMethod$$module$src$zlib$zlib.DEFLATE:this.method=CompressionMethod$$module$src$zlib$zlib.DEFLATE;break;default:throw Error("unsupported compression method");}if(0!==((c<<8)+d)%31)throw Error("invalid fcheck flag:"+((c<<8)+d)%31);if(d&32)throw Error("fdict flag is not supported");this.rawinflate=\nnew RawInflate$$module$src$zlib$rawinflate(a,{index:this.ip,bufferSize:b.bufferSize,bufferType:b.bufferType,resize:b.resize})}Inflate$$module$src$zlib$inflate.BufferType=RawInflate$$module$src$zlib$rawinflate.BufferType;\nInflate$$module$src$zlib$inflate.prototype.decompress=function(){var a=this.input;const b=this.rawinflate.decompress();this.ip=this.rawinflate.ip;if(this.verify&&(a=(a[this.ip++]<<24|a[this.ip++]<<16|a[this.ip++]<<8|a[this.ip++])>>>0,a!==Adler32$$module$src$zlib$adler32(b)))throw Error("invalid adler-32 checksum");return b};var module$src$zlib$inflate={};module$src$zlib$inflate.Inflate=Inflate$$module$src$zlib$inflate;const PAGE_SIZE$$module$src$module=65536,PAGES_PER_MB$$module$src$module=16,csoundWasiJsMessageCallback$$module$src$module=({memory:a,messagePort:b,streamBuffer:c})=>function(d,e,f,g){if(a){d=new Uint8Array(a.buffer,g,f);d=uint2String$$module$src$utils$text_encoders(d);var h=/\\n$/g.test(d);e=/^\\n/g.test(d);var k=d.split("\\n").filter(m=>0<m.length),l=[];if(0===k.length&&h||e)l.push(c.join("")),clearArray$$module$src$utils$clear_array(c);k.forEach((m,n)=>{n+1===k.length?h?0===n?(l.push(c.join("")+m),\nclearArray$$module$src$utils$clear_array(c)):l.push(m):c.push(m):0===n?(l.push(c.join("")+m),clearArray$$module$src$utils$clear_array(c)):l.push(m)});l.forEach(m=>{m.replace(/(\\r\\n|\\n|\\r)/gm,"")&&b.post({log:m})})}},assertPluginExports$$module$src$module=a=>{if(a&&"object"===typeof a&&"object"===typeof a.exports){if(a.exports.__wasm_call_ctors){if(a.exports.csoundModuleCreate||a.exports.csound_opcode_init||a.exports.csound_fgen_init)return!0;console.error(a.exports,"A csound plugin turns out to be neither a plugin, opcode or module.\\nPerhaps csdl.h or module.h wasn\'t imported correctly?");\nreturn!1}console.error("A csound plugin didn\'t export __wasm_call_ctors.\\nPlease re-run wasm-ld with either --export-all or include --export=__wasm_call_ctors");return!1}console.error("Error instantiating a csound plugin, instance and/or export is missing!");return!1},getBinaryHeaderData$$module$src$module=a=>{function b(){let l=0,m=1;for(;;){const n=a[c++];l+=(n&127)*m;m*=128;if(!(n&128))break}return l}1836278016!==(new Uint32Array((new Uint8Array(a.subarray(0,24))).buffer))[0]&&console.error("Wasm magic number is missing!");\nif(0!==a[8])return logWasmModule$$module$src$logger("Dylink section wasn\'t found in wasm binary, assuming static wasm."),"static";let c=9;const d=b();c++;(0,goog.asserts.assert)(a[c]==="d".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="y".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="l".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="i".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="n".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="k".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]===\n".".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="0".codePointAt(0));c+=3;const e=b(),f=b(),g=b(),h=b(),k=b();return{sectionSize:d,memorySize:e,memoryAlign:f,neededDynlibsCount:k,tableSize:g,tableAlign:h}},loadStaticWasm$$module$src$module=async({wasmBytes:a,wasi:b,messagePort:c})=>{const d=await WebAssembly.compile(a);a=new WebAssembly.Memory({initial:16384});const e=b.getImports(d);e.env=e.env||{};e.env.csoundLoadModules=()=>0;e.env.memory=a;e.env.csoundWasiJsMessageCallback=csoundWasiJsMessageCallback$$module$src$module({memory:e.env.memory,\nstreamBuffer:[],messagePort:c});c=await WebAssembly.instantiate(d,e);b.setMemory(a);b.start(c);c.exports.__wasi_js_csoundSetMessageStringCallback();return[c,b]};\nvar $jscompDefaultExport$$module$src$module=async function({wasmDataURI:a,withPlugins:b=[],messagePort:c}){var d={};const e=new WASI$$module$src$filesystem$wasi({preopens:{"/":"/"}});a=new Uint8Array(a);a=(new Inflate$$module$src$zlib$inflate(a)).decompress();var f=getBinaryHeaderData$$module$src$module(a);if("static"===f)return await loadStaticWasm$$module$src$module({messagePort:c,wasmBytes:a,wasmFs:d,wasi:e});const {memorySize:g,memoryAlign:h,tableSize:k}=f;b=await b.reduce(async(t,z)=>{t=await t;\nlet v,y;try{v=new Uint8Array(z),y=getBinaryHeaderData$$module$src$module(v)}catch(C){console.error("Error in plugin",C)}y&&t.push({headerData:y,wasmPluginBytes:v});return t},[]);var l=128*PAGES_PER_MB$$module$src$module;d=Math.ceil((g+h)/PAGE_SIZE$$module$src$module);f=Math.ceil(b.reduce((t,{headerData:z})=>"static"===z?0:t+(z.memorySize+h),0)/PAGE_SIZE$$module$src$module);f=d+f+l;const m=new WebAssembly.Memory({initial:f,maximum:1024*PAGES_PER_MB$$module$src$module}),n=new WebAssembly.Table({initial:k+\n1,element:"anyfunc"});e.setMemory(m);const p=new WebAssembly.Global({value:"i32",mutable:!0},f*PAGE_SIZE$$module$src$module);f=new WebAssembly.Global({value:"i32",mutable:!0},f*PAGE_SIZE$$module$src$module);l=new WebAssembly.Global({value:"i32",mutable:!1},l);const q=new WebAssembly.Global({value:"i32",mutable:!1},1),w=new WebAssembly.Global({value:"i32",mutable:!0},0);a=await WebAssembly.compile(a);const r=e.getImports(a);let u=[],A=d;r.env=r.env||{};r.env.memory=m;r.env.__indirect_function_table=\nn;r.env.__stack_pointer=p;r.env.__memory_base=l;r.env.__table_base=q;r.env.csoundLoadModules=t=>{u.forEach(z=>{void 0===x?console.error("csound-wasm internal: timing problem detected!"):dlinit$$module$src$dlinit(x,z,n,t)});return 0};r.env._ZTH5errno=function(){};r.env.csoundWasiJsMessageCallback=csoundWasiJsMessageCallback$$module$src$module({memory:m,messagePort:c,streamBuffer:[]});r.env.printDebugCallback=(t,z)=>{t=new Uint8Array(m.buffer,t,z);t=uint2String$$module$src$utils$text_encoders(t);console.log(t)};\nr["GOT.mem"]=r["GOT.mem"]||{};r["GOT.mem"].__heap_base=f;r["GOT.func"]=r["GOT.func"]||{};const x=await WebAssembly.instantiate(a,r);c=Object.assign({},x.exports);a={};a.exports=Object.assign(c,{memory:m});u=await b.reduce(async(t,{headerData:z,wasmPluginBytes:v})=>{t=await t;try{const {memorySize:y,memoryAlign:C,tableSize:F}=z,E=await WebAssembly.compile(v),B=e.getImports(E),G=new WebAssembly.Global({value:"i32",mutable:!1},A*PAGE_SIZE$$module$src$module);n.grow(F);B.env=Object.assign({},B.env);B.env.memory=\nm;B.env.__indirect_function_table=n;B.env.__memory_base=G;B.env.__stack_pointer=p;B.env.__table_base=q;B.env.csoundLoadModules=w;delete B.env.csoundWasiJsMessageCallback;A+=Math.ceil((y+C)/PAGE_SIZE$$module$src$module);const D=await WebAssembly.instantiate(E,B);assertPluginExports$$module$src$module(D)&&(D.exports.__wasm_call_ctors(),t.push(D))}catch(y){console.error("Error while compiling csound-plugin",y)}return t},[]);e.start(a);a.exports.__wasi_js_csoundSetMessageStringCallback();return[a,e]},\nmodule$src$module={};module$src$module.csoundWasiJsMessageCallback=csoundWasiJsMessageCallback$$module$src$module;module$src$module.default=$jscompDefaultExport$$module$src$module;let combined$$module$src$workers$vanilla_worker,audioProcessCallback$$module$src$workers$vanilla_worker=()=>{};\nconst rtmidiQueue$$module$src$workers$vanilla_worker=[],createAudioInputBuffers$$module$src$workers$vanilla_worker=(a,b)=>{for(let c=0;c<b;++c)a.buffers.push(new Float64Array(RING_BUFFER_SIZE$$module$src$constants))},generateAudioFrames$$module$src$workers$vanilla_worker=(a,b)=>{if("realtimePerformanceEnded"!==b.vanillaWorkerState)return audioProcessCallback$$module$src$workers$vanilla_worker(a)},createRealtimeAudioThread$$module$src$workers$vanilla_worker=({libraryCsound:a,wasm:b,workerMessagePort:c,\naudioInputs:d,inputChannelCount:e,outputChannelCount:f,sampleRate:g})=>({csound:h})=>{var k=a.csoundGetInputName(h).includes("adc");g&&a.csoundSetOption(h,`--sr=${g}`);f&&a.csoundSetOption(h,`--nchnls=${f}`);e&&a.csoundSetOption(h,`--nchnls_i=${e}`);const l=a.csoundGetNchnls(h),m=0<e?e:k?a.csoundGetNchnlsInput(h):0,n=a.csoundGet0dBFS(h);k=a.csoundGetSpin(h);const p=a.csoundGetSpout(h),q=a.csoundGetKsmps(h);let w=new Float64Array(b.wasi.memory.buffer,k,q*m),r=new Float64Array(b.wasi.memory.buffer,\np,q*l),u=0,A=0;c.broadcastPlayState("realtimePerformanceStarted");audioProcessCallback$$module$src$workers$vanilla_worker=({numFrames:x})=>{const t=instantiateAudioPacket$$module$src$workers$common_utils(l,x),z=0<d.buffers.length&&d.availableFrames>=x;0<rtmidiQueue$$module$src$workers$vanilla_worker.length&&(rtmidiQueue$$module$src$workers$vanilla_worker.forEach(v=>{a.csoundPushMidiMessage(h,v[0],v[1],v[2])}),clearArray$$module$src$utils$clear_array(rtmidiQueue$$module$src$workers$vanilla_worker));\nfor(let v=0;v<x;v++){A=(A+1)%q;if("realtimePerformanceEnded"===c.vanillaWorkerState)return 0===u&&(a.csoundStop(h),u=a.csoundPerformKsmps(h)),c.broadcastPlayState("realtimePerformanceEnded"),audioProcessCallback$$module$src$workers$vanilla_worker=()=>{},clearArray$$module$src$utils$clear_array(rtmidiQueue$$module$src$workers$vanilla_worker),d.port=void 0,{framesLeft:v};if(0===A&&0===u&&(u=a.csoundPerformKsmps(h),0!==u))return c.broadcastPlayState("realtimePerformanceEnded"),audioProcessCallback$$module$src$workers$vanilla_worker=\n()=>{},clearArray$$module$src$utils$clear_array(rtmidiQueue$$module$src$workers$vanilla_worker),d.port=void 0,{framesLeft:v};0===w.length&&(w=new Float64Array(b.wasi.memory.buffer,a.csoundGetSpin(h),q*m));0===r.length&&(r=new Float64Array(b.wasi.memory.buffer,a.csoundGetSpout(h),q*l));t.forEach((y,C)=>{0<r.length&&(y[v]=(r[A*l+C]||0)/n)});if(z)for(let y=0;y<m;y++)w[A*m+y]=(d.buffers[y][v+d.inputReadIndex%RING_BUFFER_SIZE$$module$src$constants]||0)*n}z&&(d.availableFrames-=x,d.inputReadIndex+=x%RING_BUFFER_SIZE$$module$src$constants);\nreturn{audioPacket:t,framesLeft:0}}},callUncloned$$module$src$workers$vanilla_worker=async(a,b)=>(a=combined$$module$src$workers$vanilla_worker.get(a))&&a.apply({},b||[]),initMessagePort$$module$src$workers$vanilla_worker=({port:a})=>{logVANWorker$$module$src$logger("initMessagePort")();const b=new $jscompDefaultExport$$module$src$utils$message_port_state;b.port=a;b.post=c=>a.postMessage({log:c});b.broadcastPlayState=c=>{b.vanillaWorkerState=c;a.postMessage({playStateChange:c})};b.ready=!0;return b},\ninitRequestPort$$module$src$workers$vanilla_worker=({csoundWorkerFrameRequestPort:a,workerMessagePort:b})=>{logVANWorker$$module$src$logger("initRequestPort")();a.addEventListener("message",c=>{const {framesLeft:d=0,audioPacket:e}=generateAudioFrames$$module$src$workers$vanilla_worker(c.data,b)||{};a.postMessage({numFrames:c.data.numFrames-d,audioPacket:e,...c.data})});a.start();return a},initAudioInputPort$$module$src$workers$vanilla_worker=({port:a})=>{logVANWorker$$module$src$logger("initAudioInputPort")();\nconst b={availableFrames:0,buffers:[],inputReadIndex:0,inputWriteIndex:0,port:a};b.port.addEventListener("message",({data:c})=>{0===b.buffers.length&&createAudioInputBuffers$$module$src$workers$vanilla_worker(b,c.length);b.buffers.forEach((d,e)=>{d.set(c[e],b.inputWriteIndex)});b.inputWriteIndex+=c[0].length;b.availableFrames+=c[0].length;b.inputWriteIndex>=RING_BUFFER_SIZE$$module$src$constants&&(b.inputWriteIndex=0)});b.port.start();return b},initRtMidiEventPort$$module$src$workers$vanilla_worker=\n({rtmidiPort:a})=>{logVANWorker$$module$src$logger("initRtMidiEventPort")();a.addEventListener("message",({data:b})=>{rtmidiQueue$$module$src$workers$vanilla_worker.push(b)});a.start();return a},initialize$$module$src$workers$vanilla_worker=async({audioInputPort:a,inputChannelCount:b,messagePort:c,outputChannelCount:d,requestPort:e,rtmidiPort:f,wasmDataURI:g,wasmTransformerDataURI:h,withPlugins:k=[]})=>{logVANWorker$$module$src$logger("initializing wasm and exposing csoundAPI functions from worker to main")();\nconst l=initMessagePort$$module$src$workers$vanilla_worker({port:c}),m=initAudioInputPort$$module$src$workers$vanilla_worker({port:a});initRequestPort$$module$src$workers$vanilla_worker({csoundWorkerFrameRequestPort:e,workerMessagePort:l});initRtMidiEventPort$$module$src$workers$vanilla_worker({rtmidiPort:f});const [n,p]=await $jscompDefaultExport$$module$src$module({wasmDataURI:g,wasmTransformerDataURI:h,withPlugins:k,messagePort:l});n.wasi=p;const q=$jscompDefaultExport$$module$src$libcsound(n);\na=pipe$$module$node_modules$rambda$dist$rambda_mjs(assoc$$module$node_modules$rambda$dist$rambda_mjs("csoundStart",(r,u)=>handleCsoundStart$$module$src$workers$common_utils(l,q,p,createRealtimeAudioThread$$module$src$workers$vanilla_worker({audioInputs:m,inputChannelCount:b,libraryCsound:q,outputChannelCount:d,wasm:n,wasi:p,workerMessagePort:l}),renderFunction$$module$src$workers$common_utils({inputChannelCount:b,libraryCsound:q,outputChannelCount:d,wasm:n,workerMessagePort:l}))(u)),assoc$$module$node_modules$rambda$dist$rambda_mjs("wasm",\nn))(q);combined$$module$src$workers$vanilla_worker=new Map(Object.entries(a));q.csoundInitialize(0);const w=q.csoundCreate();l.port.addEventListener("message",r=>{r.data&&r.data.newPlayState&&("realtimePerformanceEnded"===r.data.newPlayState&&(q.csoundStop(w),"realtimePerformanceEnded"!==l.vanillaWorkerState&&q.csoundPerformKsmps(w),l.broadcastPlayState("realtimePerformanceEnded")),l.vanillaWorkerState=r.data.newPlayState)});l.port.start();return w};\nexpose$$module$node_modules$comlink$dist$esm$comlink_mjs({initialize:initialize$$module$src$workers$vanilla_worker,callUncloned:callUncloned$$module$src$workers$vanilla_worker});var module$src$workers$vanilla_worker={};}).call(this);\n//# sourceMappingURL=__compiled.vanilla.worker.js.map\n'])),
module$dist$__compiled_vanilla_worker_inline={};module$dist$__compiled_vanilla_worker_inline.default=$jscompDefaultExport$$module$dist$__compiled_vanilla_worker_inline;class VanillaWorkerMainThread$$module$src$mains$vanilla_main{constructor({audioContext:a,audioWorker:b,audioContextIsProvided:c,inputChannelCount:d,outputChannelCount:e}){this.ipcMessagePorts=new IPCMessagePorts$$module$src$mains$messages_main;this.eventPromises=new EventPromises$$module$src$utils$event_promises;this.publicEvents=new PublicEventAPI$$module$src$events(this);b.ipcMessagePorts=this.ipcMessagePorts;b.csoundWorkerMain=this;b.publicEvents=this.publicEvents;this.audioWorker=b;if(this.audioContextIsProvided=
c)this.sampleRate=a.sampleRate;d&&(this.inputChannelCount=d);e&&(this.outputChannelCount=e);this.exportApi={};this.currentPlayState=this.csoundInstance=void 0;this.midiPortStarted=!1;this.onPlayStateChange=this.onPlayStateChange.bind(this)}async terminateInstance(){this.csoundWorker&&(this.csoundWorker.terminate(),delete this.csoundWorker);this.audioWorker&&this.audioWorker.terminateInstance&&(await this.audioWorker.terminateInstance(),delete this.audioWorker.terminateInstance);this.proxyPort&&(this.proxyPort[releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs](),
delete this.proxyPort);this.publicEvents&&this.publicEvents.terminateInstance();Object.keys(this.exportApi).forEach(a=>delete this.exportApi[a]);Object.keys(this).forEach(a=>delete this[a])}get api(){return this.exportApi}handleMidiInput({data:a}){this.ipcMessagePorts.csoundMainRtMidiPort.postMessage&&this.ipcMessagePorts.csoundMainRtMidiPort.postMessage(a)}async prepareRealtimePerformance(){if(this.csoundInstance){this.audioWorker.sampleRate=await this.exportApi.getSr(this.csoundInstance);var a=
await this.exportApi.getInputName(this.csoundInstance);this.audioWorker.isRequestingInput=a.includes("adc");this.audioWorker.isRequestingMidi=await this.exportApi._isRequestingRtMidiInput(this.csoundInstance);this.audioWorker.outputsCount=await this.exportApi.getNchnls(this.csoundInstance);this.audioWorker.inputsCount=this.audioWorker.isRequestingInput?1:0;logVANMain$$module$src$logger("vars for rtPerf set")()}else console.error("fatal error: csound instance not found?")}async onPlayStateChange(a){if(this.publicEvents){this.currentPlayState=
a;switch(a){case "realtimePerformanceStarted":logVANMain$$module$src$logger("event: realtimePerformanceStarted from worker, now preparingRT..")();await this.prepareRealtimePerformance();break;case "realtimePerformanceEnded":logVANMain$$module$src$logger("event: realtimePerformanceEnded")();this.eventPromises.createStopPromise();this.midiPortStarted=!1;this.publicEvents.triggerRealtimePerformanceEnded(this);await this.eventPromises.releaseStopPromise();break;case "renderStarted":await this.eventPromises.releaseStartPromise();
this.publicEvents.triggerRenderStarted(this);break;case "renderEnded":logVANMain$$module$src$logger("event: renderEnded received, beginning cleanup")(),this.publicEvents.triggerRenderEnded(this),await this.eventPromises.releaseStopPromise()}this.audioWorker.ipcMessagePorts||(this.audioWorker.ipcMessagePorts=this.ipcMessagePorts);await this.audioWorker.onPlayStateChange(a)}}async csoundPause(){if(this.eventPromises.isWaiting("pause"))return-1;this.eventPromises.createPausePromise();this.audioWorker&&
void 0!==this.audioWorker.workletProxy?await this.audioWorker.workletProxy.pause():await this.audioWorker.onPlayStateChange("realtimePerformancePaused");await this.eventPromises.waitForPause();return 0}async csoundResume(){if(this.eventPromises.isWaiting("resume"))return-1;this.eventPromises.createResumePromise();this.audioWorker&&void 0!==this.audioWorker.workletProxy?await this.audioWorker.workletProxy.resume():await this.audioWorker.onPlayStateChange("realtimePerformanceResumed");await this.eventPromises.waitForResume();
return 0}async initialize({wasmDataURI:a,withPlugins:b}){a=a();"function"===typeof this.audioWorker.initIframe&&await this.audioWorker.initIframe();b&&!isEmpty$$module$node_modules$rambda$dist$rambda_mjs(b)&&(b=await fetchPlugins$$module$src$utils(b));logVANMain$$module$src$logger("vanilla.main: initialize")();this.csoundWorker=this.csoundWorker||new Worker($jscompDefaultExport$$module$dist$__compiled_vanilla_worker_inline());this.ipcMessagePorts.mainMessagePort.addEventListener("message",messageEventHandler$$module$src$mains$messages_main(this));
this.ipcMessagePorts.mainMessagePort2.addEventListener("message",messageEventHandler$$module$src$mains$messages_main(this));this.ipcMessagePorts.mainMessagePort.start();const c=wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(this.csoundWorker);this.proxyPort=c;this.csoundInstance=await c.initialize(transfer$$module$node_modules$comlink$dist$esm$comlink_mjs({wasmDataURI:a,messagePort:this.ipcMessagePorts.workerMessagePort,requestPort:this.ipcMessagePorts.csoundWorkerFrameRequestPort,audioInputPort:this.ipcMessagePorts.csoundWorkerAudioInputPort,
rtmidiPort:this.ipcMessagePorts.csoundWorkerRtMidiPort,sampleRate:this.sampleRate,inputChannelCount:this.inputChannelCount,outputChannelCount:this.outputChannelCount,withPlugins:b},[a,this.ipcMessagePorts.workerMessagePort,this.ipcMessagePorts.csoundWorkerFrameRequestPort,this.ipcMessagePorts.csoundWorkerAudioInputPort,this.ipcMessagePorts.csoundWorkerRtMidiPort]));this.exportApi.pause=this.csoundPause.bind(this);this.exportApi.resume=this.csoundResume.bind(this);this.exportApi.terminateInstance=
this.terminateInstance.bind(this);this.exportApi.getAudioContext=async()=>this.audioWorker.audioContext;this.exportApi.getNode=async()=>{const d=this.audioWorker.audioWorkletNode;return d?d:await new Promise(e=>{this.exportApi.once("onAudioNodeCreated",e)})};this.exportApi=this.publicEvents.decorateAPI(this.exportApi);this.exportApi.enableAudioInput=()=>console.warn("enableAudioInput was ignored: please use -iadc option before calling start with useWorker=true");this.exportApi.addListener("message",
console.log);for(const d of Object.keys(api$$module$src$libcsound)){const e=api$$module$src$libcsound[d],f=makeProxyCallback$$module$src$utils(c,this.csoundInstance,d,this.currentPlayState);switch(d){case "csoundCreate":break;case "csoundStart":b=async function(){if(this.eventPromises.isWaiting("start"))return-1;this.eventPromises.createStartPromise();const g=await f({csound:this.csoundInstance});await this.eventPromises.waitForStart();return g};b.toString=()=>e.toString();this.exportApi.start=b.bind(this);
break;case "csoundStop":b=async function(){if(this.eventPromises.isWaiting("stop"))return-1;this.eventPromises.createStopPromise();this.ipcMessagePorts.mainMessagePort.postMessage({newPlayState:"renderStarted"===this.currentPlayState?"renderEnded":"realtimePerformanceEnded"});await this.eventPromises.waitForStop();return 0};this.exportApi.stop=b.bind(this);b.toString=e.toString;break;case "csoundReset":b=async()=>{if(this.currentPlayState){if(this.eventPromises.isWaiting("reset"))return-1;stopableStates$$module$src$utils.has(this.currentPlayState)&&
await this.exportApi.stop();const g=await f([]);this.audioContextIsProvided||(await this.audioWorker.terminateInstance(),delete this.audioWorker.audioContext);this.ipcMessagePorts.restartAudioWorkerPorts();return g}};this.exportApi.reset=b.bind(this);b.toString=e.toString;break;case "fs":this.exportApi.fs={};Object.keys(e).forEach(g=>{const h=makeProxyCallback$$module$src$utils(c,this.csoundInstance,g,this.currentPlayState);h.toString=e[g].toString;this.exportApi.fs[g]=h});break;default:f.toString=
e.toString,this.exportApi[csoundApiRename$$module$src$utils(d)]=f}}logVANMain$$module$src$logger("exportAPI generated")()}}var $jscompDefaultExport$$module$src$mains$vanilla_main=VanillaWorkerMainThread$$module$src$mains$vanilla_main,module$src$mains$vanilla_main={};module$src$mains$vanilla_main.default=$jscompDefaultExport$$module$src$mains$vanilla_main;/*
 unmute-ios-audio. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var module$node_modules$unmute_ios_audio$index={default:function(){function a(n){"blocked"===e&&(e="pending",b());"blocked"===f&&(f="pending",h=new d,k=h.createBufferSource(),k.buffer=h.createBuffer(1,1,22050),k.connect(h.destination),k.start(),"running"===h.state?(f="allowed",c()):(f="blocked",k.disconnect(h.destination),k=null,h.close(),h=null))}function b(){g=document.createElement("audio");g.setAttribute("x-webkit-airplay","deny");g.preload="auto";g.loop=!0;g.src=m;g.load();g.play().then(()=>
{e="allowed";c()},()=>{e="blocked";g.pause();g.removeAttribute("src");g.load();g=null})}function c(){"allowed"===e&&"allowed"===f&&USER_ACTIVATION_EVENTS$$module$node_modules$unmute_ios_audio$index.forEach(n=>{window.removeEventListener(n,a,{capture:!0,passive:!0})})}const d=window.webkitAudioContext;if(0<navigator.maxTouchPoints&&null!=d){var e="blocked",f="blocked",g,h,k,m=function(n){const l=new ArrayBuffer(10),p=new DataView(l);p.setUint32(0,n,!0);p.setUint32(4,n,!0);p.setUint16(8,1,!0);return`data:audio/wav;base64,UklGRisAAABXQVZFZm10IBAAAAABAAEA${window.btoa(String.fromCharCode(...(new Uint8Array(l)))).slice(0,
13)}AgAZGF0YQcAAACAgICAgICAAAA=`}((new d).sampleRate);USER_ACTIVATION_EVENTS$$module$node_modules$unmute_ios_audio$index.forEach(n=>{window.addEventListener(n,a,{capture:!0,passive:!0})})}}};const USER_ACTIVATION_EVENTS$$module$node_modules$unmute_ios_audio$index="auxclick click contextmenu dblclick keydown keyup mousedown mouseup touchend".split(" ");const DEFAULT_BUFFER_LEN$$module$src$constants=128,MAX_CHANNELS$$module$src$constants=32,RING_BUFFER_SIZE$$module$src$constants=16384,MIDI_BUFFER_SIZE$$module$src$constants=1024,MIDI_BUFFER_PAYLOAD_SIZE$$module$src$constants=3,CALLBACK_DATA_BUFFER_SIZE$$module$src$constants=16384,initialSharedState$$module$src$constants=[0,4096,0,0,0,0,-1,-1,-1,-1,0,DEFAULT_BUFFER_LEN$$module$src$constants,0,0,0,0,0,0,0,0],AUDIO_STATE$$module$src$constants={CSOUND_LOCK:0,FRAMES_REQUESTED:1,IS_PERFORMING:2,IS_RENDERING:3,
IS_PAUSED:4,STOP:5,SAMPLE_RATE:6,KSMPS:7,NCHNLS:8,NCHNLS_I:9,IS_REQUESTING_MIC:10,BUFFER_LEN:11,OUTPUT_READ_INDEX:12,OUTPUT_WRITE_INDEX:13,AVAIL_IN_BUFS:14,AVAIL_OUT_BUFS:15,IS_REQUESTING_RTMIDI:16,RTMIDI_INDEX:17,AVAIL_RTMIDI_EVENTS:18,HAS_PENDING_CALLBACKS:19},DATA_TYPE$$module$src$constants={NUMBER:0,STRING:1,FLOAT_32:2,FLOAT_64:3};var module$src$constants={};module$src$constants.AUDIO_STATE=AUDIO_STATE$$module$src$constants;module$src$constants.CALLBACK_DATA_BUFFER_SIZE=CALLBACK_DATA_BUFFER_SIZE$$module$src$constants;
module$src$constants.DATA_TYPE=DATA_TYPE$$module$src$constants;module$src$constants.DEFAULT_BUFFER_LEN=DEFAULT_BUFFER_LEN$$module$src$constants;module$src$constants.MAX_CHANNELS=MAX_CHANNELS$$module$src$constants;module$src$constants.MIDI_BUFFER_PAYLOAD_SIZE=MIDI_BUFFER_PAYLOAD_SIZE$$module$src$constants;module$src$constants.MIDI_BUFFER_SIZE=MIDI_BUFFER_SIZE$$module$src$constants;module$src$constants.RING_BUFFER_SIZE=RING_BUFFER_SIZE$$module$src$constants;module$src$constants.initialSharedState=initialSharedState$$module$src$constants;var $jscompDefaultExport$$module$dist$__compiled_sab_worker_inline=()=>(window.URL||window.webkitURL).createObjectURL(new Blob(['(function(){/*\n\n Copyright The Closure Library Authors.\n SPDX-License-Identifier: Apache-2.0\n*/\nvar $jscomp=$jscomp||{};$jscomp.scope={};var COMPILED=!0,goog=goog||{};goog.global=this||self;goog.exportPath_=function(a,b,c,d){a=a.split(".");d=d||goog.global;a[0]in d||"undefined"==typeof d.execScript||d.execScript("var "+a[0]);for(var e;a.length&&(e=a.shift());)if(a.length||void 0===b)d=d[e]&&d[e]!==Object.prototype[e]?d[e]:d[e]={};else if(!c&&goog.isObject(b)&&goog.isObject(d[e]))for(var f in b)b.hasOwnProperty(f)&&(d[e][f]=b[f]);else d[e]=b};\ngoog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2020;goog.DEBUG=!0;goog.LOCALE="en";goog.getLocale=function(){return goog.LOCALE};goog.TRUSTED_SITE=!0;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;\ngoog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(a))throw Error(\'Namespace "\'+a+\'" already declared.\');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b,c){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var d=a;(d=d.substring(0,d.lastIndexOf(".")))&&!goog.getObjectByName(d);)goog.implicitNamespaces_[d]=!0}goog.exportPath_(a,b,c)};goog.NONCE_PATTERN_=/^[\\w+/_-]+[=]{0,2}$/;\ngoog.getScriptNonce_=function(a){a=(a||goog.global).document;return(a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(a)?a:""};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\ngoog.module=function(a){if("string"!==typeof a||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You\'re likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");\ngoog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error(\'Namespace "\'+a+\'" already declared.\');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};goog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:"es6",GOOG:"goog"};goog.moduleLoaderState_=null;\ngoog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?"function"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};\ngoog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0};\ngoog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(a in goog.loadedModules_)throw Error(\'Module with namespace "\'+a+\'" already exists.\');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||"function"!=typeof b.getCurrentModulePath)throw Error(\'Module with namespace "\'+\na+\'" has been loaded incorrectly.\');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&null!=goog.getObjectByName(a)},goog.implicitNamespaces_={"goog.module":!0});\ngoog.getObjectByName=function(a,b){a=a.split(".");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b};goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};\ngoog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath="";goog.abstractMethod=function(){throw Error("unimplemented abstract method");};\ngoog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";goog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRUSTED_TYPES_POLICY_NAME="goog";\ngoog.hasBadLetScoping=null;\ngoog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};var c={},d=c;if("function"===typeof a)d=a.call(void 0,d);else if("string"===typeof a)d=goog.loadModuleFromSource_.call(void 0,d,a);else throw Error("Invalid module definition");var e=goog.moduleLoaderState_.moduleName;if("string"===typeof e&&e)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(e,d,c!==d):goog.SEAL_MODULE_EXPORTS&&\nObject.seal&&"object"==typeof d&&null!=d&&Object.seal(d),goog.loadedModules_[e]={exports:d,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error(\'Invalid module name "\'+e+\'"\');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a,b){eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(b));return a};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};\ngoog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};goog.typeOf=function(a){var b=typeof a;return"object"!=b?b:a?Array.isArray(a)?"array":b:"null"};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};\ngoog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};goog.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,goog.UID_PROPERTY_)&&a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};\ngoog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if("function"===typeof a.clone)return a.clone();if("undefined"!==typeof Map&&a instanceof Map)return new Map(a);if("undefined"!==typeof Set&&a instanceof Set)return new Set(a);b="array"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};\ngoog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};\ngoog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}};goog.now=function(){return Date.now()};goog.globalEval=function(a){(0,eval)(a)};\ngoog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error(\'className passed in goog.getCssName must not start with ".". You passed: \'+a);var c=function(e){return goog.cssNameMapping_[e]||e},d=function(e){e=e.split("-");for(var f=[],g=0;g<e.length;g++)f.push(c(e[g]));return f.join("-")};d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(e){return e};a=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};\ngoog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.GetMsgOptions=function(){};\ngoog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,"&lt;"));c&&c.unescapeHtmlEntities&&(a=a.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&apos;/g,"\'").replace(/&quot;/g,\'"\').replace(/&amp;/g,"&"));b&&(a=a.replace(/\\{\\$([^}]+)}/g,function(d,e){return null!=b&&e in b?b[e]:d}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,!0,c)};goog.exportProperty=function(a,b,c){a[b]=c};\ngoog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(d,e,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++)g[h-2]=arguments[h];return b.prototype[e].apply(d,g)}};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");a.call(goog.global)};COMPILED||(goog.global.COMPILED=COMPILED);\ngoog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;\ngoog.defineClass.createSealingConstructor_=function(a,b){return goog.defineClass.SEAL_CLASS_INSTANCES?function(){var c=a.apply(this,arguments)||this;c[goog.UID_PROPERTY_]=c[goog.UID_PROPERTY_];return c}:a};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");\ngoog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};goog.identity_=function(a){return a};\ngoog.createTrustedTypesPolicy=function(a){var b=null,c=goog.global.trustedTypes;if(!c||!c.createPolicy)return b;try{b=c.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_})}catch(d){goog.logToConsole_(d.message)}return b};\n!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.isEdge_=function(){return!!(goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"").match(/Edge\\/(\\d+)(\\.\\d)*/i)},goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?"complete"!=a.readyState:"loading"==a.readyState},goog.findBasePath_=function(){if(void 0!=goog.global.CLOSURE_BASE_PATH&&"string"===typeof goog.global.CLOSURE_BASE_PATH)goog.basePath=\ngoog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;a=b?[b]:a.getElementsByTagName("SCRIPT");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?");d=-1==d?c.length:d;if("base.js"==c.slice(d-7,d)){goog.basePath=c.slice(0,d-7);break}}}},goog.findBasePath_(),goog.protectScriptTag_=function(a){return a.replace(/<\\/(SCRIPT)/ig,"\\\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={};this.idToPath_={};this.written_={};this.loadingDeps_=\n[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory;this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error("Unregonized namespace: "+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},\ngoog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{}));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=function(a){this.factory_=a},goog.DebugLoader_.prototype.load_=\nfunction(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(e){var f=b.getPathFromDeps_(e);if(!f)throw Error("Bad dependency path or symbol: "+e);if(!b.written_[f]){b.written_[f]=!0;e=b.dependencies_[f];for(f=0;f<e.requires.length;f++)goog.isProvided_(e.requires[f])||d(e.requires[f]);c.push(e)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else goog.logToConsole_("goog.require could not find: "+a)},goog.DebugLoader_.prototype.loadDeps_=\nfunction(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error("Cannot call pause after the call to load.");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error("Double call to loaded.");e=!0;a.loaded_(d)},pending:function(){for(var g=[],h=0;h<a.loadingDeps_.length;h++)g.push(a.loadingDeps_[h]);return g},setModuleState:function(g){goog.moduleLoaderState_={type:g,\nmoduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(g,h,k){k&&(goog.loadedModules_[k]={exports:h,type:goog.ModuleType.ES6,moduleId:k||""})},registerGoogModuleExports:function(g,h){goog.loadedModules_[g]={exports:h,type:goog.ModuleType.GOOG,moduleId:g}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(g){if(c)throw Error("Cannot register with defer after the call to load.");a.defer_(d,g)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};\ntry{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);break}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==\na.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=function(a){return a in this.idToPath_?\nthis.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,b,c){},goog.LoadController.prototype.setModuleState=\nfunction(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf("://");0<=b&&(a=a.substring(b+3),b=a.indexOf("/"),0<=b&&(a=a.substring(b+1)));return a},\ngoog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=function(a){delete goog.Dependency.callbackMap_[a]},\ngoog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error("Callback key "+a+" does not exist (was base.js loaded more than once?).");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=goog.global.document;if("complete"==\nb.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\\bdeps.js$/.test(this.path)){a.loaded();return}throw Error(\'Cannot write "\'+this.path+\'" after document load\');}var c=goog.getScriptNonce_();if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var d=function(h){h.readyState&&"complete"!=h.readyState?h.onload=d:(goog.Dependency.unregisterCallback_(e),a.loaded())};var e=goog.Dependency.registerCallback_(d);c=c?\' nonce="\'+c+\'"\':"";var f=\'<script src="\'+this.path+\'"\'+\nc+(goog.Dependency.defer_?" defer":"")+\' id="script-\'+e+\'">\\x3c/script>\';f+="<script"+c+">";f=goog.Dependency.defer_?f+("document.getElementById(\'script-"+e+"\').onload = function() {\\n  goog.Dependency.callback_(\'"+e+"\', this);\\n};\\n"):f+("goog.Dependency.callback_(\'"+e+"\', document.getElementById(\'script-"+e+"\'));");f+="\\x3c/script>";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(f):f)}else{var g=b.createElement("script");g.defer=goog.Dependency.defer_;g.async=!1;c&&(g.nonce=\nc);g.onload=function(){g.onload=null;a.loaded()};g.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(g)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),a.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,\nb,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(l,n){var m="",p=goog.getScriptNonce_();p&&(m=\' nonce="\'+p+\'"\');l=n?\'<script type="module" crossorigin\'+m+">"+n+"\\x3c/script>":\'<script type="module" crossorigin src="\'+l+\'"\'+m+">\\x3c/script>";d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(l):l)}function c(l,n){var m=d.createElement("script");m.defer=!0;m.async=!1;m.type="module";m.setAttribute("crossorigin",\n!0);var p=goog.getScriptNonce_();p&&(m.nonce=p);n?m.text=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(n):n:m.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(l):l;d.head.appendChild(m)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);\na.setModuleState(goog.ModuleType.ES6)});f(void 0,\'goog.Dependency.callback_("\'+g+\'")\');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(l){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,l,goog.moduleLoaderState_.moduleName)});f(void 0,\'import * as m from "\'+this.path+\'"; goog.Dependency.callback_("\'+h+\'", m)\');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);a.clearModuleState();a.loaded()});f(void 0,\'goog.Dependency.callback_("\'+\nk+\'")\')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=goog.loadFileSync_(e.path);e.contents_&&(e.contents_=\ne.transform(e.contents_),e.contents_&&(e.contents_+="\\n//# sourceURL="+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var l=e.contents_;e.contents_=null;goog.globalEval(goog.CLOSURE_EVAL_PREFILTER_.createScript(l));if(f)var n=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),n)});a.loaded()}}\nfunction d(){var l=goog.global.document,n=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(n);c()}),m=goog.getScriptNonce_();m="<script"+(m?\' nonce="\'+m+\'"\':"")+">"+goog.protectScriptTag_(\'goog.Dependency.callback_("\'+n+\'");\')+"\\x3c/script>";l.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(m):m)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,a.loaded()):\na.pause();else{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length;if(goog.Dependency.defer_&&(g||goog.isDocumentLoading_()))a.defer(function(){c()});else{var h=goog.global.document;g=goog.inHtmlDocument_()&&("ActiveXObject"in goog.global||goog.isEdge_());if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!g){goog.Dependency.defer_=!0;a.pause();var k=h.onreadystatechange;h.onreadystatechange=function(){"interactive"==h.readyState&&(h.onreadystatechange=\nk,c(),a.resume());"function"===typeof k&&k.apply(void 0,arguments)}}else goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,\nc,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=function(a){return goog.LOAD_MODULE_USING_EVAL&&void 0!==goog.global.JSON?"goog.loadModule("+goog.global.JSON.stringify(a+"\\n//# sourceURL="+this.path+"\\n")+");":\'goog.loadModule(function(exports) {"use strict";\'+a+"\\n;return exports});\\n//# sourceURL="+this.path+"\\n"},goog.DebugLoader_.prototype.addDependency=function(a,b,c,d){b=\nb||[];a=a.replace(/\\\\/g,"/");var e=goog.normalizePath_(goog.basePath+a);d&&"boolean"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d);this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(){},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,b,c,d,e):e.module==goog.ModuleType.ES6?goog.ASSUME_ES_MODULES_TRANSPILED?\nnew goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null,goog.global.CLOSURE_NO_DEPS||goog.debugLoader_.loadClosureDeps(),\ngoog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});if(!COMPILED){var isChrome87=!1;try{isChrome87=eval(goog.global.trustedTypes.emptyScript)!==goog.global.trustedTypes.emptyScript}catch(a){}goog.CLOSURE_EVAL_PREFILTER_=goog.global.trustedTypes&&isChrome87&&goog.createTrustedTypesPolicy("goog#base#devonly#eval")||{createScript:goog.identity_}};const proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.proxy"),createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.endpoint"),releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.releaseProxy"),throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.thrown"),isObject$$module$node_modules$comlink$dist$esm$comlink_mjs=a=>"object"===typeof a&&null!==a||"function"===typeof a,proxyTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs=\n{canHandle:a=>isObject$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&a[proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs],serialize(a){const {port1:b,port2:c}=new MessageChannel;expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b);return[c,[c]]},deserialize(a){a.start();return wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(a)}},throwTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs={canHandle:a=>isObject$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&\nthrowMarker$$module$node_modules$comlink$dist$esm$comlink_mjs in a,serialize({value:a}){return[a instanceof Error?{isError:!0,value:{message:a.message,name:a.name,stack:a.stack}}:{isError:!1,value:a},[]]},deserialize(a){if(a.isError)throw Object.assign(Error(a.value.message),a.value);throw a.value;}},transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs=new Map([["proxy",proxyTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs],["throw",throwTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs]]);\nfunction expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=self){b.addEventListener("message",function e(d){if(d&&d.data){var {id:f,type:g,path:h}=Object.assign({path:[]},d.data),k=(d.data.argumentList||[]).map(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);try{const n=h.slice(0,-1).reduce((p,q)=>p[q],a),m=h.reduce((p,q)=>p[q],a);switch(g){case "GET":var l=m;break;case "SET":n[h.slice(-1)[0]]=fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(d.data.value);\nl=!0;break;case "APPLY":l=m.apply(n,k);break;case "CONSTRUCT":const p=new m(...k);l=proxy$$module$node_modules$comlink$dist$esm$comlink_mjs(p);break;case "ENDPOINT":const {port1:q,port2:B}=new MessageChannel;expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,B);l=transfer$$module$node_modules$comlink$dist$esm$comlink_mjs(q,[q]);break;case "RELEASE":l=void 0;break;default:return}}catch(n){l={value:n,[throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:0}}Promise.resolve(l).catch(n=>\n({value:n,[throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:0})).then(n=>{const [m,p]=toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(n);b.postMessage(Object.assign(Object.assign({},m),{id:f}),p);"RELEASE"===g&&(b.removeEventListener("message",e),closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(b))})}});b.start&&b.start()}function isMessagePort$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return"MessagePort"===a.constructor.name}\nfunction closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a){isMessagePort$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&a.close()}function wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b){return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,[],b)}function throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(a){if(a)throw Error("Proxy has been released and is not useable");}\nfunction createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=[],c=function(){}){let d=!1;const e=new Proxy(c,{get(f,g){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);if(g===releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs)return()=>requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"RELEASE",path:b.map(h=>h.toString())}).then(()=>{closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a);d=!0});if("then"===\ng){if(0===b.length)return{then:()=>e};f=requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"GET",path:b.map(h=>h.toString())}).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);return f.then.bind(f)}return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,[...b,g])},set(f,g,h){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);const [k,l]=toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(h);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,\n{type:"SET",path:[...b,g].map(n=>n.toString()),value:k},l).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)},apply(f,g,h){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);f=b[b.length-1];if(f===createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs)return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"ENDPOINT"}).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);if("bind"===f)return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,\nb.slice(0,-1));const [k,l]=processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(h);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"APPLY",path:b.map(n=>n.toString()),argumentList:k},l).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)},construct(f,g){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);const [h,k]=processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(g);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,\n{type:"CONSTRUCT",path:b.map(l=>l.toString()),argumentList:h},k).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)}});return e}function myFlat$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return Array.prototype.concat.apply([],a)}\nfunction processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(a){a=a.map(toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);return[a.map(b=>b[0]),myFlat$$module$node_modules$comlink$dist$esm$comlink_mjs(a.map(b=>b[1]))]}const transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs=new WeakMap;function transfer$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b){transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs.set(a,b);return a}\nfunction proxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return Object.assign(a,{[proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:!0})}function windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=self,c="*"){return{postMessage:(d,e)=>a.postMessage(d,c,e),addEventListener:b.addEventListener.bind(b),removeEventListener:b.removeEventListener.bind(b)}}\nfunction toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(a){for(const [b,c]of transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs)if(c.canHandle(a)){const [d,e]=c.serialize(a);return[{type:"HANDLER",name:b,value:d},e]}return[{type:"RAW",value:a},transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs.get(a)||[]]}\nfunction fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(a){switch(a.type){case "HANDLER":return transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs.get(a.name).deserialize(a.value);case "RAW":return a.value}}\nfunction requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b,c){return new Promise(d=>{const e=generateUUID$$module$node_modules$comlink$dist$esm$comlink_mjs();a.addEventListener("message",function h(g){g.data&&g.data.id&&g.data.id===e&&(a.removeEventListener("message",h),d(g.data))});a.start&&a.start();a.postMessage(Object.assign({id:e},b),c)})}\nfunction generateUUID$$module$node_modules$comlink$dist$esm$comlink_mjs(){return Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}var module$node_modules$comlink$dist$esm$comlink_mjs={};module$node_modules$comlink$dist$esm$comlink_mjs.createEndpoint=createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.expose=expose$$module$node_modules$comlink$dist$esm$comlink_mjs;\nmodule$node_modules$comlink$dist$esm$comlink_mjs.proxy=proxy$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.proxyMarker=proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.releaseProxy=releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.transfer=transfer$$module$node_modules$comlink$dist$esm$comlink_mjs;\nmodule$node_modules$comlink$dist$esm$comlink_mjs.transferHandlers=transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.windowEndpoint=windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.wrap=wrap$$module$node_modules$comlink$dist$esm$comlink_mjs;function MessagePortState$$module$src$utils$message_port_state(){}MessagePortState$$module$src$utils$message_port_state.prototype.ready=!1;MessagePortState$$module$src$utils$message_port_state.prototype.port=void 0;MessagePortState$$module$src$utils$message_port_state.prototype.post=()=>{};MessagePortState$$module$src$utils$message_port_state.prototype.broadcastPlayState=()=>{};MessagePortState$$module$src$utils$message_port_state.prototype.workerState=void 0;\nMessagePortState$$module$src$utils$message_port_state.prototype.vanillaWorkerState=void 0;var $jscompDefaultExport$$module$src$utils$message_port_state=MessagePortState$$module$src$utils$message_port_state,module$src$utils$message_port_state={};module$src$utils$message_port_state.MessagePortState=MessagePortState$$module$src$utils$message_port_state;module$src$utils$message_port_state.default=$jscompDefaultExport$$module$src$utils$message_port_state;const csoundCreate$$module$src$modules$instantiation=a=>()=>a.exports.csoundCreateWasi();csoundCreate$$module$src$modules$instantiation.toString=()=>"create = async () => undefined;";const csoundDestroy$$module$src$modules$instantiation=a=>b=>a.exports.csoundDestroy(b);csoundDestroy$$module$src$modules$instantiation.toString=()=>"destroy = async () => undefined;";const csoundGetAPIVersion$$module$src$modules$instantiation=a=>()=>a.exports.csoundGetAPIVersion();\ncsoundGetAPIVersion$$module$src$modules$instantiation.toString=()=>"getAPIVersion = async () => Number;";const csoundGetVersion$$module$src$modules$instantiation=a=>()=>a.exports.csoundGetVersion();csoundGetVersion$$module$src$modules$instantiation.toString=()=>"getVersion = async () => Number;";const csoundInitialize$$module$src$modules$instantiation=a=>(b,c)=>a.exports.csoundInitialize(c);csoundInitialize$$module$src$modules$instantiation.toString=()=>"initialize = async () => Number;";\nvar module$src$modules$instantiation={};module$src$modules$instantiation.csoundCreate=csoundCreate$$module$src$modules$instantiation;module$src$modules$instantiation.csoundDestroy=csoundDestroy$$module$src$modules$instantiation;module$src$modules$instantiation.csoundGetAPIVersion=csoundGetAPIVersion$$module$src$modules$instantiation;module$src$modules$instantiation.csoundGetVersion=csoundGetVersion$$module$src$modules$instantiation;module$src$modules$instantiation.csoundInitialize=csoundInitialize$$module$src$modules$instantiation;const WITH_TEXT_ENCODER_POLYFILL$$module$src$utils$text_encoders=!1;function TextEncoderPoly$$module$src$utils$text_encoders(){this.encoding="utf8";return this}TextEncoderPoly$$module$src$utils$text_encoders.prototype.encode=function(a){if("string"!==typeof a)throw new TypeError("passed argument must be of type string "+a+" "+typeof a);a=unescape(encodeURIComponent(a));const b=new Uint8Array(a.length);[...a].forEach(function(c,d){b[d]=c.codePointAt(0)});return b};\nfunction TextDecoderPoly$$module$src$utils$text_encoders(){this.encoding="utf8";this.ignoreBOM=!1;this.trimNull=a=>{const b=a.indexOf("\\x00");return-1<b?a.slice(0,Math.max(0,b)):a};this.decode=function(a,b){if(void 0===a)return"";if("boolean"!==typeof(void 0!==b&&"stream"in b?b.stream:!1))throw new TypeError("stream option must be boolean");if(ArrayBuffer.isView(a)){a=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);const c=Array.from({length:a.length});a.forEach(function(d,e){c[e]=String.fromCodePoint(d)});\nreturn this.trimNull(c.join(""))}throw new TypeError("passed argument must be an array buffer view");}}\nconst decoder$$module$src$utils$text_encoders=WITH_TEXT_ENCODER_POLYFILL$$module$src$utils$text_encoders?new TextDecoderPoly$$module$src$utils$text_encoders:new TextDecoder("utf8"),encoder$$module$src$utils$text_encoders=WITH_TEXT_ENCODER_POLYFILL$$module$src$utils$text_encoders?new TextEncoderPoly$$module$src$utils$text_encoders:new TextEncoder("utf8"),uint2String$$module$src$utils$text_encoders=a=>decoder$$module$src$utils$text_encoders.decode(a);var module$src$utils$text_encoders={};\nmodule$src$utils$text_encoders.decoder=decoder$$module$src$utils$text_encoders;module$src$utils$text_encoders.encoder=encoder$$module$src$utils$text_encoders;module$src$utils$text_encoders.uint2String=uint2String$$module$src$utils$text_encoders;const trimNull$$module$src$utils$trim_null=a=>{const b=a.indexOf("\\x00");return-1<b?a.substr(0,b):a};var module$src$utils$trim_null={};module$src$utils$trim_null.trimNull=trimNull$$module$src$utils$trim_null;const freeStringPtr$$module$src$utils$string_pointers=(a,b)=>{a.exports.freeStringMem(b)},ptr2string$$module$src$utils$string_pointers=(a,b)=>{({buffer:a}=a.wasi.memory);b=new Uint8Array(a,b);b=uint2String$$module$src$utils$text_encoders(b);return trimNull$$module$src$utils$trim_null(b)},string2ptr$$module$src$utils$string_pointers=(a,b)=>{if("string"!==typeof b)console.error("Expected string but got",typeof b);else{b=encoder$$module$src$utils$text_encoders.encode(b);var c=a.exports.allocStringMem(b.length);\n({buffer:a}=a.wasi.memory);(new Uint8Array(a,c,b.length+1)).set(b);return c}};var module$src$utils$string_pointers={};module$src$utils$string_pointers.freeStringPtr=freeStringPtr$$module$src$utils$string_pointers;module$src$utils$string_pointers.ptr2string=ptr2string$$module$src$utils$string_pointers;module$src$utils$string_pointers.string2ptr=string2ptr$$module$src$utils$string_pointers;const csoundParseOrc$$module$src$modules$performance=a=>(b,c)=>a.exports.csoundParseOrc(b,c);csoundParseOrc$$module$src$modules$performance.toString=()=>"parseOrc = async (orchestra) => Object;";const csoundCompileTree$$module$src$modules$performance=a=>(b,c)=>a.exports.csoundCompileTree(b,c);csoundCompileTree$$module$src$modules$performance.toString=()=>"compileTree = async (tree) => Number;";\nconst csoundCompileOrc$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundCompileOrc(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundCompileOrc$$module$src$modules$performance.toString=()=>"compileOrc = async (orchestra) => Number;";\nconst csoundEvalCode$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundEvalCode(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundEvalCode$$module$src$modules$performance.toString=()=>"csoundEvalCode = async (orchestra) => Number;";const csoundStart$$module$src$modules$performance=a=>b=>a.exports.csoundStartWasi(b);csoundStart$$module$src$modules$performance.toString=()=>"start = async () => Number;";\nconst csoundCompileCsd$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);let d;try{d=a.exports.csoundCompileCsd(b,c)}catch(e){console.error(e)}freeStringPtr$$module$src$utils$string_pointers(a,c);return d};csoundCompileCsd$$module$src$modules$performance.toString=()=>"compileCsd = async (path) => Number;";\nconst csoundCompileCsdText$$module$src$modules$performance=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundCompileCsdText(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundCompileCsdText$$module$src$modules$performance.toString=()=>"compileCsdText = async (csoundDocument) => Number;";const csoundPerform$$module$src$modules$performance=a=>b=>a.exports.csoundPerform(b);csoundPerform$$module$src$modules$performance.toString=()=>"perform = async () => Number;";\nconst csoundPerformKsmps$$module$src$modules$performance=a=>b=>a.exports.csoundPerformKsmpsWasi(b);csoundPerformKsmps$$module$src$modules$performance.toString=()=>"performKsmps = async (csound) => Number;";const csoundPerformBuffer$$module$src$modules$performance=a=>b=>a.exports.csoundPerformBuffer(b);csoundPerformBuffer$$module$src$modules$performance.toString=()=>"performBuffer = async (csound) => Number;";const csoundStop$$module$src$modules$performance=a=>b=>a.exports.csoundStop(b);\ncsoundStop$$module$src$modules$performance.toString=()=>"stop = async () => undefined;";const csoundCleanup$$module$src$modules$performance=a=>b=>a.exports.csoundCleanup(b);csoundCleanup$$module$src$modules$performance.toString=()=>"cleanup = async () => Number;";const csoundReset$$module$src$modules$performance=a=>b=>a.exports.csoundResetWasi(b);csoundReset$$module$src$modules$performance.toString=()=>"reset = async () => Number;";var module$src$modules$performance={};\nmodule$src$modules$performance.csoundCleanup=csoundCleanup$$module$src$modules$performance;module$src$modules$performance.csoundCompileCsd=csoundCompileCsd$$module$src$modules$performance;module$src$modules$performance.csoundCompileCsdText=csoundCompileCsdText$$module$src$modules$performance;module$src$modules$performance.csoundCompileOrc=csoundCompileOrc$$module$src$modules$performance;module$src$modules$performance.csoundCompileTree=csoundCompileTree$$module$src$modules$performance;\nmodule$src$modules$performance.csoundEvalCode=csoundEvalCode$$module$src$modules$performance;module$src$modules$performance.csoundParseOrc=csoundParseOrc$$module$src$modules$performance;module$src$modules$performance.csoundPerform=csoundPerform$$module$src$modules$performance;module$src$modules$performance.csoundPerformBuffer=csoundPerformBuffer$$module$src$modules$performance;module$src$modules$performance.csoundPerformKsmps=csoundPerformKsmps$$module$src$modules$performance;\nmodule$src$modules$performance.csoundReset=csoundReset$$module$src$modules$performance;module$src$modules$performance.csoundStart=csoundStart$$module$src$modules$performance;module$src$modules$performance.csoundStop=csoundStop$$module$src$modules$performance;const sizeOfPrimitive$$module$src$utils$native_sizes={int:4,MYFLT:4,char:1},sizeofStruct$$module$src$utils$native_sizes=a=>a.reduce((b,[,c,...d])=>b+("char"===c?sizeOfPrimitive$$module$src$utils$native_sizes[c]*d[0]:sizeOfPrimitive$$module$src$utils$native_sizes[c]),0);var module$src$utils$native_sizes={};module$src$utils$native_sizes.sizeOfPrimitive=sizeOfPrimitive$$module$src$utils$native_sizes;module$src$utils$native_sizes.sizeofStruct=sizeofStruct$$module$src$utils$native_sizes;const structBufferToObject$$module$src$utils$structure_buffer_to_object=(a,b)=>{[a]=a.reduce(([c,d],[e,f,...g])=>{g="char"===f?sizeOfPrimitive$$module$src$utils$native_sizes[f]*g[0]:sizeOfPrimitive$$module$src$utils$native_sizes[f];f="char"===f?trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(b.subarray(d,g)))||"":b[d];c[e]=f;return[c,d+g]},[{},0]);return a};var module$src$utils$structure_buffer_to_object={};\nmodule$src$utils$structure_buffer_to_object.structBufferToObject=structBufferToObject$$module$src$utils$structure_buffer_to_object;const CSOUND_PARAMS$$module$src$structures=[["debug_mode","int"],["buffer_frames","int"],["hardware_buffer_frames","int"],["displays","int"],["ascii_graphs","int"],["postscript_graphs","int"],["message_level","int"],["tempo","int"],["ring_bell","int"],["use_cscore","int"],["terminate_on_midi","int"],["heartbeat","int"],["defer_gen01_load","int"],["midi_key","int"],["midi_key_cps","int"],["midi_key_oct","int"],["midi_key_pch","int"],["midi_velocity","int"],["midi_velocity_amp","int"],["no_default_paths",\n"int"],["number_of_threads","int"],["syntax_check_only","int"],["csd_line_counts","int"],["compute_weights","int"],["realtime_mode","int"],["sample_accurate","int"],["sample_rate_override","MYFLT"],["control_rate_override","MYFLT"],["nchnls_override","int"],["nchnls_i_override","int"],["e0dbfs_override","MYFLT"],["daemon","int"],["ksmps_override","int"],["FFT_library","int"]],CS_MIDIDEVICE$$module$src$structures=[["device_name","char",64],["interface_name","char",64],["device_id","char",64],["midi_module",\n"char",64],["isOutput","int"]];var module$src$structures={};const csoundGetSr$$module$src$modules$attributes=a=>b=>a.exports.csoundGetSr(b);csoundGetSr$$module$src$modules$attributes.toString=()=>"getSr = async () => Number;";const csoundGetKr$$module$src$modules$attributes=a=>b=>a.exports.csoundGetKr(b);csoundGetKr$$module$src$modules$attributes.toString=()=>"getKr = async () => Number;";const csoundGetKsmps$$module$src$modules$attributes=a=>b=>a.exports.csoundGetKsmps(b);csoundGetKsmps$$module$src$modules$attributes.toString=()=>"getKsmps = async () => Number;";\nconst csoundGetNchnls$$module$src$modules$attributes=a=>b=>a.exports.csoundGetNchnls(b);csoundGetNchnls$$module$src$modules$attributes.toString=()=>"getNchnls = async () => Number;";const csoundGetNchnlsInput$$module$src$modules$attributes=a=>b=>a.exports.csoundGetNchnlsInput(b);csoundGetNchnlsInput$$module$src$modules$attributes.toString=()=>"getNchnlsInput = async () => Number;";const csoundGet0dBFS$$module$src$modules$attributes=a=>b=>a.exports.csoundGet0dBFS(b);\ncsoundGet0dBFS$$module$src$modules$attributes.toString=()=>"get0dBFS = async () => Number;";const csoundGetA4$$module$src$modules$attributes=a=>b=>a.exports.csoundGetA4(b);csoundGetA4$$module$src$modules$attributes.toString=()=>"getA4 = async () => Number;";const csoundGetCurrentTimeSamples$$module$src$modules$attributes=a=>b=>a.exports.csoundGetCurrentTimeSamples(b);csoundGetCurrentTimeSamples$$module$src$modules$attributes.toString=()=>"getCurrentTimeSamples = async () => Number;";\nconst csoundGetSizeOfMYFLT$$module$src$modules$attributes=a=>b=>a.exports.csoundGetSizeOfMYFLT(b);csoundGetSizeOfMYFLT$$module$src$modules$attributes.toString=()=>"getSizeOfMYFLT = async () => Number;";const csoundSetOption$$module$src$modules$attributes=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundSetOption(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundSetOption$$module$src$modules$attributes.toString=()=>"setOption = async (option) => Number;";\nconst csoundSetParams$$module$src$modules$attributes=a=>(b,c)=>{a.exports.csoundSetParams(b,c)};csoundSetParams$$module$src$modules$attributes.toString=()=>"setParams = async (csoundParams) => undefined;";\nconst csoundGetParams$$module$src$modules$attributes=a=>b=>{var {buffer:c}=a.wasi.memory;const d=sizeofStruct$$module$src$utils$native_sizes(CSOUND_PARAMS$$module$src$structures),e=a.exports.allocCsoundParamsStruct();c=new Uint8Array(c,e,d);a.exports.csoundGetParams(b,e);b=structBufferToObject$$module$src$utils$structure_buffer_to_object(CSOUND_PARAMS$$module$src$structures,c);a.exports.freeCsoundParams(e);return b};csoundGetParams$$module$src$modules$attributes.toString=()=>"getParams = async () => CSOUND_PARAMS;";\nconst csoundGetDebug$$module$src$modules$attributes=a=>b=>a.exports.csoundGetDebug(b);csoundGetDebug$$module$src$modules$attributes.toString=()=>"getDebug = async () => Number;";const csoundSetDebug$$module$src$modules$attributes=a=>(b,c)=>{a.exports.csoundSetDebug(b,c)};csoundSetDebug$$module$src$modules$attributes.toString=()=>"setDebug = async (number) => undefined;";var module$src$modules$attributes={};module$src$modules$attributes.csoundGet0dBFS=csoundGet0dBFS$$module$src$modules$attributes;\nmodule$src$modules$attributes.csoundGetA4=csoundGetA4$$module$src$modules$attributes;module$src$modules$attributes.csoundGetCurrentTimeSamples=csoundGetCurrentTimeSamples$$module$src$modules$attributes;module$src$modules$attributes.csoundGetDebug=csoundGetDebug$$module$src$modules$attributes;module$src$modules$attributes.csoundGetKr=csoundGetKr$$module$src$modules$attributes;module$src$modules$attributes.csoundGetKsmps=csoundGetKsmps$$module$src$modules$attributes;\nmodule$src$modules$attributes.csoundGetNchnls=csoundGetNchnls$$module$src$modules$attributes;module$src$modules$attributes.csoundGetNchnlsInput=csoundGetNchnlsInput$$module$src$modules$attributes;module$src$modules$attributes.csoundGetParams=csoundGetParams$$module$src$modules$attributes;module$src$modules$attributes.csoundGetSizeOfMYFLT=csoundGetSizeOfMYFLT$$module$src$modules$attributes;module$src$modules$attributes.csoundGetSr=csoundGetSr$$module$src$modules$attributes;\nmodule$src$modules$attributes.csoundSetDebug=csoundSetDebug$$module$src$modules$attributes;module$src$modules$attributes.csoundSetOption=csoundSetOption$$module$src$modules$attributes;module$src$modules$attributes.csoundSetParams=csoundSetParams$$module$src$modules$attributes;const csoundGetInputBufferSize$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetInputBufferSize(b);csoundGetInputBufferSize$$module$src$modules$rtaudio.toString=()=>"getInputBufferSize = async () => Number;";const csoundGetOutputBufferSize$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetOutputBufferSize(b);csoundGetOutputBufferSize$$module$src$modules$rtaudio.toString=()=>"getOutputBufferSize = async () => Number;";const csoundGetInputBuffer$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetInputBuffer(b);\ncsoundGetInputBuffer$$module$src$modules$rtaudio.toString=()=>"getInputBuffer = async () => Number;";const csoundGetOutputBuffer$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetOutputBuffer(b);csoundGetOutputBuffer$$module$src$modules$rtaudio.toString=()=>"getOutputBuffer = async () => Number;";const csoundGetSpin$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetSpin(b);csoundGetSpin$$module$src$modules$rtaudio.toString=()=>"getSpin = async (csound) => Number;";\nconst csoundGetSpout$$module$src$modules$rtaudio=a=>b=>a.exports.csoundGetSpout(b);csoundGetSpout$$module$src$modules$rtaudio.toString=()=>"getSpout = async () => Number;";var module$src$modules$rtaudio={};module$src$modules$rtaudio.csoundGetInputBuffer=csoundGetInputBuffer$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetInputBufferSize=csoundGetInputBufferSize$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetOutputBuffer=csoundGetOutputBuffer$$module$src$modules$rtaudio;\nmodule$src$modules$rtaudio.csoundGetOutputBufferSize=csoundGetOutputBufferSize$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetSpin=csoundGetSpin$$module$src$modules$rtaudio;module$src$modules$rtaudio.csoundGetSpout=csoundGetSpout$$module$src$modules$rtaudio;function add$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>add$$module$node_modules$rambda$dist$rambda_mjs(a,c):Number(a)+Number(b)}const cloneList$$module$node_modules$rambda$dist$rambda_mjs=a=>Array.prototype.slice.call(a);function curry$$module$node_modules$rambda$dist$rambda_mjs(a,b=[]){return(...c)=>{c=[...b,...c];return c.length>=a.length?a(...c):curry$$module$node_modules$rambda$dist$rambda_mjs(a,c)}}\nfunction adjustFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d=0>a?c.length+a:a;if(a>=c.length||0>d)return c;a=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);a[d]=b(a[d]);return a}const adjust$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(adjustFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction all$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>all$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(let c=0;c<b.length;c++)if(!a(b[c]))return!1;return!0}function allPass$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{let c=0;for(;c<a.length;){if(!a[c](...b))return!1;c++}return!0}}function always$$module$node_modules$rambda$dist$rambda_mjs(a){return b=>a}\nfunction and$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>and$$module$node_modules$rambda$dist$rambda_mjs(a,c):a&&b}function any$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>any$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=0;for(;c<b.length;){if(a(b[c],c))return!0;c++}return!1}\nfunction anyPass$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{let c=0;for(;c<a.length;){if(a[c](...b))return!0;c++}return!1}}function append$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>append$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof b)return b.split("").concat(a);const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(b);c.push(a);return c}\nfunction apply$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>apply$$module$node_modules$rambda$dist$rambda_mjs(a,c):a.apply(this,b)}const {isArray:isArray$$module$node_modules$rambda$dist$rambda_mjs}=Array;\nfunction __findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a,b=0){for(const c in a)!1!==a.hasOwnProperty(c)&&"constructor"!==c&&("object"===typeof a[c]&&(b=Math.max(b,__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a[c]))),"function"===typeof a[c]&&(b=Math.max(b,a[c].length)));return b}\nfunction __filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(){const a=[];let b=0;const c=arguments.length;for(;b<c&&"undefined"!==typeof arguments[b];)a[b]=arguments[b],b++;return a}\nfunction __applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){var d=b-c.length;if(1===d)return f=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f));if(2===d)return(f,g)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g));if(3===d)return(f,g,h)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,\nb,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g,h));if(4===d)return(f,g,h,k)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g,h,k));if(4<d)return(...f)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,...f));if(isArray$$module$node_modules$rambda$dist$rambda_mjs(a)){var e=[];d=0;const f=a.length;\nfor(;d<f;d++){if("object"===typeof a[d]||isArray$$module$node_modules$rambda$dist$rambda_mjs(a[d]))e[d]=__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a[d],b,c);"function"===typeof a[d]&&(e[d]=a[d](...c))}return e}d={};for(e in a)!1!==a.hasOwnProperty(e)&&"constructor"!==e&&("object"===typeof a[e]?d[e]=__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a[e],b,c):"function"===typeof a[e]&&(d[e]=a[e](...c)));return d}\nfunction applySpec$$module$node_modules$rambda$dist$rambda_mjs(a,...b){const c=__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a);return 0===c?()=>({}):__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,c,b)}function assocFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return Object.assign({},c,{[a]:b})}const assoc$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(assocFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction _isInteger$$module$node_modules$rambda$dist$rambda_mjs(a){return a<<0===a}const isInteger$$module$node_modules$rambda$dist$rambda_mjs=Number.isInteger||_isInteger$$module$node_modules$rambda$dist$rambda_mjs;\nfunction assocPathFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d="string"===typeof a?a.split(".").map(e=>isInteger$$module$node_modules$rambda$dist$rambda_mjs(Number(e))?Number(e):e):a;if(0===d.length)return b;a=d[0];if(1<d.length){const e="object"===typeof c&&null!==c&&c.hasOwnProperty(a)?c[a]:isInteger$$module$node_modules$rambda$dist$rambda_mjs(d[1])?[]:{};b=assocPathFn$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(d,1),b,e)}return isInteger$$module$node_modules$rambda$dist$rambda_mjs(a)&&\nisArray$$module$node_modules$rambda$dist$rambda_mjs(c)?(c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c),c[a]=b,c):assoc$$module$node_modules$rambda$dist$rambda_mjs(a,b,c)}const assocPath$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(assocPathFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction _curryN$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return function(){var d=0;let e=0;const f=b.length,g=arguments.length,h=Array(f+g);for(;d<f;)h[d]=b[d],d++;for(;e<g;)h[f+e]=arguments[e],e++;d=a-h.length;return h.length>=a?c.apply(this,h):_arity$1$$module$node_modules$rambda$dist$rambda_mjs(d,_curryN$$module$node_modules$rambda$dist$rambda_mjs(a,h,c))}}\nfunction _arity$1$$module$node_modules$rambda$dist$rambda_mjs(a,b){switch(a){case 0:return function(){return b.apply(this,arguments)};case 1:return function(c){return b.apply(this,arguments)};case 2:return function(c,d){return b.apply(this,arguments)};case 3:return function(c,d,e){return b.apply(this,arguments)};case 4:return function(c,d,e,f){return b.apply(this,arguments)};case 5:return function(c,d,e,f,g){return b.apply(this,arguments)};case 6:return function(c,d,e,f,g,h){return b.apply(this,arguments)};\ncase 7:return function(c,d,e,f,g,h,k){return b.apply(this,arguments)};case 8:return function(c,d,e,f,g,h,k,l){return b.apply(this,arguments)};case 9:return function(c,d,e,f,g,h,k,l,n){return b.apply(this,arguments)};default:return function(c,d,e,f,g,h,k,l,n,m){return b.apply(this,arguments)}}}\nfunction curryN$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>curryN$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(10<a)throw Error("First argument to _arity must be a non-negative integer no greater than ten");return _arity$1$$module$node_modules$rambda$dist$rambda_mjs(a,_curryN$$module$node_modules$rambda$dist$rambda_mjs(a,[],b))}\nfunction bind$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>bind$$module$node_modules$rambda$dist$rambda_mjs(a,c):curryN$$module$node_modules$rambda$dist$rambda_mjs(a.length,(...c)=>a.apply(b,c))}function both$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>both$$module$node_modules$rambda$dist$rambda_mjs(a,c):(...c)=>a(...c)&&b(...c)}\nfunction chain$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>chain$$module$node_modules$rambda$dist$rambda_mjs(a,c):[].concat(...b.map(a))}function clampFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(a>b)throw Error("min must not be greater than max in clamp(min, max, value)");if(c>=a&&c<=b)return c;if(c>b)return b;if(c<a)return a}const clamp$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(clampFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction clone$$module$node_modules$rambda$dist$rambda_mjs(a){const b=isArray$$module$node_modules$rambda$dist$rambda_mjs(a)?Array(a.length):{};if(a&&a.getTime)return new Date(a.getTime());for(const c in a){const d=a[c];b[c]="object"===typeof d&&null!==d?d.getTime?new Date(d.getTime()):clone$$module$node_modules$rambda$dist$rambda_mjs(d):d}return b}function complement$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>!a(...b)}\nclass ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs{constructor(a){this.value=a}}function reduceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(c))throw new TypeError("reduce: list must be array or iterable");let d=0;const e=c.length;for(;d<e;){b=a(b,c[d],d,c);if(b instanceof ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs)return b.value;d++}return b}\nconst reduce$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(reduceFn$$module$node_modules$rambda$dist$rambda_mjs),reduceStopper$$module$node_modules$rambda$dist$rambda_mjs=a=>new ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs(a);\nfunction _arity$$module$node_modules$rambda$dist$rambda_mjs(a,b){switch(a){case 0:return function(){return b.apply(this,arguments)};case 1:return function(c){return b.apply(this,arguments)};case 2:return function(c,d){return b.apply(this,arguments)};case 3:return function(c,d,e){return b.apply(this,arguments)};case 4:return function(c,d,e,f){return b.apply(this,arguments)};case 5:return function(c,d,e,f,g){return b.apply(this,arguments)};case 6:return function(c,d,e,f,g,h){return b.apply(this,arguments)};\ncase 7:return function(c,d,e,f,g,h,k){return b.apply(this,arguments)};case 8:return function(c,d,e,f,g,h,k,l){return b.apply(this,arguments)};case 9:return function(c,d,e,f,g,h,k,l,n){return b.apply(this,arguments)};case 10:return function(c,d,e,f,g,h,k,l,n,m){return b.apply(this,arguments)};default:throw Error("First argument to _arity must be a non-negative integer no greater than ten");}}\nfunction _pipe$$module$node_modules$rambda$dist$rambda_mjs(a,b){return function(){return b.call(this,a.apply(this,arguments))}}\nfunction pipe$$module$node_modules$rambda$dist$rambda_mjs(){if(0===arguments.length)throw Error("pipe requires at least one argument");return _arity$$module$node_modules$rambda$dist$rambda_mjs(arguments[0].length,reduceFn$$module$node_modules$rambda$dist$rambda_mjs(_pipe$$module$node_modules$rambda$dist$rambda_mjs,arguments[0],Array.prototype.slice.call(arguments,1,Infinity)))}\nfunction compose$$module$node_modules$rambda$dist$rambda_mjs(){if(0===arguments.length)throw Error("compose requires at least one argument");return pipe$$module$node_modules$rambda$dist$rambda_mjs.apply(this,Array.prototype.slice.call(arguments,0).reverse())}function concat$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>concat$$module$node_modules$rambda$dist$rambda_mjs(a,c):"string"===typeof a?`${a}${b}`:[...a,...b]}\nfunction cond$$module$node_modules$rambda$dist$rambda_mjs(a){return b=>{let c=!1,d;a.forEach(([e,f])=>{!c&&e(b)&&(c=!0,d=f(b))});return d}}const {keys:keys$1$$module$node_modules$rambda$dist$rambda_mjs}=Object;function mapArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){let d=0;const e=Array(b.length);for(;d<b.length;)e[d]=c?a(b[d],d):a(b[d]),d++;return e}\nfunction mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,g);let c=0;const d=keys$1$$module$node_modules$rambda$dist$rambda_mjs(b),e=d.length,f={};for(;c<e;){const g=d[c];f[g]=a(b[g],g,b);c++}return f}const mapObjIndexed$$module$node_modules$rambda$dist$rambda_mjs=mapObject$$module$node_modules$rambda$dist$rambda_mjs;\nfunction map$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>map$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!b)throw Error(INCORRECT_ITERABLE_INPUT);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?mapArray$$module$node_modules$rambda$dist$rambda_mjs(a,b):mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}\nfunction max$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>max$$module$node_modules$rambda$dist$rambda_mjs(a,c):b>a?b:a}\nfunction converge$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>converge$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=reduce$$module$node_modules$rambda$dist$rambda_mjs((d,e)=>max$$module$node_modules$rambda$dist$rambda_mjs(d,e.length),0,b);return curryN$$module$node_modules$rambda$dist$rambda_mjs(c,function(){return a.apply(this,map$$module$node_modules$rambda$dist$rambda_mjs(d=>d.apply(this,arguments),b))})}\nfunction count$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>count$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?b.filter(c=>a(c)).length:0}function countBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>countBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c={};b.forEach(d=>{d=a(d);c[d]?c[d]++:c[d]=1});return c}\nconst dec$$module$node_modules$rambda$dist$rambda_mjs=a=>a-1;function isFalsy$$module$node_modules$rambda$dist$rambda_mjs(a){return void 0===a||null===a||!0===Number.isNaN(a)}function defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,c):isFalsy$$module$node_modules$rambda$dist$rambda_mjs(b)?a:b}\nfunction type$$module$node_modules$rambda$dist$rambda_mjs(a){if(null===a)return"Null";if(void 0===a)return"Undefined";if(Number.isNaN(a))return"NaN";a=Object.prototype.toString.call(a).slice(8,-1);return"AsyncFunction"===a?"Promise":a}\nfunction _lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`Cannot read property \'indexOf\' of ${b}`);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(!["Object","Array","NaN","RegExp"].includes(c))return b.lastIndexOf(a);({length:c}=b);let d=-1;for(;-1<--c&&-1===d;)equals$$module$node_modules$rambda$dist$rambda_mjs(b[c],a)&&(d=c);return d}\nfunction _indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`Cannot read property \'indexOf\' of ${b}`);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(!["Object","Array","NaN","RegExp"].includes(c))return b.indexOf(a);let d=c=-1;const {length:e}=b;for(;++c<e&&-1===d;)equals$$module$node_modules$rambda$dist$rambda_mjs(b[c],a)&&(d=c);return d}\nfunction _arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(a){const b=[];let c;for(;!(c=a.next()).done;)b.push(c.value);return b}function _equalsSets$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(a.size!==b.size)return!1;a=_arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(a.values());const c=_arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(b.values());return 0===a.filter(d=>-1===_indexOf$$module$node_modules$rambda$dist$rambda_mjs(d,c)).length}\nfunction parseError$$module$node_modules$rambda$dist$rambda_mjs(a){const b=a.__proto__.toString();return["Error","TypeError"].includes(b)?[b,a.message]:[]}function parseDate$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toDateString?[!0,a.getTime()]:[!1]}function parseRegex$$module$node_modules$rambda$dist$rambda_mjs(a){return a.constructor!==RegExp?[!1]:[!0,a.toString()]}\nfunction equals$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>equals$$module$node_modules$rambda$dist$rambda_mjs(a,f);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(c!==type$$module$node_modules$rambda$dist$rambda_mjs(b))return!1;if("Function"===c)return void 0===a.name?!1:a.name===b.name;if(["NaN","Undefined","Null"].includes(c))return!0;if("Number"===c)return Object.is(-0,a)!==Object.is(-0,b)?!1:a.toString()===b.toString();if(["String","Boolean"].includes(c))return a.toString()===\nb.toString();if("Array"===c){c=Array.from(a);const f=Array.from(b);if(c.toString()!==f.toString())return!1;let g=!0;c.forEach((h,k)=>{g&&(h===f[k]||equals$$module$node_modules$rambda$dist$rambda_mjs(h,f[k])||(g=!1))});return g}var d=parseRegex$$module$node_modules$rambda$dist$rambda_mjs(a),e=parseRegex$$module$node_modules$rambda$dist$rambda_mjs(b);if(d[0])return e[0]?d[1]===e[1]:!1;if(e[0])return!1;d=parseDate$$module$node_modules$rambda$dist$rambda_mjs(a);e=parseDate$$module$node_modules$rambda$dist$rambda_mjs(b);\nif(d[0])return e[0]?d[1]===e[1]:!1;if(e[0])return!1;d=parseError$$module$node_modules$rambda$dist$rambda_mjs(a);e=parseError$$module$node_modules$rambda$dist$rambda_mjs(b);if(d[0])return e[0]?d[0]===e[0]&&d[1]===e[1]:!1;if("Set"===c)return _equalsSets$$module$node_modules$rambda$dist$rambda_mjs(a,b);if("Object"===c){c=Object.keys(a);if(c.length!==Object.keys(b).length)return!1;let f=!0;c.forEach(g=>{if(f){const h=a[g];g=b[g];h===g||equals$$module$node_modules$rambda$dist$rambda_mjs(h,g)||(f=!1)}});\nreturn f}return!1}function includes$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>includes$$module$node_modules$rambda$dist$rambda_mjs(a,c);if("string"===typeof b)return b.includes(a);if(!b)throw new TypeError(`Cannot read property \\\'indexOf\\\' of ${b}`);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?-1<_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b):!1}\nclass _Set$$module$node_modules$rambda$dist$rambda_mjs{constructor(){this.set=new Set;this.items={}}checkUniqueness(a){var b=type$$module$node_modules$rambda$dist$rambda_mjs(a);return["Null","Undefined","NaN"].includes(b)?b in this.items?!1:this.items[b]=!0:["Object","Array"].includes(b)?b in this.items?-1===_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,this.items[b])?(this.items[b].push(a),!0):!1:(this.items[b]=[a],!0):(b=this.set.size,this.set.add(a),this.set.size!==b)}}\nfunction uniq$$module$node_modules$rambda$dist$rambda_mjs(a){const b=new _Set$$module$node_modules$rambda$dist$rambda_mjs,c=[];a.forEach(d=>{b.checkUniqueness(d)&&c.push(d)});return c}function difference$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>difference$$module$node_modules$rambda$dist$rambda_mjs(a,c):uniq$$module$node_modules$rambda$dist$rambda_mjs(a).filter(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,b))}\nfunction dissoc$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>dissoc$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(null===b||void 0===b)return{};const c={};for(const d in b)c[d]=b[d];delete c[a];return c}function divide$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>divide$$module$node_modules$rambda$dist$rambda_mjs(a,c):a/b}\nfunction drop$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>drop$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.slice(0<a?a:0)}function dropLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>dropLast$$module$node_modules$rambda$dist$rambda_mjs(a,c):0<a?b.slice(0,-a):b.slice()}\nfunction dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);if(0===b.length)return b;const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if("function"!==typeof a)throw Error(`\'predicate\' is from wrong type ${typeof a}`);if(!c&&"string"!==typeof b)throw Error(`\'iterable\' is from wrong type ${typeof b}`);let d=!1;const e=[];let f=b.length;for(;0<f;)f--,d||!1!==a(b[f])?d&&e.push(b[f]):\n(d=!0,e.push(b[f]));return c?e.reverse():e.reverse().join("")}function dropRepeats$$module$node_modules$rambda$dist$rambda_mjs(a){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error(`${a} is not a list`);const b=[];a.reduce((c,d)=>{equals$$module$node_modules$rambda$dist$rambda_mjs(c,d)||b.push(d);return d},void 0);return b}\nfunction dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`${b} is not a list`);const c=[];b.reduce((d,e)=>{if(void 0===d)return c.push(e),e;a(d,e)||c.push(e);return e},void 0);return c}\nfunction dropWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>dropWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if(!c&&"string"!==typeof b)throw Error("`iterable` is neither list nor a string");let d=!1;const e=[];let f=-1;for(;f++<b.length-1;)d?e.push(b[f]):a(b[f])||(d||(d=!0),e.push(b[f]));return c?e:e.join("")}\nfunction either$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>either$$module$node_modules$rambda$dist$rambda_mjs(a,c):(...c)=>!(!a(...c)&&!b(...c))}\nfunction endsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>endsWith$$module$node_modules$rambda$dist$rambda_mjs(a,e);if("string"===typeof b)return b.endsWith(a);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))return!1;const c=b.length-a.length;let d=!0;return a.filter((e,f)=>{if(!d)return!1;(e=equals$$module$node_modules$rambda$dist$rambda_mjs(e,b[f+c]))||(d=!1);return e}).length===a.length}\nfunction prop$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>prop$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(b)return b[a]}function eqPropsFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return equals$$module$node_modules$rambda$dist$rambda_mjs(prop$$module$node_modules$rambda$dist$rambda_mjs(a,b),prop$$module$node_modules$rambda$dist$rambda_mjs(a,c))}const eqProps$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(eqPropsFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction evolveArray$$module$node_modules$rambda$dist$rambda_mjs(a,b){return mapArray$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?a[d](c):c,b,!0)}\nfunction evolveObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return mapObject$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>{if("Object"===type$$module$node_modules$rambda$dist$rambda_mjs(c)){const e=type$$module$node_modules$rambda$dist$rambda_mjs(a[d]);return"Function"===e?a[d](c):"Object"===e?evolve$$module$node_modules$rambda$dist$rambda_mjs(a[d],c):c}return"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?a[d](c):c},b)}\nfunction evolve$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>evolve$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=type$$module$node_modules$rambda$dist$rambda_mjs(a),d=type$$module$node_modules$rambda$dist$rambda_mjs(b);if(d!==c)throw Error("iterableType !== rulesType");if(!["Object","Array"].includes(c))throw Error(`\'iterable\' and \'rules\' are from wrong type ${c}`);return"Object"===d?evolveObject$$module$node_modules$rambda$dist$rambda_mjs(a,b):evolveArray$$module$node_modules$rambda$dist$rambda_mjs(a,\nb)}function F$$module$node_modules$rambda$dist$rambda_mjs(){return!1}function filterObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={};for(const d in b)a(b[d],d,b)&&(c[d]=b[d]);return c}function filterArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){let d=0;const e=b.length,f=[];for(;d<e;)(c?a(b[d],d):a(b[d]))&&f.push(b[d]),d++;return f}\nfunction filter$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>filter$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!b)throw Error("Incorrect iterable input");return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?filterArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,!1):filterObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}\nfunction find$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>find$$module$node_modules$rambda$dist$rambda_mjs(a,e);let c=0;const d=b.length;for(;c<d;){const e=b[c];if(a(e))return e;c++}}function findIndex$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>findIndex$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=b.length;let d=-1;for(;++d<c;)if(a(b[d]))return d;return-1}\nfunction findLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>findLast$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=b.length;for(;0<=--c;)if(a(b[c]))return b[c]}function findLastIndex$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>findLastIndex$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=b.length;for(;0<=--c;)if(a(b[c]))return c;return-1}\nfunction flatten$$module$node_modules$rambda$dist$rambda_mjs(a,b){b=void 0===b?[]:b;for(let c=0;c<a.length;c++)isArray$$module$node_modules$rambda$dist$rambda_mjs(a[c])?flatten$$module$node_modules$rambda$dist$rambda_mjs(a[c],b):b.push(a[c]);return b}\nfunction flipFn$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{if(1===b.length)return c=>a(c,b[0]);if(2===b.length)return a(b[1],b[0]);if(3===b.length)return a(b[1],b[0],b[2]);if(4===b.length)return a(b[1],b[0],b[2],b[3]);throw Error("R.flip doesn\'t work with arity > 4");}}function flip$$module$node_modules$rambda$dist$rambda_mjs(a){return flipFn$$module$node_modules$rambda$dist$rambda_mjs(a)}\nfunction forEach$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>forEach$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(void 0!==b){if(isArray$$module$node_modules$rambda$dist$rambda_mjs(b))for(var c=0,d=b.length;c<d;)a(b[c]),c++;else{c=0;d=keys$1$$module$node_modules$rambda$dist$rambda_mjs(b);const e=d.length;for(;c<e;){const f=d[c];a(b[f],f,b);c++}}return b}}\nfunction fromPairs$$module$node_modules$rambda$dist$rambda_mjs(a){const b={};a.forEach(([c,d])=>b[c]=d);return b}function groupBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>groupBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c={};for(let d=0;d<b.length;d++){const e=b[d],f=a(e);c[f]||(c[f]=[]);c[f].push(e)}return c}\nfunction groupWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw new TypeError("list.reduce is not a function");const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(b);if(1===b.length)return[c];const d=[];let e=[];c.reduce((f,g,h)=>{if(0===h)return g;const k=a(f,g),l=0===e.length;h=h===b.length-1;if(k)return l&&e.push(f),e.push(g),h&&d.push(e),g;if(l)return d.push([f]),h&&d.push([g]),g;d.push(e);h&&d.push([g]);e=[];return g},\nvoid 0);return d}function has$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>has$$module$node_modules$rambda$dist$rambda_mjs(a,c):b?b.hasOwnProperty(a):!1}function createPath$$module$node_modules$rambda$dist$rambda_mjs(a,b="."){return"string"===typeof a?a.split(b):a}\nfunction path$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>path$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=b,d=0,e=createPath$$module$node_modules$rambda$dist$rambda_mjs(a);d<e.length;){if(null===c||void 0===c||null===c[e[d]])return;c=c[e[d]];d++}return c}}\nfunction hasPath$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>hasPath$$module$node_modules$rambda$dist$rambda_mjs(a,c):void 0!==path$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function head$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a[0]||"":a[0]}function _objectIs$$module$node_modules$rambda$dist$rambda_mjs(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b}const objectIs$$module$node_modules$rambda$dist$rambda_mjs=Object.is||_objectIs$$module$node_modules$rambda$dist$rambda_mjs;\nfunction identical$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>identical$$module$node_modules$rambda$dist$rambda_mjs(a,c):objectIs$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function identity$$module$node_modules$rambda$dist$rambda_mjs(a){return a}function ifElseFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return(...d)=>!0===("boolean"===typeof a?a:a(...d))?b(...d):c(...d)}\nconst ifElse$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(ifElseFn$$module$node_modules$rambda$dist$rambda_mjs),inc$$module$node_modules$rambda$dist$rambda_mjs=a=>a+1;function indexByPath$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={};for(let d=0;d<b.length;d++){const e=b[d];c[path$$module$node_modules$rambda$dist$rambda_mjs(a,e)]=e}return c}\nfunction indexBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>indexBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof a)return indexByPath$$module$node_modules$rambda$dist$rambda_mjs(a,b);const c={};for(let d=0;d<b.length;d++){const e=b[d];c[a(e)]=e}return c}\nfunction indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function baseSlice$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){let d=-1,{length:e}=a;c=c>e?e:c;0>c&&(c+=e);e=b>c?0:c-b>>>0;b>>>=0;for(c=Array(e);++d<e;)c[d]=a[d+b];return c}\nfunction init$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a.slice(0,-1):a.length?baseSlice$$module$node_modules$rambda$dist$rambda_mjs(a,0,-1):[]}function intersection$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>intersection$$module$node_modules$rambda$dist$rambda_mjs(a,c):filter$$module$node_modules$rambda$dist$rambda_mjs(c=>includes$$module$node_modules$rambda$dist$rambda_mjs(c,a),b)}\nfunction intersperse$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>intersperse$$module$node_modules$rambda$dist$rambda_mjs(a,f);let c=-1;const d=b.length,e=[];for(;++c<d;)c===d-1?e.push(b[c]):e.push(b[c],a);return e}function is$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>is$$module$node_modules$rambda$dist$rambda_mjs(a,c):null!=b&&b.constructor===a||b instanceof a}\nfunction isEmpty$$module$node_modules$rambda$dist$rambda_mjs(a){const b=type$$module$node_modules$rambda$dist$rambda_mjs(a);return["Undefined","NaN","Number","Null"].includes(b)?!1:a?"Object"===b?0===Object.keys(a).length:"Array"===b?0===a.length:!1:!0}function isNil$$module$node_modules$rambda$dist$rambda_mjs(a){return void 0===a||null===a}\nfunction join$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>join$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.join(a)}function juxt$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>a.map(c=>c(...b))}function keys$$module$node_modules$rambda$dist$rambda_mjs(a){return Object.keys(a)}function last$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a[a.length-1]||"":a[a.length-1]}\nfunction lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function length$$module$node_modules$rambda$dist$rambda_mjs(a){return isArray$$module$node_modules$rambda$dist$rambda_mjs(a)||"string"===typeof a?a.length:NaN}\nfunction lens$$module$node_modules$rambda$dist$rambda_mjs(a,b){return function(c){return function(d){return c(a(d)).map(e=>b(e,d))}}}function nth$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>nth$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=0>a?b.length+a:a;return"[object String]"===Object.prototype.toString.call(b)?b.charAt(c):b[c]}\nfunction updateFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);return-1===a?c.fill(b,a):c.fill(b,a,a+1)}const update$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(updateFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction lensIndex$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(nth$$module$node_modules$rambda$dist$rambda_mjs(a),update$$module$node_modules$rambda$dist$rambda_mjs(a))}function lensPath$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(path$$module$node_modules$rambda$dist$rambda_mjs(a),assocPath$$module$node_modules$rambda$dist$rambda_mjs(a))}\nfunction lensProp$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(prop$$module$node_modules$rambda$dist$rambda_mjs(a),assoc$$module$node_modules$rambda$dist$rambda_mjs(a))}function match$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>match$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=b.match(a);return null===c?[]:c}\nfunction mathMod$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mathMod$$module$node_modules$rambda$dist$rambda_mjs(a,c):!isInteger$$module$node_modules$rambda$dist$rambda_mjs(a)||!isInteger$$module$node_modules$rambda$dist$rambda_mjs(b)||1>b?NaN:(a%b+b)%b}function maxByFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)>a(b)?c:b}const maxBy$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(maxByFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction sum$$module$node_modules$rambda$dist$rambda_mjs(a){return a.reduce((b,c)=>b+c,0)}function mean$$module$node_modules$rambda$dist$rambda_mjs(a){return sum$$module$node_modules$rambda$dist$rambda_mjs(a)/a.length}function median$$module$node_modules$rambda$dist$rambda_mjs(a){var b=a.length;if(0===b)return NaN;const c=2-b%2;b=(b-c)/2;return mean$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(a,0).sort((d,e)=>d===e?0:d<e?-1:1).slice(b,b+c))}\nfunction mergeRight$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mergeRight$$module$node_modules$rambda$dist$rambda_mjs(a,c):Object.assign({},a||{},b||{})}function mergeAll$$module$node_modules$rambda$dist$rambda_mjs(a){let b={};map$$module$node_modules$rambda$dist$rambda_mjs(c=>{b=mergeRight$$module$node_modules$rambda$dist$rambda_mjs(b,c)},a);return b}\nfunction mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=clone$$module$node_modules$rambda$dist$rambda_mjs(a);Object.keys(b).forEach(d=>{"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(b[d])?"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?c[d]=mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a[d],b[d]):c[d]=b[d]:c[d]=b[d]});return c}\nfunction mergeLeft$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mergeLeft$$module$node_modules$rambda$dist$rambda_mjs(a,c):mergeRight$$module$node_modules$rambda$dist$rambda_mjs(b,a)}function mergeWithFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d={};Object.keys(b).forEach(e=>{d[e]=void 0===c[e]?b[e]:a(b[e],c[e])});Object.keys(c).forEach(e=>{void 0===d[e]&&(d[e]=void 0===b[e]?c[e]:a(b[e],c[e]))});return d}\nconst mergeWith$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(mergeWithFn$$module$node_modules$rambda$dist$rambda_mjs);function min$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>min$$module$node_modules$rambda$dist$rambda_mjs(a,c):b<a?b:a}function minByFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)<a(b)?c:b}const minBy$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(minByFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction ownKeys$$module$node_modules$rambda$dist$rambda_mjs(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}));c.push.apply(c,d)}return c}\nfunction _objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{};b%2?ownKeys$$module$node_modules$rambda$dist$rambda_mjs(Object(c),!0).forEach(function(d){_defineProperty$$module$node_modules$rambda$dist$rambda_mjs(a,d,c[d])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(c)):ownKeys$$module$node_modules$rambda$dist$rambda_mjs(Object(c)).forEach(function(d){Object.defineProperty(a,\nd,Object.getOwnPropertyDescriptor(c,d))})}return a}function _defineProperty$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c;return a}function isIterable$$module$node_modules$rambda$dist$rambda_mjs(a){return Array.isArray(a)||"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(a)}\nfunction modifyFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return isIterable$$module$node_modules$rambda$dist$rambda_mjs(c)&&void 0!==c[a]?isArray$$module$node_modules$rambda$dist$rambda_mjs(c)?updateFn$$module$node_modules$rambda$dist$rambda_mjs(a,b(c[a]),c):_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},c),{},{[a]:b(c[a])}):c}const modify$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(modifyFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){a=createPath$$module$node_modules$rambda$dist$rambda_mjs(a);if(1===a.length)return _objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},c),{},{[a[0]]:b(c[a[0]])});if(void 0===path$$module$node_modules$rambda$dist$rambda_mjs(a,c))return c;b=modifyPath$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(a,1),b,c[a[0]]);return b===c[a[0]]?c:assoc$$module$node_modules$rambda$dist$rambda_mjs(a[0],\nb,c)}const modifyPath$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs);function modulo$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>modulo$$module$node_modules$rambda$dist$rambda_mjs(a,c):a%b}\nfunction moveFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(0>a||0>b)throw Error("Rambda.move does not support negative indexes");if(a>c.length-1||b>c.length-1)return c;const d=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);d[a]=c[b];d[b]=c[a];return d}const move$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(moveFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction multiply$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>multiply$$module$node_modules$rambda$dist$rambda_mjs(a,c):a*b}function negate$$module$node_modules$rambda$dist$rambda_mjs(a){return-a}function none$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>none$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(let c=0;c<b.length;c++)if(a(b[c]))return!1;return!0}\nfunction not$$module$node_modules$rambda$dist$rambda_mjs(a){return!a}function objOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>objOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):{[a]:b}}function of$$module$node_modules$rambda$dist$rambda_mjs(a){return[a]}\nfunction omit$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>omit$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(null!==b&&void 0!==b){var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={};for(const e in b)c.includes(e)||(d[e]=b[e]);return d}}\nfunction on$$module$node_modules$rambda$dist$rambda_mjs(a,b,c,d){return 3===arguments.length?e=>on$$module$node_modules$rambda$dist$rambda_mjs(a,b,c,e):2===arguments.length?(e,f)=>on$$module$node_modules$rambda$dist$rambda_mjs(a,b,e,f):a(b(c),b(d))}function onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b){let c;return function(){a&&(c=a.apply(b||this,arguments),a=null);return c}}\nfunction once$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length){const c=onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b);return curry$$module$node_modules$rambda$dist$rambda_mjs(c)}return onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function or$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>or$$module$node_modules$rambda$dist$rambda_mjs(a,c):a||b}const Identity$$module$node_modules$rambda$dist$rambda_mjs=a=>({x:a,map:b=>Identity$$module$node_modules$rambda$dist$rambda_mjs(b(a))});\nfunction overFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(d=>Identity$$module$node_modules$rambda$dist$rambda_mjs(b(d)))(c).x}const over$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(overFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction partial$$module$node_modules$rambda$dist$rambda_mjs(a,...b){const c=a.length;return(...d)=>b.length+d.length>=c?a(...b,...d):partial$$module$node_modules$rambda$dist$rambda_mjs(a,...[...b,...d])}function partialObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return c=>a(mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(c,b))}\nfunction partitionObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={},d={};Object.entries(b).forEach(([e,f])=>{a(f,e)?c[e]=f:d[e]=f});return[c,d]}function partitionArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){const d=[],e=[];let f=-1;for(;f++<b.length-1;)(c?a(b[f],f):a(b[f]))?d.push(b[f]):e.push(b[f]);return[d,e]}\nfunction partition$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>partition$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?partitionArray$$module$node_modules$rambda$dist$rambda_mjs(a,b):partitionObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}\nfunction pathEqFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return equals$$module$node_modules$rambda$dist$rambda_mjs(path$$module$node_modules$rambda$dist$rambda_mjs(a,c),b)}const pathEq$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(pathEqFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction pathOrFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,path$$module$node_modules$rambda$dist$rambda_mjs(b,c))}const pathOr$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(pathOrFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction paths$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>paths$$module$node_modules$rambda$dist$rambda_mjs(a,c):a.map(c=>path$$module$node_modules$rambda$dist$rambda_mjs(c,b))}\nfunction pick$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>pick$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={},e=0;e<c.length;)c[e]in b&&(d[c[e]]=b[c[e]]),e++;return d}}\nfunction pickAll$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>pickAll$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={},e=0;e<c.length;)d[c[e]]=c[e]in b?b[c[e]]:void 0,e++;return d}}\nfunction pluck$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>pluck$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=[];map$$module$node_modules$rambda$dist$rambda_mjs(d=>{void 0!==d[a]&&c.push(d[a])},b);return c}function prepend$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>prepend$$module$node_modules$rambda$dist$rambda_mjs(a,c):"string"===typeof b?[a].concat(b.split("")):[a].concat(b)}\nconst product$$module$node_modules$rambda$dist$rambda_mjs=reduce$$module$node_modules$rambda$dist$rambda_mjs(multiply$$module$node_modules$rambda$dist$rambda_mjs,1);function propEqFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c?equals$$module$node_modules$rambda$dist$rambda_mjs(b,prop$$module$node_modules$rambda$dist$rambda_mjs(a,c)):!1}const propEq$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propEqFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction propIsFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return is$$module$node_modules$rambda$dist$rambda_mjs(a,c[b])}const propIs$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propIsFn$$module$node_modules$rambda$dist$rambda_mjs);function propOrFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c?defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,c[b]):a}const propOr$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propOrFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction props$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>props$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error("propsToPick is not a list");return mapArray$$module$node_modules$rambda$dist$rambda_mjs(c=>b[c],a)}function propSatisfiesFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(prop$$module$node_modules$rambda$dist$rambda_mjs(b,c))}\nconst propSatisfies$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propSatisfiesFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction range$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>range$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(Number.isNaN(Number(a))||Number.isNaN(Number(b)))throw new TypeError("Both arguments to range must be numbers");if(b<a)return[];const c=b-a,d=Array(c);for(let e=0;e<c;e++)d[e]=a+e;return d}\nfunction reject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>reject$$module$node_modules$rambda$dist$rambda_mjs(a,c):filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!a(c),b)}function repeat$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>repeat$$module$node_modules$rambda$dist$rambda_mjs(a,c):Array(b).fill(a)}function replaceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c.replace(a,b)}\nconst replace$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(replaceFn$$module$node_modules$rambda$dist$rambda_mjs);function reverse$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a.split("").reverse().join(""):a.slice().reverse()}function setFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return over$$module$node_modules$rambda$dist$rambda_mjs(a,always$$module$node_modules$rambda$dist$rambda_mjs(b),c)}\nconst set$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(setFn$$module$node_modules$rambda$dist$rambda_mjs);function sliceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c.slice(a,b)}const slice$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(sliceFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction sort$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>sort$$module$node_modules$rambda$dist$rambda_mjs(a,c):cloneList$$module$node_modules$rambda$dist$rambda_mjs(b).sort(a)}function sortBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>sortBy$$module$node_modules$rambda$dist$rambda_mjs(a,c):cloneList$$module$node_modules$rambda$dist$rambda_mjs(b).sort((c,d)=>{c=a(c);d=a(d);return c===d?0:c<d?-1:1})}\nfunction split$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>split$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.split(a)}function maybe$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){b=a&&"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(b)?b():b;c=a||"Function"!==type$$module$node_modules$rambda$dist$rambda_mjs(c)?c:c();return a?b:c}\nfunction take$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>take$$module$node_modules$rambda$dist$rambda_mjs(a,c):0>a?b.slice():"string"===typeof b?b.slice(0,a):baseSlice$$module$node_modules$rambda$dist$rambda_mjs(b,0,a)}\nfunction splitAt$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>splitAt$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(!b)throw new TypeError(`Cannot read property \'slice\' of ${b}`);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b)&&"string"!==typeof b)return[[],[]];const c=maybe$$module$node_modules$rambda$dist$rambda_mjs(0>a,0>b.length+a?0:b.length+a,a);return[take$$module$node_modules$rambda$dist$rambda_mjs(c,b),drop$$module$node_modules$rambda$dist$rambda_mjs(c,\nb)]}function splitEvery$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>splitEvery$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(1>a)throw Error("First argument to splitEvery must be a positive integer");const c=[];let d=0;for(;d<b.length;)c.push(b.slice(d,d+=a));return c}\nfunction splitWhen$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>splitWhen$$module$node_modules$rambda$dist$rambda_mjs(a,g);if(!b)throw new TypeError(`Cannot read property \'length\' of ${b}`);const c=[],d=[];let e=!1,f=-1;for(;f++<b.length-1;)e?d.push(b[f]):a(b[f])?(d.push(b[f]),e=!0):c.push(b[f]);return[c,d]}\nfunction startsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>startsWith$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof b)return b.startsWith(a);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))return!1;let c=!0;return a.filter((d,e)=>{if(!c)return!1;(d=equals$$module$node_modules$rambda$dist$rambda_mjs(d,b[e]))||(c=!1);return d}).length===a.length}\nfunction subtract$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>subtract$$module$node_modules$rambda$dist$rambda_mjs(a,c):a-b}\nfunction symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs(a,c):concat$$module$node_modules$rambda$dist$rambda_mjs(filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,b),a),filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,a),b))}\nfunction T$$module$node_modules$rambda$dist$rambda_mjs(){return!0}function tail$$module$node_modules$rambda$dist$rambda_mjs(a){return drop$$module$node_modules$rambda$dist$rambda_mjs(1,a)}\nfunction takeLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>takeLast$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=b.length;if(0>a)return b.slice();let d=a>c?c:a;return"string"===typeof b?b.slice(c-d):baseSlice$$module$node_modules$rambda$dist$rambda_mjs(b,c-d,c)}\nfunction takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(0===b.length)return b;let c=!1;const d=[];let e=b.length;for(;!c||0===e;)e--,!1===a(b[e])?c=!0:c||d.push(b[e]);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?d.reverse():d.reverse().join("")}\nfunction takeWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>takeWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if(!c&&"string"!==typeof b)throw Error("`iterable` is neither list nor a string");let d=!0;const e=[];let f=-1;for(;f++<b.length-1;)a(b[f])?d&&e.push(b[f]):d&&(d=!1);return c?e:e.join("")}\nfunction tap$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>tap$$module$node_modules$rambda$dist$rambda_mjs(a,c);a(b);return b}function test$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>test$$module$node_modules$rambda$dist$rambda_mjs(a,c);if("string"===typeof a)throw new TypeError(`\\u2018test\\u2019 requires a value of type RegExp as its first argument; received "${a}"`);return-1!==b.search(a)}\nfunction times$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>times$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!isInteger$$module$node_modules$rambda$dist$rambda_mjs(b)||0>b)throw new RangeError("n must be an integer");return map$$module$node_modules$rambda$dist$rambda_mjs(a,range$$module$node_modules$rambda$dist$rambda_mjs(0,b))}function toLower$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toLowerCase()}\nfunction toPairs$$module$node_modules$rambda$dist$rambda_mjs(a){return Object.entries(a)}function toString$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toString()}function toUpper$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toUpperCase()}function transpose$$module$node_modules$rambda$dist$rambda_mjs(a){return a.reduce((b,c)=>{c.forEach((d,e)=>isArray$$module$node_modules$rambda$dist$rambda_mjs(b[e])?b[e].push(d):b.push([d]));return b},[])}\nfunction trim$$module$node_modules$rambda$dist$rambda_mjs(a){return a.trim()}const isFunction$$module$node_modules$rambda$dist$rambda_mjs=a=>["Promise","Function"].includes(type$$module$node_modules$rambda$dist$rambda_mjs(a));\nfunction tryCatch$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isFunction$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error(`R.tryCatch | fn \'${a}\'`);const c=isFunction$$module$node_modules$rambda$dist$rambda_mjs(b);return(...d)=>{try{return a(...d)}catch(e){return c?b(e,...d):b}}}function unapply$$module$node_modules$rambda$dist$rambda_mjs(a){return function(...b){return a.call(this,b)}}\nfunction union$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>union$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(a);b.forEach(d=>{includes$$module$node_modules$rambda$dist$rambda_mjs(d,a)||c.push(d)});return c}\nfunction uniqBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>uniqBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=new Set;return b.filter(d=>{if(c.has(a(d)))return!1;c.add(a(d));return!0})}function includesWith$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){let d=!1,e=-1;for(;++e<c.length&&!d;)a(b,c[e])&&(d=!0);return d}\nfunction uniqWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>uniqWith$$module$node_modules$rambda$dist$rambda_mjs(a,e);let c=-1;const d=[];for(;++c<b.length;){const e=b[c];includesWith$$module$node_modules$rambda$dist$rambda_mjs(a,e,d)||d.push(e)}return d}function unless$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>unless$$module$node_modules$rambda$dist$rambda_mjs(a,c):c=>a(c)?c:b(c)}\nfunction unwind$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>unwind$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b[a])?mapArray$$module$node_modules$rambda$dist$rambda_mjs(c=>_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},b),{},{[a]:c}),b[a]):[b]}\nfunction values$$module$node_modules$rambda$dist$rambda_mjs(a){return"Object"!==type$$module$node_modules$rambda$dist$rambda_mjs(a)?[]:Object.values(a)}const Const$$module$node_modules$rambda$dist$rambda_mjs=a=>({x:a,map:b=>Const$$module$node_modules$rambda$dist$rambda_mjs(a)});function view$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>view$$module$node_modules$rambda$dist$rambda_mjs(a,c):a(Const$$module$node_modules$rambda$dist$rambda_mjs)(b).x}\nfunction whenFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)?b(c):c}const when$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(whenFn$$module$node_modules$rambda$dist$rambda_mjs);function where$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(void 0===b)return d=>where$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=!0;for(const d in a){if(!c)continue;const e=a[d](b[d]);c&&!1===e&&(c=!1)}return c}\nfunction whereAny$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(void 0===b)return c=>whereAny$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(const c in a)if(a[c](b[c]))return!0;return!1}\nfunction whereEq$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>whereEq$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=filter$$module$node_modules$rambda$dist$rambda_mjs((d,e)=>equals$$module$node_modules$rambda$dist$rambda_mjs(d,b[e]),a);return Object.keys(c).length===Object.keys(a).length}\nfunction without$$module$node_modules$rambda$dist$rambda_mjs(a,b){return void 0===b?c=>without$$module$node_modules$rambda$dist$rambda_mjs(a,c):reduce$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>-1<_indexOf$$module$node_modules$rambda$dist$rambda_mjs(d,a)?c:c.concat(d),[],b)}function xor$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>xor$$module$node_modules$rambda$dist$rambda_mjs(a,c):!!a&&!b||!!b&&!a}\nfunction zip$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>zip$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=[],d=Math.min(a.length,b.length);for(let e=0;e<d;e++)c[e]=[a[e],b[e]];return c}function zipObj$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>zipObj$$module$node_modules$rambda$dist$rambda_mjs(a,c):take$$module$node_modules$rambda$dist$rambda_mjs(b.length,a).reduce((c,d,e)=>{c[d]=b[e];return c},{})}\nfunction zipWithFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return take$$module$node_modules$rambda$dist$rambda_mjs(b.length>c.length?c.length:b.length,b).map((d,e)=>a(d,c[e]))}const zipWith$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(zipWithFn$$module$node_modules$rambda$dist$rambda_mjs);var module$node_modules$rambda$dist$rambda_mjs={};module$node_modules$rambda$dist$rambda_mjs.F=F$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.T=T$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.__findHighestArity=__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._arity=_arity$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._indexOf=_indexOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._lastIndexOf=_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs._pipe=_pipe$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.add=add$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.adjust=adjust$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.all=all$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.allPass=allPass$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.always=always$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.and=and$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.any=any$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.anyPass=anyPass$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.append=append$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.apply=apply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.applySpec=applySpec$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.assoc=assoc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.assocPath=assocPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.bind=bind$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.both=both$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.chain=chain$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.clamp=clamp$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.clone=clone$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.complement=complement$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.compose=compose$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.concat=concat$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.cond=cond$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.converge=converge$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.count=count$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.countBy=countBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.curry=curry$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.curryN=curryN$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dec=dec$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.defaultTo=defaultTo$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.difference=difference$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dissoc=dissoc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.divide=divide$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.drop=drop$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropLast=dropLast$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.dropLastWhile=dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropRepeats=dropRepeats$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropRepeatsWith=dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropWhile=dropWhile$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.either=either$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.endsWith=endsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.eqProps=eqProps$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.equals=equals$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.evolve=evolve$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.evolveArray=evolveArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.evolveObject=evolveObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filter=filter$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filterArray=filterArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filterObject=filterObject$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.find=find$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findIndex=findIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findLast=findLast$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findLastIndex=findLastIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.flatten=flatten$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.flip=flip$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.forEach=forEach$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.fromPairs=fromPairs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.groupBy=groupBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.groupWith=groupWith$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.has=has$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.hasPath=hasPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.head=head$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.identical=identical$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.identity=identity$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.ifElse=ifElse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.inc=inc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.includes=includes$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.indexBy=indexBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.indexOf=indexOf$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.init=init$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.intersection=intersection$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.intersperse=intersperse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.is=is$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.isEmpty=isEmpty$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.isNil=isNil$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.join=join$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.juxt=juxt$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.keys=keys$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.last=last$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.lastIndexOf=lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.length=length$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lens=lens$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lensIndex=lensIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lensPath=lensPath$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.lensProp=lensProp$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.map=map$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapArray=mapArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapObjIndexed=mapObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapObject=mapObject$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.match=match$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mathMod=mathMod$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.max=max$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.maxBy=maxBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.maxByFn=maxByFn$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.mean=mean$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.median=median$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.merge=mergeRight$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeAll=mergeAll$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeDeepRight=mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.mergeLeft=mergeLeft$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeRight=mergeRight$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeWith=mergeWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.min=min$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.minBy=minBy$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.minByFn=minByFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modify=modify$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modifyPath=modifyPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modifyPathFn=modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modulo=modulo$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.move=move$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.multiply=multiply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.negate=negate$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.none=none$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.not=not$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.nth=nth$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.objOf=objOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.of=of$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.omit=omit$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.on=on$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.once=once$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.or=or$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.over=over$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partial=partial$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partialObject=partialObject$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.partition=partition$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partitionArray=partitionArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partitionObject=partitionObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.path=path$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pathEq=pathEq$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.pathOr=pathOr$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.paths=paths$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pick=pick$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pickAll=pickAll$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pipe=pipe$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.pluck=pluck$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.prepend=prepend$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.product=product$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.prop=prop$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propEq=propEq$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.propIs=propIs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propOr=propOr$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propSatisfies=propSatisfies$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.props=props$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.range=range$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.reduce=reduce$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reduceFn=reduceFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reduceStopper=reduceStopper$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reject=reject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.repeat=repeat$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.replace=replace$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reverse=reverse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.set=set$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.slice=slice$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.sort=sort$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.sortBy=sortBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.split=split$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitAt=splitAt$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitEvery=splitEvery$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitWhen=splitWhen$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.startsWith=startsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.subtract=subtract$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.sum=sum$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.symmetricDifference=symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tail=tail$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.take=take$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeLast=takeLast$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeLastWhile=takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeWhile=takeWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tap=tap$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.test=test$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.times=times$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toLower=toLower$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toPairs=toPairs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toString=toString$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.toUpper=toUpper$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.transpose=transpose$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.trim=trim$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tryCatch=tryCatch$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.type=type$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.unapply=unapply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.union=union$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniq=uniq$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniqBy=uniqBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniqWith=uniqWith$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.unless=unless$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.unwind=unwind$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.update=update$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.updateFn=updateFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.values=values$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.view=view$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.when=when$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.where=where$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.whereAny=whereAny$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.whereEq=whereEq$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.without=without$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.xor=xor$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zip=zip$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zipObj=zipObj$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zipWith=zipWith$$module$node_modules$rambda$dist$rambda_mjs;const csoundSetMidiCallbacks$$module$src$modules$rtmidi=a=>b=>{a.exports.csoundSetMidiCallbacks(b)},csoundGetMIDIDevList$$module$src$modules$rtmidi=a=>(b,c)=>{const {buffer:d}=a.wasi.memory,e=a.exports.csoundGetMIDIDevList(b,void 0,c?1:0);if(0===e)return[];const f=sizeofStruct$$module$src$utils$native_sizes(CS_MIDIDEVICE$$module$src$structures),g=a.exports.allocCsMidiDeviceStruct(e);a.exports.csoundGetMIDIDevList(b,g,c?1:0);const h=new Uint8Array(d,g,f*e);b=range$$module$node_modules$rambda$dist$rambda_mjs(0,\ne).map(k=>structBufferToObject$$module$src$utils$structure_buffer_to_object(CS_MIDIDEVICE$$module$src$structures,h.subarray(k*f,f)));a.exports.freeCsMidiDeviceStruct(g);return b};csoundGetMIDIDevList$$module$src$modules$rtmidi.toString=()=>"getMIDIDevList = async (isOutput) => Object;";\nconst csoundGetRtMidiName$$module$src$modules$rtmidi=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.getRtMidiName(b);c=new Uint8Array(c,b,128);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""};csoundGetRtMidiName$$module$src$modules$rtmidi.toString=()=>"getRtMidiName = async () => String;";\nconst csoundGetMidiOutFileName$$module$src$modules$rtmidi=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.getMidiOutFileName(b);c=new Uint8Array(c,b,128);b&&0<b.length&&freeStringPtr$$module$src$utils$string_pointers(a,b);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""},_isRequestingRtMidiInput$$module$src$modules$rtmidi=a=>b=>a.exports.isRequestingRtMidiInput(b),csoundPushMidiMessage$$module$src$modules$rtmidi=a=>(b,c,d,e)=>{a.exports.pushMidiMessage(b,\nc,d,e)};csoundPushMidiMessage$$module$src$modules$rtmidi.toString=()=>"midiMessage = async (status, data1, data2) => undefined;";var module$src$modules$rtmidi={};module$src$modules$rtmidi._isRequestingRtMidiInput=_isRequestingRtMidiInput$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundGetMIDIDevList=csoundGetMIDIDevList$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundGetMidiOutFileName=csoundGetMidiOutFileName$$module$src$modules$rtmidi;\nmodule$src$modules$rtmidi.csoundGetRtMidiName=csoundGetRtMidiName$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundPushMidiMessage=csoundPushMidiMessage$$module$src$modules$rtmidi;module$src$modules$rtmidi.csoundSetMidiCallbacks=csoundSetMidiCallbacks$$module$src$modules$rtmidi;const csoundInputMessage$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundInputMessage(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundInputMessage$$module$src$modules$control_events.toString=()=>"inputMessage = async (scoreEvent) => Number;";\nconst csoundInputMessageAsync$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundInputMessageAsync(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundInputMessageAsync$$module$src$modules$control_events.toString=()=>"inputMessageAsync = async (scoreEvent) => Number;";\nconst csoundGetControlChannel$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundGetControlChannelWasi(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundGetControlChannel$$module$src$modules$control_events.toString=()=>"getControlChannel = async (channelName) => Number;";\nconst csoundSetControlChannel$$module$src$modules$control_events=a=>(b,c,d)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);a.exports.csoundSetControlChannel(b,c,d);freeStringPtr$$module$src$utils$string_pointers(a,c)};csoundSetControlChannel$$module$src$modules$control_events.toString=()=>"setControlChannel = async (channelName, value) => void;";\nconst csoundGetStringChannel$$module$src$modules$control_events=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundGetStringChannelWasi(b,c);const d=ptr2string$$module$src$utils$string_pointers(a,b);freeStringPtr$$module$src$utils$string_pointers(a,c);freeStringPtr$$module$src$utils$string_pointers(a,b);return d};csoundGetStringChannel$$module$src$modules$control_events.toString=()=>"getStringChannel = async (channelName) => String;";\nconst csoundSetStringChannel$$module$src$modules$control_events=a=>(b,c,d)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);d=string2ptr$$module$src$utils$string_pointers(a,d);a.exports.csoundSetStringChannel(b,c,d);freeStringPtr$$module$src$utils$string_pointers(a,c);freeStringPtr$$module$src$utils$string_pointers(a,d)};csoundSetStringChannel$$module$src$modules$control_events.toString=()=>"setStringChannel = async (channelName, value) => void;";var module$src$modules$control_events={};\nmodule$src$modules$control_events.csoundGetControlChannel=csoundGetControlChannel$$module$src$modules$control_events;module$src$modules$control_events.csoundGetStringChannel=csoundGetStringChannel$$module$src$modules$control_events;module$src$modules$control_events.csoundInputMessage=csoundInputMessage$$module$src$modules$control_events;module$src$modules$control_events.csoundInputMessageAsync=csoundInputMessageAsync$$module$src$modules$control_events;\nmodule$src$modules$control_events.csoundSetControlChannel=csoundSetControlChannel$$module$src$modules$control_events;module$src$modules$control_events.csoundSetStringChannel=csoundSetStringChannel$$module$src$modules$control_events;const csoundGetOutputName$$module$src$modules$general_io=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.csoundGetOutputName(b);c=new Uint8Array(c,b,64);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""};csoundGetOutputName$$module$src$modules$general_io.toString=()=>"getOutputName = async () => String;";\nconst csoundGetInputName$$module$src$modules$general_io=a=>b=>{var {buffer:c}=a.wasi.memory;b=a.exports.csoundGetInputName(b);c=new Uint8Array(c,b,64);return trimNull$$module$src$utils$trim_null(uint2String$$module$src$utils$text_encoders(c))||""};csoundGetInputName$$module$src$modules$general_io.toString=()=>"getInputName = async (csound) => String;";var module$src$modules$general_io={};module$src$modules$general_io.csoundGetInputName=csoundGetInputName$$module$src$modules$general_io;\nmodule$src$modules$general_io.csoundGetOutputName=csoundGetOutputName$$module$src$modules$general_io;const csoundAppendEnv$$module$src$modules$extra=a=>(b,c,d)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);d=string2ptr$$module$src$utils$string_pointers(a,d);b=a.exports.csoundAppendEnv(b,c,d);freeStringPtr$$module$src$utils$string_pointers(a,c);freeStringPtr$$module$src$utils$string_pointers(a,d);return b};csoundAppendEnv$$module$src$modules$extra.toString=()=>"appendEnv = async (csound, variable, value) => Number;";const csoundShouldDaemonize$$module$src$modules$extra=a=>b=>a.exports.csoundShouldDaemonize(b);\nvar module$src$modules$extra={};module$src$modules$extra.csoundAppendEnv=csoundAppendEnv$$module$src$modules$extra;module$src$modules$extra.csoundShouldDaemonize=csoundShouldDaemonize$$module$src$modules$extra;const csoundIsScorePending$$module$src$modules$score_handling=a=>b=>a.exports.csoundIsScorePending(b);csoundIsScorePending$$module$src$modules$score_handling.toString=()=>"isScorePending = async () => Number;";const csoundSetScorePending$$module$src$modules$score_handling=a=>(b,c)=>a.exports.csoundSetScorePending(b,c);csoundSetScorePending$$module$src$modules$score_handling.toString=()=>"setScorePending = async (pending) => Number;";\nconst csoundReadScore$$module$src$modules$score_handling=a=>(b,c)=>{c=string2ptr$$module$src$utils$string_pointers(a,c);b=a.exports.csoundReadScore(b,c);freeStringPtr$$module$src$utils$string_pointers(a,c);return b};csoundReadScore$$module$src$modules$score_handling.toString=()=>"readScore = async (score) => Number;";const csoundGetScoreTime$$module$src$modules$score_handling=a=>b=>a.exports.csoundGetScoreTime(b);csoundGetScoreTime$$module$src$modules$score_handling.toString=()=>"getScoreTime = async () => Number;";\nconst csoundGetScoreOffsetSeconds$$module$src$modules$score_handling=a=>b=>a.exports.csoundGetScoreOffsetSeconds(b);csoundGetScoreOffsetSeconds$$module$src$modules$score_handling.toString=()=>"getScoreOffsetSeconds = async () => Number;";const csoundSetScoreOffsetSeconds$$module$src$modules$score_handling=a=>(b,c)=>a.exports.csoundSetScoreOffsetSeconds(b,c);csoundSetScoreOffsetSeconds$$module$src$modules$score_handling.toString=()=>"setScoreOffsetSeconds = async () => Number;";\nconst csoundRewindScore$$module$src$modules$score_handling=a=>b=>a.exports.csoundRewindScore(b);csoundRewindScore$$module$src$modules$score_handling.toString=()=>"rewindScore = async () => undefined;";var module$src$modules$score_handling={};module$src$modules$score_handling.csoundGetScoreOffsetSeconds=csoundGetScoreOffsetSeconds$$module$src$modules$score_handling;module$src$modules$score_handling.csoundGetScoreTime=csoundGetScoreTime$$module$src$modules$score_handling;\nmodule$src$modules$score_handling.csoundIsScorePending=csoundIsScorePending$$module$src$modules$score_handling;module$src$modules$score_handling.csoundReadScore=csoundReadScore$$module$src$modules$score_handling;module$src$modules$score_handling.csoundRewindScore=csoundRewindScore$$module$src$modules$score_handling;module$src$modules$score_handling.csoundSetScoreOffsetSeconds=csoundSetScoreOffsetSeconds$$module$src$modules$score_handling;module$src$modules$score_handling.csoundSetScorePending=csoundSetScorePending$$module$src$modules$score_handling;const csoundTableLength$$module$src$modules$table=a=>(b,c)=>a.exports.csoundTableLength(b,c);csoundTableLength$$module$src$modules$table.toString=()=>"tableLength = async (tableNum) => Number;";const csoundTableGet$$module$src$modules$table=a=>(b,c,d)=>a.exports.csoundTableGet(b,c,d);csoundTableGet$$module$src$modules$table.toString=()=>"tableGet = async (tableNum, tableIndex) => Number;";const csoundTableSet$$module$src$modules$table=a=>(b,c,d,e)=>a.exports.csoundTableSet(b,c,d,e);\ncsoundTableSet$$module$src$modules$table.toString=()=>"tableSet = async (tableNum, tableIndex, value) => undefined;";const csoundTableCopyIn$$module$src$modules$table=a=>(b,c,d)=>{const e=a.exports.allocFloatArray(d.length);(new Float64Array(a.wasi.memory.buffer,e,d.length)).set(d);a.exports.csoundTableCopyIn(b,c,e);a.exports.freeFloatArrayMem(e)};csoundTableCopyIn$$module$src$modules$table.toString=()=>"tableCopyIn = async (tableNum, float64Array) => undefined;";\nconst csoundTableCopyOut$$module$src$modules$table=a=>(b,c)=>{var d=a.exports.csoundTableLength(b,c);if(0<d){const e=a.exports.allocFloatArray(d);a.exports.csoundTableCopyOut(b,c,e);({buffer:b}=a.wasi.memory);d=new Float64Array(b,e,d);a.exports.freeFloatArrayMem(e);return Float64Array.from(d)}};csoundTableCopyOut$$module$src$modules$table.toString=()=>"tableCopyOut = async (tableNum) => ?Float64Array;";const csoundGetTable$$module$src$modules$table=csoundTableCopyOut$$module$src$modules$table;\ncsoundTableCopyOut$$module$src$modules$table.toString=csoundTableCopyOut$$module$src$modules$table.toString;const csoundGetTableArgs$$module$src$modules$table=a=>(b,c)=>{const d=a.exports.allocFloatArray(1024);a.exports.csoundGetTableArgs(b,d,c);({buffer:b}=a.wasi.memory);b=new Float64Array(b,d,1024);a.exports.freeFloatArrayMem(d);return b};csoundGetTableArgs$$module$src$modules$table.toString=()=>"getTableArgs = async (tableNum) => ?Float64Array;";\nconst csoundIsNamedGEN$$module$src$modules$table=a=>(b,c)=>a.exports.csoundIsNamedGEN(b,c);csoundIsNamedGEN$$module$src$modules$table.toString=()=>"isNamedGEN = async (tableNum) => number;";const csoundGetNamedGEN$$module$src$modules$table=a=>(b,c)=>{var d=a.exports.csoundIsNamedGEN(b,c);if(0<d){const e=a.exports.allocStringMem(d);a.exports.csoundGetNamedGEN(b,e,c,d);({buffer:b}=a.wasi.memory);d=new Uint8Array(b,e,d);return uint2String$$module$src$utils$text_encoders(d)}};\ncsoundGetNamedGEN$$module$src$modules$table.toString=()=>"getNamedGEN = async (tableNum) => ?string;";var module$src$modules$table={};module$src$modules$table.csoundGetNamedGEN=csoundGetNamedGEN$$module$src$modules$table;module$src$modules$table.csoundGetTable=csoundTableCopyOut$$module$src$modules$table;module$src$modules$table.csoundGetTableArgs=csoundGetTableArgs$$module$src$modules$table;module$src$modules$table.csoundIsNamedGEN=csoundIsNamedGEN$$module$src$modules$table;\nmodule$src$modules$table.csoundTableCopyIn=csoundTableCopyIn$$module$src$modules$table;module$src$modules$table.csoundTableCopyOut=csoundTableCopyOut$$module$src$modules$table;module$src$modules$table.csoundTableGet=csoundTableGet$$module$src$modules$table;module$src$modules$table.csoundTableLength=csoundTableLength$$module$src$modules$table;module$src$modules$table.csoundTableSet=csoundTableSet$$module$src$modules$table;function writeFile$$module$src$filesystem$worker_fs(a){return(b,c,d)=>{b="string"===typeof d?encoder$$module$src$utils$text_encoders.encode(d):d;a.wasi.writeFile(c,b)}}writeFile$$module$src$filesystem$worker_fs.toString=()=>"async (path, data) => void";function appendFile$$module$src$filesystem$worker_fs(a){return(b,c,d)=>{b="string"===typeof d?encoder$$module$src$utils$text_encoders.encode(d):d;a.wasi.appendFile(c,b)}}appendFile$$module$src$filesystem$worker_fs.toString=()=>"async (path, data) => void";\nfunction readFile$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.readFile(c)}readFile$$module$src$filesystem$worker_fs.toString=()=>"async (path) => ?Uint8Array";function unlink$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.unlink(c)}unlink$$module$src$filesystem$worker_fs.toString=()=>"async (path) => void";function readdir$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.readdir(c)}readdir$$module$src$filesystem$worker_fs.toString=()=>"async (path) => string[]";\nfunction mkdir$$module$src$filesystem$worker_fs(a){return(b,c)=>a.wasi.mkdir(c)}mkdir$$module$src$filesystem$worker_fs.toString=()=>"async (path) => void";var module$src$filesystem$worker_fs={};module$src$filesystem$worker_fs.appendFile=appendFile$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.mkdir=mkdir$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.readFile=readFile$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.readdir=readdir$$module$src$filesystem$worker_fs;\nmodule$src$filesystem$worker_fs.unlink=unlink$$module$src$filesystem$worker_fs;module$src$filesystem$worker_fs.writeFile=writeFile$$module$src$filesystem$worker_fs;const api$$module$src$libcsound={csoundCreate:csoundCreate$$module$src$modules$instantiation,csoundDestroy:csoundDestroy$$module$src$modules$instantiation,csoundGetAPIVersion:csoundGetAPIVersion$$module$src$modules$instantiation,csoundGetVersion:csoundGetVersion$$module$src$modules$instantiation,csoundInitialize:csoundInitialize$$module$src$modules$instantiation,csoundParseOrc:csoundParseOrc$$module$src$modules$performance,csoundCompileTree:csoundCompileTree$$module$src$modules$performance,csoundCompileOrc:csoundCompileOrc$$module$src$modules$performance,\ncsoundEvalCode:csoundEvalCode$$module$src$modules$performance,csoundStart:csoundStart$$module$src$modules$performance,csoundCompileCsd:csoundCompileCsd$$module$src$modules$performance,csoundCompileCsdText:csoundCompileCsdText$$module$src$modules$performance,csoundPerform:csoundPerform$$module$src$modules$performance,csoundPerformKsmps:csoundPerformKsmps$$module$src$modules$performance,csoundPerformBuffer:csoundPerformBuffer$$module$src$modules$performance,csoundStop:csoundStop$$module$src$modules$performance,\ncsoundCleanup:csoundCleanup$$module$src$modules$performance,csoundReset:csoundReset$$module$src$modules$performance,csoundGetSr:csoundGetSr$$module$src$modules$attributes,csoundGetKr:csoundGetKr$$module$src$modules$attributes,csoundGetKsmps:csoundGetKsmps$$module$src$modules$attributes,csoundGetNchnls:csoundGetNchnls$$module$src$modules$attributes,csoundGetNchnlsInput:csoundGetNchnlsInput$$module$src$modules$attributes,csoundGet0dBFS:csoundGet0dBFS$$module$src$modules$attributes,csoundGetA4:csoundGetA4$$module$src$modules$attributes,\ncsoundGetCurrentTimeSamples:csoundGetCurrentTimeSamples$$module$src$modules$attributes,csoundGetSizeOfMYFLT:csoundGetSizeOfMYFLT$$module$src$modules$attributes,csoundSetOption:csoundSetOption$$module$src$modules$attributes,csoundSetParams:csoundSetParams$$module$src$modules$attributes,csoundGetParams:csoundGetParams$$module$src$modules$attributes,csoundGetDebug:csoundGetDebug$$module$src$modules$attributes,csoundSetDebug:csoundSetDebug$$module$src$modules$attributes,csoundGetInputBufferSize:csoundGetInputBufferSize$$module$src$modules$rtaudio,\ncsoundGetOutputBufferSize:csoundGetOutputBufferSize$$module$src$modules$rtaudio,csoundGetInputBuffer:csoundGetInputBuffer$$module$src$modules$rtaudio,csoundGetOutputBuffer:csoundGetOutputBuffer$$module$src$modules$rtaudio,csoundGetSpin:csoundGetSpin$$module$src$modules$rtaudio,csoundGetSpout:csoundGetSpout$$module$src$modules$rtaudio,csoundGetMIDIDevList:csoundGetMIDIDevList$$module$src$modules$rtmidi,csoundSetMidiCallbacks:csoundSetMidiCallbacks$$module$src$modules$rtmidi,csoundGetRtMidiName:csoundGetRtMidiName$$module$src$modules$rtmidi,\ncsoundGetMidiOutFileName:csoundGetMidiOutFileName$$module$src$modules$rtmidi,csoundPushMidiMessage:csoundPushMidiMessage$$module$src$modules$rtmidi,_isRequestingRtMidiInput:_isRequestingRtMidiInput$$module$src$modules$rtmidi,csoundInputMessage:csoundInputMessage$$module$src$modules$control_events,csoundInputMessageAsync:csoundInputMessageAsync$$module$src$modules$control_events,csoundGetControlChannel:csoundGetControlChannel$$module$src$modules$control_events,csoundSetControlChannel:csoundSetControlChannel$$module$src$modules$control_events,\ncsoundGetStringChannel:csoundGetStringChannel$$module$src$modules$control_events,csoundSetStringChannel:csoundSetStringChannel$$module$src$modules$control_events,csoundGetInputName:csoundGetInputName$$module$src$modules$general_io,csoundGetOutputName:csoundGetOutputName$$module$src$modules$general_io,csoundAppendEnv:csoundAppendEnv$$module$src$modules$extra,csoundShouldDaemonize:csoundShouldDaemonize$$module$src$modules$extra,csoundIsScorePending:csoundIsScorePending$$module$src$modules$score_handling,\ncsoundSetScorePending:csoundSetScorePending$$module$src$modules$score_handling,csoundReadScore:csoundReadScore$$module$src$modules$score_handling,csoundGetScoreTime:csoundGetScoreTime$$module$src$modules$score_handling,csoundGetScoreOffsetSeconds:csoundGetScoreOffsetSeconds$$module$src$modules$score_handling,csoundSetScoreOffsetSeconds:csoundSetScoreOffsetSeconds$$module$src$modules$score_handling,csoundRewindScore:csoundRewindScore$$module$src$modules$score_handling,csoundTableLength:csoundTableLength$$module$src$modules$table,\ncsoundTableGet:csoundTableGet$$module$src$modules$table,csoundTableSet:csoundTableSet$$module$src$modules$table,csoundTableCopyIn:csoundTableCopyIn$$module$src$modules$table,csoundTableCopyOut:csoundTableCopyOut$$module$src$modules$table,csoundGetTable:csoundTableCopyOut$$module$src$modules$table,csoundGetTableArgs:csoundGetTableArgs$$module$src$modules$table,csoundIsNamedGEN:csoundIsNamedGEN$$module$src$modules$table,csoundGetNamedGEN:csoundGetNamedGEN$$module$src$modules$table,fs:module$src$filesystem$worker_fs};\nvar $jscompDefaultExport$$module$src$libcsound=function(a){return mergeAll$$module$node_modules$rambda$dist$rambda_mjs([reduce$$module$node_modules$rambda$dist$rambda_mjs((b,c)=>assoc$$module$node_modules$rambda$dist$rambda_mjs(c,api$$module$src$libcsound[c](a),b),{},keys$$module$node_modules$rambda$dist$rambda_mjs(dissoc$$module$node_modules$rambda$dist$rambda_mjs("fs")(api$$module$src$libcsound))),reduce$$module$node_modules$rambda$dist$rambda_mjs((b,c)=>assoc$$module$node_modules$rambda$dist$rambda_mjs(c,\napi$$module$src$libcsound.fs[c](a),b),{},keys$$module$node_modules$rambda$dist$rambda_mjs(module$src$filesystem$worker_fs))])},module$src$libcsound={};module$src$libcsound.api=api$$module$src$libcsound;module$src$libcsound.default=$jscompDefaultExport$$module$src$libcsound;const dlinit$$module$src$dlinit=(a,b,c,d)=>{if(b.exports.csoundModuleInit){var e=new WebAssembly.Global({value:"i32",mutable:!0},0),f=new WebAssembly.Global({value:"i32",mutable:!0},0),g=new WebAssembly.Global({value:"i32",mutable:!0},0);const h=new WebAssembly.Global({value:"i32",mutable:!0},0);let k=c.length;"function"===typeof b.exports.csoundModuleCreate&&(c.grow(1),e.value=k,c.set(k,b.exports.csoundModuleCreate),k+=1);"function"===typeof b.exports.csoundModuleInit&&(c.grow(1),f.value=k,c.set(k,\nb.exports.csoundModuleInit),k+=1);"function"===typeof b.exports.csoundModuleDestroy&&(c.grow(1),g.value=k,c.set(k,b.exports.csoundModuleDestroy),k+=1);"function"===typeof b.exports.csoundModuleErrorCodeToString&&(c.grow(1),h.value=k,c.set(k,b.exports.csoundModuleErrorCodeToString));a.exports.csoundWasiLoadPlugin(d,e,f,g,h)}else b.exports.csound_opcode_init||b.exports.csound_fgen_init?(e=new WebAssembly.Global({value:"i32",mutable:!0},0),f=new WebAssembly.Global({value:"i32",mutable:!0},0),g=c.length,\n"function"===typeof b.exports.csound_opcode_init&&(e.value=g,c.grow(1),c.set(g,b.exports.csound_opcode_init),g+=1),"function"===typeof b.exports.csound_fgen_init&&(f.value=g,c.grow(1),c.set(g,b.exports.csound_fgen_init)),a.exports.csoundWasiLoadOpcodeLibrary(d,f,e)):console.error("Plugin doesn\'t export nececcary functions to quality as csound plugin.")};var module$src$dlinit={};module$src$dlinit.dlinit=dlinit$$module$src$dlinit;void 0!==goog.global&&(goog.global={});goog.global.BigInt||(goog.global.BigInt=void 0===BigInt?Number:BigInt);\nconst WASI_ESUCCESS$$module$src$filesystem$constants=0,WASI_E2BIG$$module$src$filesystem$constants=1,WASI_EACCES$$module$src$filesystem$constants=2,WASI_EADDRINUSE$$module$src$filesystem$constants=3,WASI_EADDRNOTAVAIL$$module$src$filesystem$constants=4,WASI_EAFNOSUPPORT$$module$src$filesystem$constants=5,WASI_EAGAIN$$module$src$filesystem$constants=6,WASI_EALREADY$$module$src$filesystem$constants=7,WASI_EBADF$$module$src$filesystem$constants=8,WASI_EBADMSG$$module$src$filesystem$constants=9,WASI_EBUSY$$module$src$filesystem$constants=\n10,WASI_ECANCELED$$module$src$filesystem$constants=11,WASI_ECHILD$$module$src$filesystem$constants=12,WASI_ECONNABORTED$$module$src$filesystem$constants=13,WASI_ECONNREFUSED$$module$src$filesystem$constants=14,WASI_ECONNRESET$$module$src$filesystem$constants=15,WASI_EDEADLK$$module$src$filesystem$constants=16,WASI_EDESTADDRREQ$$module$src$filesystem$constants=17,WASI_EDOM$$module$src$filesystem$constants=18,WASI_EDQUOT$$module$src$filesystem$constants=19,WASI_EEXIST$$module$src$filesystem$constants=\n20,WASI_EFAULT$$module$src$filesystem$constants=21,WASI_EFBIG$$module$src$filesystem$constants=22,WASI_EHOSTUNREACH$$module$src$filesystem$constants=23,WASI_EIDRM$$module$src$filesystem$constants=24,WASI_EILSEQ$$module$src$filesystem$constants=25,WASI_EINPROGRESS$$module$src$filesystem$constants=26,WASI_EINTR$$module$src$filesystem$constants=27,WASI_EINVAL$$module$src$filesystem$constants=28,WASI_EIO$$module$src$filesystem$constants=29,WASI_EISCONN$$module$src$filesystem$constants=30,WASI_EISDIR$$module$src$filesystem$constants=\n31,WASI_ELOOP$$module$src$filesystem$constants=32,WASI_EMFILE$$module$src$filesystem$constants=33,WASI_EMLINK$$module$src$filesystem$constants=34,WASI_EMSGSIZE$$module$src$filesystem$constants=35,WASI_EMULTIHOP$$module$src$filesystem$constants=36,WASI_ENAMETOOLONG$$module$src$filesystem$constants=37,WASI_ENETDOWN$$module$src$filesystem$constants=38,WASI_ENETRESET$$module$src$filesystem$constants=39,WASI_ENETUNREACH$$module$src$filesystem$constants=40,WASI_ENFILE$$module$src$filesystem$constants=41,\nWASI_ENOBUFS$$module$src$filesystem$constants=42,WASI_ENODEV$$module$src$filesystem$constants=43,WASI_ENOENT$$module$src$filesystem$constants=44,WASI_ENOEXEC$$module$src$filesystem$constants=45,WASI_ENOLCK$$module$src$filesystem$constants=46,WASI_ENOLINK$$module$src$filesystem$constants=47,WASI_ENOMEM$$module$src$filesystem$constants=48,WASI_ENOMSG$$module$src$filesystem$constants=49,WASI_ENOPROTOOPT$$module$src$filesystem$constants=50,WASI_ENOSPC$$module$src$filesystem$constants=51,WASI_ENOSYS$$module$src$filesystem$constants=\n52,WASI_ENOTCONN$$module$src$filesystem$constants=53,WASI_ENOTDIR$$module$src$filesystem$constants=54,WASI_ENOTEMPTY$$module$src$filesystem$constants=55,WASI_ENOTRECOVERABLE$$module$src$filesystem$constants=56,WASI_ENOTSOCK$$module$src$filesystem$constants=57,WASI_ENOTSUP$$module$src$filesystem$constants=58,WASI_ENOTTY$$module$src$filesystem$constants=59,WASI_ENXIO$$module$src$filesystem$constants=60,WASI_EOVERFLOW$$module$src$filesystem$constants=61,WASI_EOWNERDEAD$$module$src$filesystem$constants=\n62,WASI_EPERM$$module$src$filesystem$constants=63,WASI_EPIPE$$module$src$filesystem$constants=64,WASI_EPROTO$$module$src$filesystem$constants=65,WASI_EPROTONOSUPPORT$$module$src$filesystem$constants=66,WASI_EPROTOTYPE$$module$src$filesystem$constants=67,WASI_ERANGE$$module$src$filesystem$constants=68,WASI_EROFS$$module$src$filesystem$constants=69,WASI_ESPIPE$$module$src$filesystem$constants=70,WASI_ESRCH$$module$src$filesystem$constants=71,WASI_ESTALE$$module$src$filesystem$constants=72,WASI_ETIMEDOUT$$module$src$filesystem$constants=\n73,WASI_ETXTBSY$$module$src$filesystem$constants=74,WASI_EXDEV$$module$src$filesystem$constants=75,WASI_ENOTCAPABLE$$module$src$filesystem$constants=76,WASI_SIGABRT$$module$src$filesystem$constants=0,WASI_SIGALRM$$module$src$filesystem$constants=1,WASI_SIGBUS$$module$src$filesystem$constants=2,WASI_SIGCHLD$$module$src$filesystem$constants=3,WASI_SIGCONT$$module$src$filesystem$constants=4,WASI_SIGFPE$$module$src$filesystem$constants=5,WASI_SIGHUP$$module$src$filesystem$constants=6,WASI_SIGILL$$module$src$filesystem$constants=\n7,WASI_SIGINT$$module$src$filesystem$constants=8,WASI_SIGKILL$$module$src$filesystem$constants=9,WASI_SIGPIPE$$module$src$filesystem$constants=10,WASI_SIGQUIT$$module$src$filesystem$constants=11,WASI_SIGSEGV$$module$src$filesystem$constants=12,WASI_SIGSTOP$$module$src$filesystem$constants=13,WASI_SIGTERM$$module$src$filesystem$constants=14,WASI_SIGTRAP$$module$src$filesystem$constants=15,WASI_SIGTSTP$$module$src$filesystem$constants=16,WASI_SIGTTIN$$module$src$filesystem$constants=17,WASI_SIGTTOU$$module$src$filesystem$constants=\n18,WASI_SIGURG$$module$src$filesystem$constants=19,WASI_SIGUSR1$$module$src$filesystem$constants=20,WASI_SIGUSR2$$module$src$filesystem$constants=21,WASI_SIGVTALRM$$module$src$filesystem$constants=22,WASI_SIGXCPU$$module$src$filesystem$constants=23,WASI_SIGXFSZ$$module$src$filesystem$constants=24,WASI_FILETYPE_UNKNOWN$$module$src$filesystem$constants=0,WASI_FILETYPE_BLOCK_DEVICE$$module$src$filesystem$constants=1,WASI_FILETYPE_CHARACTER_DEVICE$$module$src$filesystem$constants=2,WASI_FILETYPE_DIRECTORY$$module$src$filesystem$constants=\n3,WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants=4,WASI_FILETYPE_SOCKET_DGRAM$$module$src$filesystem$constants=5,WASI_FILETYPE_SOCKET_STREAM$$module$src$filesystem$constants=6,WASI_FILETYPE_SYMBOLIC_LINK$$module$src$filesystem$constants=7,WASI_FDFLAG_APPEND$$module$src$filesystem$constants=1,WASI_FDFLAG_DSYNC$$module$src$filesystem$constants=2,WASI_FDFLAG_NONBLOCK$$module$src$filesystem$constants=4,WASI_FDFLAG_RSYNC$$module$src$filesystem$constants=8,WASI_FDFLAG_SYNC$$module$src$filesystem$constants=\n16,WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants=goog.global.BigInt(1),WASI_RIGHT_FD_READ$$module$src$filesystem$constants=goog.global.BigInt(2),WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants=goog.global.BigInt(4),WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants=goog.global.BigInt(8),WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants=goog.global.BigInt(16),WASI_RIGHT_FD_TELL$$module$src$filesystem$constants=goog.global.BigInt(32),WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants=\ngoog.global.BigInt(64),WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants=goog.global.BigInt(128),WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants=goog.global.BigInt(256),WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants=goog.global.BigInt(512),WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants=goog.global.BigInt(1024),WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants=goog.global.BigInt(2048),WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants=\ngoog.global.BigInt(4096),WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants=goog.global.BigInt(8192),WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants=goog.global.BigInt(16384),WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants=goog.global.BigInt(32768),WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants=goog.global.BigInt(65536),WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants=goog.global.BigInt(131072),WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants=\ngoog.global.BigInt(262144),WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants=goog.global.BigInt(524288),WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants=goog.global.BigInt(1048576),WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants=goog.global.BigInt(2097152),WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants=goog.global.BigInt(4194304),WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants=goog.global.BigInt(8388608),WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants=\ngoog.global.BigInt(16777216),WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants=goog.global.BigInt(33554432),WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants=goog.global.BigInt(67108864),WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants=goog.global.BigInt(134217728),WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants=goog.global.BigInt(268435456),RIGHTS_ALL$$module$src$filesystem$constants=WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_READ$$module$src$filesystem$constants|\nWASI_RIGHT_FD_SEEK$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_TELL$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants|WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants|WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants|WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants|\nWASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants|WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants|WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants|WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants|\nWASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants|WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants|WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants|WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants|\nWASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants,RIGHTS_BLOCK_DEVICE_BASE$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_BLOCK_DEVICE_INHERITING$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_CHARACTER_DEVICE_BASE$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_CHARACTER_DEVICE_INHERITING$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants=\nWASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_TELL$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants|WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|\nWASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants,RIGHTS_REGULAR_FILE_INHERITING$$module$src$filesystem$constants=goog.global.BigInt(0),RIGHTS_DIRECTORY_BASE$$module$src$filesystem$constants=WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants|\nWASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants|WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants|WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants|WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants|WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants|WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants|\nWASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants|WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants|\nWASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants,RIGHTS_DIRECTORY_INHERITING$$module$src$filesystem$constants=RIGHTS_DIRECTORY_BASE$$module$src$filesystem$constants|RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants,RIGHTS_SOCKET_BASE$$module$src$filesystem$constants=WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|\nWASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants|WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants,RIGHTS_SOCKET_INHERITING$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_TTY_BASE$$module$src$filesystem$constants=WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants,\nRIGHTS_TTY_INHERITING$$module$src$filesystem$constants=goog.global.BigInt(0),WASI_CLOCK_REALTIME$$module$src$filesystem$constants=0,WASI_CLOCK_MONOTONIC$$module$src$filesystem$constants=1,WASI_CLOCK_PROCESS_CPUTIME_ID$$module$src$filesystem$constants=2,WASI_CLOCK_THREAD_CPUTIME_ID$$module$src$filesystem$constants=3,WASI_EVENTTYPE_CLOCK$$module$src$filesystem$constants=0,WASI_EVENTTYPE_FD_READ$$module$src$filesystem$constants=1,WASI_EVENTTYPE_FD_WRITE$$module$src$filesystem$constants=2,WASI_FILESTAT_SET_ATIM$$module$src$filesystem$constants=\n1,WASI_FILESTAT_SET_ATIM_NOW$$module$src$filesystem$constants=2,WASI_FILESTAT_SET_MTIM$$module$src$filesystem$constants=4,WASI_FILESTAT_SET_MTIM_NOW$$module$src$filesystem$constants=8,WASI_O_CREAT$$module$src$filesystem$constants=1,WASI_O_DIRECTORY$$module$src$filesystem$constants=2,WASI_O_EXCL$$module$src$filesystem$constants=4,WASI_O_TRUNC$$module$src$filesystem$constants=8,WASI_PREOPENTYPE_DIR$$module$src$filesystem$constants=0,WASI_DIRCOOKIE_START$$module$src$filesystem$constants=0,WASI_STDIN_FILENO$$module$src$filesystem$constants=\n0,WASI_STDOUT_FILENO$$module$src$filesystem$constants=1,WASI_STDERR_FILENO$$module$src$filesystem$constants=2,WASI_WHENCE_SET$$module$src$filesystem$constants=0,WASI_WHENCE_CUR$$module$src$filesystem$constants=1,WASI_WHENCE_END$$module$src$filesystem$constants=2;var module$src$filesystem$constants={};module$src$filesystem$constants.RIGHTS_ALL=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_BLOCK_DEVICE_BASE=RIGHTS_ALL$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.RIGHTS_BLOCK_DEVICE_INHERITING=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_CHARACTER_DEVICE_BASE=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_CHARACTER_DEVICE_INHERITING=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_DIRECTORY_BASE=RIGHTS_DIRECTORY_BASE$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_DIRECTORY_INHERITING=RIGHTS_DIRECTORY_INHERITING$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.RIGHTS_REGULAR_FILE_BASE=RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_REGULAR_FILE_INHERITING=RIGHTS_REGULAR_FILE_INHERITING$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_SOCKET_BASE=RIGHTS_SOCKET_BASE$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_SOCKET_INHERITING=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_TTY_BASE=RIGHTS_TTY_BASE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.RIGHTS_TTY_INHERITING=RIGHTS_TTY_INHERITING$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_CLOCK_MONOTONIC=WASI_CLOCK_MONOTONIC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_CLOCK_PROCESS_CPUTIME_ID=WASI_CLOCK_PROCESS_CPUTIME_ID$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_CLOCK_REALTIME=WASI_CLOCK_REALTIME$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_CLOCK_THREAD_CPUTIME_ID=WASI_CLOCK_THREAD_CPUTIME_ID$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_DIRCOOKIE_START=WASI_DIRCOOKIE_START$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_E2BIG=WASI_E2BIG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EACCES=WASI_EACCES$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EADDRINUSE=WASI_EADDRINUSE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EADDRNOTAVAIL=WASI_EADDRNOTAVAIL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EAFNOSUPPORT=WASI_EAFNOSUPPORT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EAGAIN=WASI_EAGAIN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EALREADY=WASI_EALREADY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EBADF=WASI_EBADF$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EBADMSG=WASI_EBADMSG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EBUSY=WASI_EBUSY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECANCELED=WASI_ECANCELED$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECHILD=WASI_ECHILD$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECONNABORTED=WASI_ECONNABORTED$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ECONNREFUSED=WASI_ECONNREFUSED$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECONNRESET=WASI_ECONNRESET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EDEADLK=WASI_EDEADLK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EDESTADDRREQ=WASI_EDESTADDRREQ$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EDOM=WASI_EDOM$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EDQUOT=WASI_EDQUOT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EEXIST=WASI_EEXIST$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EFAULT=WASI_EFAULT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EFBIG=WASI_EFBIG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EHOSTUNREACH=WASI_EHOSTUNREACH$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EIDRM=WASI_EIDRM$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EILSEQ=WASI_EILSEQ$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EINPROGRESS=WASI_EINPROGRESS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EINTR=WASI_EINTR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EINVAL=WASI_EINVAL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EIO=WASI_EIO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EISCONN=WASI_EISCONN$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EISDIR=WASI_EISDIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ELOOP=WASI_ELOOP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMFILE=WASI_EMFILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMLINK=WASI_EMLINK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMSGSIZE=WASI_EMSGSIZE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMULTIHOP=WASI_EMULTIHOP$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENAMETOOLONG=WASI_ENAMETOOLONG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENETDOWN=WASI_ENETDOWN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENETRESET=WASI_ENETRESET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENETUNREACH=WASI_ENETUNREACH$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENFILE=WASI_ENFILE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENOBUFS=WASI_ENOBUFS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENODEV=WASI_ENODEV$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOENT=WASI_ENOENT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOEXEC=WASI_ENOEXEC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOLCK=WASI_ENOLCK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOLINK=WASI_ENOLINK$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENOMEM=WASI_ENOMEM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOMSG=WASI_ENOMSG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOPROTOOPT=WASI_ENOPROTOOPT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOSPC=WASI_ENOSPC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOSYS=WASI_ENOSYS$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENOTCAPABLE=WASI_ENOTCAPABLE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTCONN=WASI_ENOTCONN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTDIR=WASI_ENOTDIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTEMPTY=WASI_ENOTEMPTY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTRECOVERABLE=WASI_ENOTRECOVERABLE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ENOTSOCK=WASI_ENOTSOCK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTSUP=WASI_ENOTSUP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTTY=WASI_ENOTTY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENXIO=WASI_ENXIO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EOVERFLOW=WASI_EOVERFLOW$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EOWNERDEAD=WASI_EOWNERDEAD$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPERM=WASI_EPERM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPIPE=WASI_EPIPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPROTO=WASI_EPROTO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPROTONOSUPPORT=WASI_EPROTONOSUPPORT$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EPROTOTYPE=WASI_EPROTOTYPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ERANGE=WASI_ERANGE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EROFS=WASI_EROFS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ESPIPE=WASI_ESPIPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ESRCH=WASI_ESRCH$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ESTALE=WASI_ESTALE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_ESUCCESS=WASI_ESUCCESS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ETIMEDOUT=WASI_ETIMEDOUT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ETXTBSY=WASI_ETXTBSY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EVENTTYPE_CLOCK=WASI_EVENTTYPE_CLOCK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EVENTTYPE_FD_READ=WASI_EVENTTYPE_FD_READ$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_EVENTTYPE_FD_WRITE=WASI_EVENTTYPE_FD_WRITE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EXDEV=WASI_EXDEV$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_APPEND=WASI_FDFLAG_APPEND$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_DSYNC=WASI_FDFLAG_DSYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_NONBLOCK=WASI_FDFLAG_NONBLOCK$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_FDFLAG_RSYNC=WASI_FDFLAG_RSYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_SYNC=WASI_FDFLAG_SYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILESTAT_SET_ATIM=WASI_FILESTAT_SET_ATIM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILESTAT_SET_ATIM_NOW=WASI_FILESTAT_SET_ATIM_NOW$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILESTAT_SET_MTIM=WASI_FILESTAT_SET_MTIM$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_FILESTAT_SET_MTIM_NOW=WASI_FILESTAT_SET_MTIM_NOW$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_BLOCK_DEVICE=WASI_FILETYPE_BLOCK_DEVICE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_CHARACTER_DEVICE=WASI_FILETYPE_CHARACTER_DEVICE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_DIRECTORY=WASI_FILETYPE_DIRECTORY$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_FILETYPE_REGULAR_FILE=WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_SOCKET_DGRAM=WASI_FILETYPE_SOCKET_DGRAM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_SOCKET_STREAM=WASI_FILETYPE_SOCKET_STREAM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_SYMBOLIC_LINK=WASI_FILETYPE_SYMBOLIC_LINK$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_FILETYPE_UNKNOWN=WASI_FILETYPE_UNKNOWN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_CREAT=WASI_O_CREAT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_DIRECTORY=WASI_O_DIRECTORY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_EXCL=WASI_O_EXCL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_TRUNC=WASI_O_TRUNC$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_PREOPENTYPE_DIR=WASI_PREOPENTYPE_DIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_ADVISE=WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_ALLOCATE=WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_DATASYNC=WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_FD_FILESTAT_GET=WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_FILESTAT_SET_SIZE=WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_FILESTAT_SET_TIMES=WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_READ=WASI_RIGHT_FD_READ$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_FD_READDIR=WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_SEEK=WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_SYNC=WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_TELL=WASI_RIGHT_FD_TELL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_WRITE=WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_PATH_CREATE_DIRECTORY=WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_CREATE_FILE=WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_FILESTAT_GET=WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_LINK_SOURCE=WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_LINK_TARGET=WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_OPEN=WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_PATH_READLINK=WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_REMOVE_DIRECTORY=WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_RENAME_SOURCE=WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_RENAME_TARGET=WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_RIGHT_PATH_SYMLINK=WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_UNLINK_FILE=WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_POLL_FD_READWRITE=WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_SOCK_SHUTDOWN=WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGABRT=WASI_SIGABRT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGALRM=WASI_SIGALRM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGBUS=WASI_SIGBUS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGCHLD=WASI_SIGCHLD$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGCONT=WASI_SIGCONT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGFPE=WASI_SIGFPE$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGHUP=WASI_SIGHUP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGILL=WASI_SIGILL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGINT=WASI_SIGINT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGKILL=WASI_SIGKILL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGPIPE=WASI_SIGPIPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGQUIT=WASI_SIGQUIT$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGSEGV=WASI_SIGSEGV$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGSTOP=WASI_SIGSTOP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTERM=WASI_SIGTERM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTRAP=WASI_SIGTRAP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTSTP=WASI_SIGTSTP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTTIN=WASI_SIGTTIN$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGTTOU=WASI_SIGTTOU$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGURG=WASI_SIGURG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGUSR1=WASI_SIGUSR1$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGUSR2=WASI_SIGUSR2$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGVTALRM=WASI_SIGVTALRM$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_SIGXCPU=WASI_SIGXCPU$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGXFSZ=WASI_SIGXFSZ$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_STDERR_FILENO=WASI_STDERR_FILENO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_STDIN_FILENO=WASI_STDIN_FILENO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_STDOUT_FILENO=WASI_STDOUT_FILENO$$module$src$filesystem$constants;\nmodule$src$filesystem$constants.WASI_WHENCE_CUR=WASI_WHENCE_CUR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_WHENCE_END=WASI_WHENCE_END$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_WHENCE_SET=WASI_WHENCE_SET$$module$src$filesystem$constants;goog.debug={};function module$contents$goog$debug$Error_DebugError(a,b){if(Error.captureStackTrace)Error.captureStackTrace(this,module$contents$goog$debug$Error_DebugError);else{const c=Error().stack;c&&(this.stack=c)}a&&(this.message=String(a));void 0!==b&&(this.cause=b);this.reportErrorToServer=!0}goog.inherits(module$contents$goog$debug$Error_DebugError,Error);module$contents$goog$debug$Error_DebugError.prototype.name="CustomError";goog.debug.Error=module$contents$goog$debug$Error_DebugError;goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;function module$contents$goog$asserts_AssertionError(a,b){module$contents$goog$debug$Error_DebugError.call(this,module$contents$goog$asserts_subs(a,b));this.messagePattern=a}goog.inherits(module$contents$goog$asserts_AssertionError,module$contents$goog$debug$Error_DebugError);goog.asserts.AssertionError=module$contents$goog$asserts_AssertionError;module$contents$goog$asserts_AssertionError.prototype.name="AssertionError";\ngoog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};let module$contents$goog$asserts_errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;function module$contents$goog$asserts_subs(a,b){a=a.split("%s");let c="";const d=a.length-1;for(let e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");return c+a[d]}\nfunction module$contents$goog$asserts_doAssertFailure(a,b,c,d){let e="Assertion failed",f;c?(e+=": "+c,f=d):a&&(e+=": "+a,f=b);a=new module$contents$goog$asserts_AssertionError(""+e,f||[]);module$contents$goog$asserts_errorHandler_(a)}goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(module$contents$goog$asserts_errorHandler_=a)};\ngoog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&module$contents$goog$asserts_doAssertFailure("",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertExists=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&null==a&&module$contents$goog$asserts_doAssertFailure("Expected to exist: %s.",[a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&module$contents$goog$asserts_errorHandler_(new module$contents$goog$asserts_AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"number"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"string"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"function"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&module$contents$goog$asserts_doAssertFailure("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!Array.isArray(a)&&module$contents$goog$asserts_doAssertFailure("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"boolean"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||module$contents$goog$asserts_doAssertFailure("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\ngoog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||module$contents$goog$asserts_doAssertFailure("Expected instanceof %s but got %s.",[module$contents$goog$asserts_getType(b),module$contents$goog$asserts_getType(a)],c,Array.prototype.slice.call(arguments,3));return a};\ngoog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||"number"==typeof a&&isFinite(a)||module$contents$goog$asserts_doAssertFailure("Expected %s to be a finite number but it is not.",[a],b,Array.prototype.slice.call(arguments,2));return a};\nfunction module$contents$goog$asserts_getType(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;const module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR;goog.array.ASSUME_NATIVE_FUNCTIONS=module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS;function module$contents$goog$array_peek(a){return a[a.length-1]}goog.array.peek=module$contents$goog$array_peek;goog.array.last=module$contents$goog$array_peek;\nconst module$contents$goog$array_indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.indexOf(b,c);for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};goog.array.indexOf=module$contents$goog$array_indexOf;\nconst module$contents$goog$array_lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.lastIndexOf(b,c);for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};\ngoog.array.lastIndexOf=module$contents$goog$array_lastIndexOf;const module$contents$goog$array_forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEach=module$contents$goog$array_forEach;\nfunction module$contents$goog$array_forEachRight(a,b,c){var d=a.length;const e="string"===typeof a?a.split(""):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a)}goog.array.forEachRight=module$contents$goog$array_forEachRight;\nconst module$contents$goog$array_filter=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){const d=a.length,e=[];let f=0;const g="string"===typeof a?a.split(""):a;for(let h=0;h<d;h++)if(h in g){const k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};goog.array.filter=module$contents$goog$array_filter;\nconst module$contents$goog$array_map=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){const d=a.length,e=Array(d),f="string"===typeof a?a.split(""):a;for(let g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};goog.array.map=module$contents$goog$array_map;\nconst module$contents$goog$array_reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){let e=c;module$contents$goog$array_forEach(a,function(f,g){e=b.call(d,e,f,g,a)});return e};goog.array.reduce=module$contents$goog$array_reduce;\nconst module$contents$goog$array_reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){let e=c;module$contents$goog$array_forEachRight(a,function(f,g){e=b.call(d,e,f,g,a)});return e};goog.array.reduceRight=module$contents$goog$array_reduceRight;\nconst module$contents$goog$array_some=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};goog.array.some=module$contents$goog$array_some;\nconst module$contents$goog$array_every=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.every=module$contents$goog$array_every;\nfunction module$contents$goog$array_count(a,b,c){let d=0;module$contents$goog$array_forEach(a,function(e,f,g){b.call(c,e,f,g)&&++d},c);return d}goog.array.count=module$contents$goog$array_count;function module$contents$goog$array_find(a,b,c){b=module$contents$goog$array_findIndex(a,b,c);return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}goog.array.find=module$contents$goog$array_find;\nfunction module$contents$goog$array_findIndex(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1}goog.array.findIndex=module$contents$goog$array_findIndex;function module$contents$goog$array_findRight(a,b,c){b=module$contents$goog$array_findIndexRight(a,b,c);return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}goog.array.findRight=module$contents$goog$array_findRight;\nfunction module$contents$goog$array_findIndexRight(a,b,c){var d=a.length;const e="string"===typeof a?a.split(""):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1}goog.array.findIndexRight=module$contents$goog$array_findIndexRight;function module$contents$goog$array_contains(a,b){return 0<=module$contents$goog$array_indexOf(a,b)}goog.array.contains=module$contents$goog$array_contains;function module$contents$goog$array_isEmpty(a){return 0==a.length}goog.array.isEmpty=module$contents$goog$array_isEmpty;\nfunction module$contents$goog$array_clear(a){if(!Array.isArray(a))for(let b=a.length-1;0<=b;b--)delete a[b];a.length=0}goog.array.clear=module$contents$goog$array_clear;function module$contents$goog$array_insert(a,b){module$contents$goog$array_contains(a,b)||a.push(b)}goog.array.insert=module$contents$goog$array_insert;function module$contents$goog$array_insertAt(a,b,c){module$contents$goog$array_splice(a,c,0,b)}goog.array.insertAt=module$contents$goog$array_insertAt;\nfunction module$contents$goog$array_insertArrayAt(a,b,c){goog.partial(module$contents$goog$array_splice,a,c,0).apply(null,b)}goog.array.insertArrayAt=module$contents$goog$array_insertArrayAt;function module$contents$goog$array_insertBefore(a,b,c){let d;2==arguments.length||0>(d=module$contents$goog$array_indexOf(a,c))?a.push(b):module$contents$goog$array_insertAt(a,b,d)}goog.array.insertBefore=module$contents$goog$array_insertBefore;\nfunction module$contents$goog$array_remove(a,b){b=module$contents$goog$array_indexOf(a,b);let c;(c=0<=b)&&module$contents$goog$array_removeAt(a,b);return c}goog.array.remove=module$contents$goog$array_remove;function module$contents$goog$array_removeLast(a,b){b=module$contents$goog$array_lastIndexOf(a,b);return 0<=b?(module$contents$goog$array_removeAt(a,b),!0):!1}goog.array.removeLast=module$contents$goog$array_removeLast;\nfunction module$contents$goog$array_removeAt(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length}goog.array.removeAt=module$contents$goog$array_removeAt;function module$contents$goog$array_removeIf(a,b,c){b=module$contents$goog$array_findIndex(a,b,c);return 0<=b?(module$contents$goog$array_removeAt(a,b),!0):!1}goog.array.removeIf=module$contents$goog$array_removeIf;\nfunction module$contents$goog$array_removeAllIf(a,b,c){let d=0;module$contents$goog$array_forEachRight(a,function(e,f){b.call(c,e,f,a)&&module$contents$goog$array_removeAt(a,f)&&d++});return d}goog.array.removeAllIf=module$contents$goog$array_removeAllIf;function module$contents$goog$array_concat(a){return Array.prototype.concat.apply([],arguments)}goog.array.concat=module$contents$goog$array_concat;function module$contents$goog$array_join(a){return Array.prototype.concat.apply([],arguments)}\ngoog.array.join=module$contents$goog$array_join;function module$contents$goog$array_toArray(a){const b=a.length;if(0<b){const c=Array(b);for(let d=0;d<b;d++)c[d]=a[d];return c}return[]}const module$contents$goog$array_clone=goog.array.toArray=module$contents$goog$array_toArray;goog.array.clone=module$contents$goog$array_toArray;\nfunction module$contents$goog$array_extend(a,b){for(let c=1;c<arguments.length;c++){const d=arguments[c];if(goog.isArrayLike(d)){const e=a.length||0,f=d.length||0;a.length=e+f;for(let g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}}goog.array.extend=module$contents$goog$array_extend;function module$contents$goog$array_splice(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,module$contents$goog$array_slice(arguments,1))}goog.array.splice=module$contents$goog$array_splice;\nfunction module$contents$goog$array_slice(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)}goog.array.slice=module$contents$goog$array_slice;\nfunction module$contents$goog$array_removeDuplicates(a,b,c){b=b||a;var d=function(g){return goog.isObject(g)?"o"+goog.getUid(g):(typeof g).charAt(0)+g};c=c||d;let e=d=0;const f={};for(;e<a.length;){const g=a[e++],h=c(g);Object.prototype.hasOwnProperty.call(f,h)||(f[h]=!0,b[d++]=g)}b.length=d}goog.array.removeDuplicates=module$contents$goog$array_removeDuplicates;\nfunction module$contents$goog$array_binarySearch(a,b,c){return module$contents$goog$array_binarySearch_(a,c||module$contents$goog$array_defaultCompare,!1,b)}goog.array.binarySearch=module$contents$goog$array_binarySearch;function module$contents$goog$array_binarySelect(a,b,c){return module$contents$goog$array_binarySearch_(a,b,!0,void 0,c)}goog.array.binarySelect=module$contents$goog$array_binarySelect;\nfunction module$contents$goog$array_binarySearch_(a,b,c,d,e){let f=0,g=a.length,h;for(;f<g;){const k=f+(g-f>>>1);let l;l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l)}return h?f:-f-1}function module$contents$goog$array_sort(a,b){a.sort(b||module$contents$goog$array_defaultCompare)}goog.array.sort=module$contents$goog$array_sort;\nfunction module$contents$goog$array_stableSort(a,b){const c=Array(a.length);for(let e=0;e<a.length;e++)c[e]={index:e,value:a[e]};const d=b||module$contents$goog$array_defaultCompare;module$contents$goog$array_sort(c,function(e,f){return d(e.value,f.value)||e.index-f.index});for(b=0;b<a.length;b++)a[b]=c[b].value}goog.array.stableSort=module$contents$goog$array_stableSort;\nfunction module$contents$goog$array_sortByKey(a,b,c){const d=c||module$contents$goog$array_defaultCompare;module$contents$goog$array_sort(a,function(e,f){return d(b(e),b(f))})}goog.array.sortByKey=module$contents$goog$array_sortByKey;function module$contents$goog$array_sortObjectsByKey(a,b,c){module$contents$goog$array_sortByKey(a,function(d){return d[b]},c)}goog.array.sortObjectsByKey=module$contents$goog$array_sortObjectsByKey;\nfunction module$contents$goog$array_isSorted(a,b,c){b=b||module$contents$goog$array_defaultCompare;for(let d=1;d<a.length;d++){const e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0}goog.array.isSorted=module$contents$goog$array_isSorted;function module$contents$goog$array_equals(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;const d=a.length;c=c||module$contents$goog$array_defaultCompareEquality;for(let e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0}\ngoog.array.equals=module$contents$goog$array_equals;function module$contents$goog$array_compare3(a,b,c){c=c||module$contents$goog$array_defaultCompare;const d=Math.min(a.length,b.length);for(let e=0;e<d;e++){const f=c(a[e],b[e]);if(0!=f)return f}return module$contents$goog$array_defaultCompare(a.length,b.length)}goog.array.compare3=module$contents$goog$array_compare3;function module$contents$goog$array_defaultCompare(a,b){return a>b?1:a<b?-1:0}goog.array.defaultCompare=module$contents$goog$array_defaultCompare;\nfunction module$contents$goog$array_inverseDefaultCompare(a,b){return-module$contents$goog$array_defaultCompare(a,b)}goog.array.inverseDefaultCompare=module$contents$goog$array_inverseDefaultCompare;function module$contents$goog$array_defaultCompareEquality(a,b){return a===b}goog.array.defaultCompareEquality=module$contents$goog$array_defaultCompareEquality;\nfunction module$contents$goog$array_binaryInsert(a,b,c){c=module$contents$goog$array_binarySearch(a,b,c);return 0>c?(module$contents$goog$array_insertAt(a,b,-(c+1)),!0):!1}goog.array.binaryInsert=module$contents$goog$array_binaryInsert;function module$contents$goog$array_binaryRemove(a,b,c){b=module$contents$goog$array_binarySearch(a,b,c);return 0<=b?module$contents$goog$array_removeAt(a,b):!1}goog.array.binaryRemove=module$contents$goog$array_binaryRemove;\nfunction module$contents$goog$array_bucket(a,b,c){const d={};for(let e=0;e<a.length;e++){const f=a[e],g=b.call(c,f,e,a);void 0!==g&&(d[g]||(d[g]=[])).push(f)}return d}goog.array.bucket=module$contents$goog$array_bucket;function module$contents$goog$array_bucketToMap(a,b){const c=new Map;for(let d=0;d<a.length;d++){const e=a[d],f=b(e,d,a);if(void 0!==f){let g=c.get(f);g||(g=[],c.set(f,g));g.push(e)}}return c}goog.array.bucketToMap=module$contents$goog$array_bucketToMap;\nfunction module$contents$goog$array_toObject(a,b,c){const d={};module$contents$goog$array_forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d}goog.array.toObject=module$contents$goog$array_toObject;function module$contents$goog$array_toMap(a,b){const c=new Map;for(let d=0;d<a.length;d++){const e=a[d];c.set(b(e,d,a),e)}return c}goog.array.toMap=module$contents$goog$array_toMap;\nfunction module$contents$goog$array_range(a,b,c){const d=[];let e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d}goog.array.range=module$contents$goog$array_range;function module$contents$goog$array_repeat(a,b){const c=[];for(let d=0;d<b;d++)c[d]=a;return c}goog.array.repeat=module$contents$goog$array_repeat;\nfunction module$contents$goog$array_flatten(a){const b=[];for(let d=0;d<arguments.length;d++){const e=arguments[d];if(Array.isArray(e))for(let f=0;f<e.length;f+=8192){var c=module$contents$goog$array_slice(e,f,f+8192);c=module$contents$goog$array_flatten.apply(null,c);for(let g=0;g<c.length;g++)b.push(c[g])}else b.push(e)}return b}goog.array.flatten=module$contents$goog$array_flatten;\nfunction module$contents$goog$array_rotate(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a}goog.array.rotate=module$contents$goog$array_rotate;function module$contents$goog$array_moveItem(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])}goog.array.moveItem=module$contents$goog$array_moveItem;\nfunction module$contents$goog$array_zip(a){if(!arguments.length)return[];const b=[];let c=arguments[0].length;for(var d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){const e=[];for(let f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b}goog.array.zip=module$contents$goog$array_zip;function module$contents$goog$array_shuffle(a,b){b=b||Math.random;for(let c=a.length-1;0<c;c--){const d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e}}\ngoog.array.shuffle=module$contents$goog$array_shuffle;function module$contents$goog$array_copyByIndex(a,b){const c=[];module$contents$goog$array_forEach(b,function(d){c.push(a[d])});return c}goog.array.copyByIndex=module$contents$goog$array_copyByIndex;function module$contents$goog$array_concatMap(a,b,c){return module$contents$goog$array_concat.apply([],module$contents$goog$array_map(a,b,c))}goog.array.concatMap=module$contents$goog$array_concatMap;goog.dom.asserts={};goog.dom.asserts.assertIsLocation=function(a){if(goog.asserts.ENABLE_ASSERTS){var b=goog.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s",goog.dom.asserts.debugStringForType_(a))}return a};\ngoog.dom.asserts.assertIsElementType_=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=goog.dom.asserts.getWindow_(a);c&&"undefined"!=typeof c[b]&&(a&&(a instanceof c[b]||!(a instanceof c.Location||a instanceof c.Element))||goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s",b,goog.dom.asserts.debugStringForType_(a)))}return a};goog.dom.asserts.assertIsHTMLAnchorElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAnchorElement")};\ngoog.dom.asserts.assertIsHTMLButtonElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLButtonElement")};goog.dom.asserts.assertIsHTMLLinkElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLLinkElement")};goog.dom.asserts.assertIsHTMLImageElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLImageElement")};goog.dom.asserts.assertIsHTMLAudioElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAudioElement")};\ngoog.dom.asserts.assertIsHTMLVideoElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLVideoElement")};goog.dom.asserts.assertIsHTMLInputElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLInputElement")};goog.dom.asserts.assertIsHTMLTextAreaElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLTextAreaElement")};goog.dom.asserts.assertIsHTMLCanvasElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLCanvasElement")};\ngoog.dom.asserts.assertIsHTMLEmbedElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLEmbedElement")};goog.dom.asserts.assertIsHTMLFormElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFormElement")};goog.dom.asserts.assertIsHTMLFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFrameElement")};goog.dom.asserts.assertIsHTMLIFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLIFrameElement")};\ngoog.dom.asserts.assertIsHTMLObjectElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLObjectElement")};goog.dom.asserts.assertIsHTMLScriptElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLScriptElement")};\ngoog.dom.asserts.debugStringForType_=function(a){if(goog.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return"<object could not be stringified>"}else return void 0===a?"undefined":null===a?"null":typeof a};goog.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,c=b&&(b.defaultView||b.parentWindow);c=c||goog.global;if(c.Element&&c.Location)return c}catch(d){}return null};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=function(){return!1};goog.functions.TRUE=function(){return!0};goog.functions.NULL=function(){return null};goog.functions.UNDEFINED=function(){};goog.functions.EMPTY=goog.functions.UNDEFINED;goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};\ngoog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){const c=Array.prototype.slice.call(arguments,1);return function(){let d=this;d===goog.global&&(d=void 0);const e=Array.prototype.slice.call(arguments);e.push.apply(e,c);return a.apply(d,e)}};\ngoog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};goog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){const c=arguments,d=c.length;return function(){let e;d&&(e=c[d-1].apply(this,arguments));for(let f=d-2;0<=f;f--)e=c[f].call(this,e);return e}};\ngoog.functions.sequence=function(a){const b=arguments,c=b.length;return function(){let d;for(let e=0;e<c;e++)d=b[e].apply(this,arguments);return d}};goog.functions.and=function(a){const b=arguments,c=b.length;return function(){for(let d=0;d<c;d++)if(!b[d].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){const b=arguments,c=b.length;return function(){for(let d=0;d<c;d++)if(b[d].apply(this,arguments))return!0;return!1}};\ngoog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};goog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){let b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){let b=a;return function(){if(b){const c=b;b=null;c()}}};\ngoog.functions.debounce=function(a,b,c){let d=0;return function(e){goog.global.clearTimeout(d);const f=arguments;d=goog.global.setTimeout(function(){a.apply(c,f)},b)}};goog.functions.throttle=function(a,b,c){let d=0,e=!1,f=[];const g=function(){d=0;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);let k=f;f=[];a.apply(c,k)};return function(k){f=arguments;d?e=!0:h()}};\ngoog.functions.rateLimit=function(a,b,c){let d=0;const e=function(){d=0};return function(f){d||(d=goog.global.setTimeout(e,b),a.apply(c,arguments))}};goog.functions.isFunction=a=>"function"===typeof a;goog.string={};goog.string.TypedString=function(){};goog.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||"";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};\ngoog.DEBUG&&(goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"});goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail("expected object of type Const, got \'"+a+"\'");return"type_error:Const"};\ngoog.string.Const.from=function(a){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.Const.EMPTY=goog.string.Const.from("");goog.html={};goog.html.trustedtypes={};goog.html.trustedtypes.POLICY_NAME=goog.TRUSTED_TYPES_POLICY_NAME?goog.TRUSTED_TYPES_POLICY_NAME+"#html":"";goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse=function(){if(!goog.html.trustedtypes.POLICY_NAME)return null;void 0===goog.html.trustedtypes.cachedPolicy_&&(goog.html.trustedtypes.cachedPolicy_=goog.createTrustedTypesPolicy(goog.html.trustedtypes.POLICY_NAME));return goog.html.trustedtypes.cachedPolicy_};const module$contents$goog$html$SafeScript_CONSTRUCTOR_TOKEN_PRIVATE={};\nclass module$contents$goog$html$SafeScript_SafeScript{constructor(a,b){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=b===module$contents$goog$html$SafeScript_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}toString(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()}static fromConstant(a){a=goog.string.Const.unwrap(a);return 0===a.length?module$contents$goog$html$SafeScript_SafeScript.EMPTY:module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)}static fromJson(a){return module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(module$contents$goog$html$SafeScript_SafeScript.stringify_(a))}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()}static unwrap(a){return module$contents$goog$html$SafeScript_SafeScript.unwrapTrustedScript(a).toString()}static unwrapTrustedScript(a){if(a instanceof\nmodule$contents$goog$html$SafeScript_SafeScript&&a.constructor===module$contents$goog$html$SafeScript_SafeScript)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;(0,goog.asserts.fail)("expected object of type SafeScript, got \'"+a+"\' of type "+goog.typeOf(a));return"type_error:SafeScript"}static stringify_(a){return JSON.stringify(a).replace(/</g,"\\\\x3c")}static createSafeScriptSecurityPrivateDoNotAccessOrElse(a){const b=goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScript(a):\na;return new module$contents$goog$html$SafeScript_SafeScript(a,module$contents$goog$html$SafeScript_CONSTRUCTOR_TOKEN_PRIVATE)}}module$contents$goog$html$SafeScript_SafeScript.EMPTY=function(){return module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("")}();goog.html.SafeScript=module$contents$goog$html$SafeScript_SafeScript;goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.UrlObject_=function(){};goog.fs.url.UrlObject_.prototype.createObjectURL=function(a){};goog.fs.url.UrlObject_.prototype.revokeObjectURL=function(a){};\ngoog.fs.url.getUrlObject_=function(){const a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error("This browser doesn\'t seem to support blob URLs");};goog.fs.url.findUrlObject_=function(){return void 0!==goog.global.URL&&void 0!==goog.global.URL.createObjectURL?goog.global.URL:void 0!==goog.global.createObjectURL?goog.global:null};goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.fs.blob={};goog.fs.blob.getBlob=function(a){var b=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==b){b=new b;for(let c=0;c<arguments.length;c++)b.append(arguments[c]);return b.getBlob()}return goog.fs.blob.getBlobWithProperties(Array.prototype.slice.call(arguments))};\ngoog.fs.blob.getBlobWithProperties=function(a,b,c){var d=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==d){d=new d;for(let e=0;e<a.length;e++)d.append(a[e],c);return d.getBlob(b)}if(void 0!==goog.global.Blob)return d={},b&&(d.type=b),c&&(d.endings=c),new Blob(a,d);throw Error("This browser doesn\'t seem to support creating Blobs");};goog.html.TrustedResourceUrl=class{constructor(a,b){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=b===goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:""}toString(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+""}};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};\ngoog.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var c=goog.html.TrustedResourceUrl.unwrap(this);c=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);var d=c[3]||"";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1]+goog.html.TrustedResourceUrl.stringifyParams_("?",c[2]||"",a)+goog.html.TrustedResourceUrl.stringifyParams_("#",d,b))};goog.html.TrustedResourceUrl.unwrap=function(a){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};\ngoog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail("expected object of type TrustedResourceUrl, got \'"+a+"\' of type "+goog.typeOf(a));return"type_error:TrustedResourceUrl"};\ngoog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(d,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error(\'Found marker, "\'+e+\'", in format string, "\'+c+\'", but no valid label mapping found in args: \'+JSON.stringify(b));d=b[e];return d instanceof goog.string.Const?goog.string.Const.unwrap(d):\nencodeURIComponent(String(d))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\\w+)}/g;goog.html.TrustedResourceUrl.BASE_URL_=RegExp("^((https:)?//[0-9a-z.:[\\\\]-]+/|/[^/\\\\\\\\]|[^:/\\\\\\\\%]+/|[^:/\\\\\\\\%]*[?#]|about:blank#)","i");goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/;\ngoog.html.TrustedResourceUrl.formatWithParams=function(a,b,c,d){return goog.html.TrustedResourceUrl.format(a,b).cloneWithParams(c,d)};goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b="",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.TrustedResourceUrl.fromSafeScript=function(a){a=goog.fs.blob.getBlobWithProperties([module$contents$goog$html$SafeScript_SafeScript.unwrap(a)],"text/javascript");a=goog.fs.url.createObjectUrl(a);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};\ngoog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){const b=goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScriptURL(a):a;return new goog.html.TrustedResourceUrl(a,goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};\ngoog.html.TrustedResourceUrl.stringifyParams_=function(a,b,c){if(null==c)return b;if("string"===typeof c)return c?a+encodeURIComponent(c):"";for(var d in c)if(Object.prototype.hasOwnProperty.call(c,d)){var e=c[d];e=Array.isArray(e)?e:[e];for(var f=0;f<e.length;f++){var g=e[f];null!=g&&(b||(b=a),b+=(b.length>a.length?"&":"")+encodeURIComponent(d)+"="+encodeURIComponent(String(g)))}}return b};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){const c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.slice(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.slice(a.length-b.length))};\ngoog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\\s\\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};\ngoog.string.internal.newLineToBr=function(a,b){return a.replace(/(\\r\\n|\\r|\\n)/g,b?"<br />":"<br>")};\ngoog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.internal.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.internal.LT_RE_,\n"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.internal.GT_RE_,"&gt;"));-1!=a.indexOf(\'"\')&&(a=a.replace(goog.string.internal.QUOT_RE_,"&quot;"));-1!=a.indexOf("\'")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\\x00")&&(a=a.replace(goog.string.internal.NULL_RE_,"&#0;"))}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/"/g;goog.string.internal.SINGLE_QUOTE_RE_=/\'/g;\ngoog.string.internal.NULL_RE_=/\\x00/g;goog.string.internal.ALL_RE_=/[\\x00&<>"\']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g," &#160;"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};\ngoog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(".");b=goog.string.internal.trim(String(b)).split(".");const d=Math.max(a.length,b.length);for(let g=0;0==c&&g<d;g++){var e=a[g]||"",f=b[g]||"";do{e=/(\\d*)(\\D*)(.*)/.exec(e)||["","","",""];f=/(\\d*)(\\D*)(.*)/.exec(f)||["","","",""];if(0==e[0].length&&0==f[0].length)break;c=0==e[1].length?0:parseInt(e[1],10);const h=0==f[1].length?0:parseInt(f[1],10);c=goog.string.internal.compareElements_(c,h)||\ngoog.string.internal.compareElements_(0==e[2].length,0==f[2].length)||goog.string.internal.compareElements_(e[2],f[2]);e=e[3];f=f[3]}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.html.SafeUrl=class{constructor(a,b){this.privateDoNotAccessOrElseSafeUrlWrappedValue_=b===goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:""}toString(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()}};goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};\ngoog.html.SafeUrl.unwrap=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;goog.asserts.fail("expected object of type SafeUrl, got \'"+a+"\' of type "+goog.typeOf(a));return"type_error:SafeUrl"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};\ngoog.html.SAFE_MIME_TYPE_PATTERN_=RegExp(\'^(?:audio/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font/\\\\w+|image/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon|heic|heif)|video/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\\\\w+=(?:\\\\w+|"[\\\\w;,= ]+"))*$\',"i");goog.html.SafeUrl.isSafeMimeType=function(a){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a)};\ngoog.html.SafeUrl.fromBlob=function(a){a=goog.html.SafeUrl.isSafeMimeType(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.revokeObjectUrl=function(a){a=a.getTypedStringValue();a!==goog.html.SafeUrl.INNOCUOUS_STRING&&goog.fs.url.revokeObjectUrl(a)};\ngoog.html.SafeUrl.fromMediaSource=function(a){goog.asserts.assert("MediaSource"in goog.global,"No support for MediaSource");a=a instanceof MediaSource?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.DATA_URL_PATTERN_=/^data:(.*);base64,[a-z0-9+\\/]+=*$/i;\ngoog.html.SafeUrl.tryFromDataUrl=function(a){a=String(a);a=a.replace(/(%0A|%0D)/g,"");return a.match(goog.html.DATA_URL_PATTERN_)?goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):null};goog.html.SafeUrl.fromDataUrl=function(a){return goog.html.SafeUrl.tryFromDataUrl(a)||goog.html.SafeUrl.INNOCUOUS_URL};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"tel:")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SIP_URL_PATTERN_=RegExp("^sip[s]?:[+a-z0-9_.!$%&\'*\\\\/=^`{|}~-]+@([a-z0-9-]+\\\\.)+[a-z0-9]{2,63}$","i");goog.html.SafeUrl.fromSipUrl=function(a){goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromFacebookMessengerUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"fb-messenger://share")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.fromWhatsAppUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"whatsapp://send")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromSmsUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"sms:")&&goog.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf("#");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(c){return!1}return/^(?:[a-z0-9\\-_.~]|%[0-9a-f]{2})+$/i.test(a)};goog.html.SafeUrl.fromSshUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"ssh://")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\\/\\/([^\\/]+)\\//,a,b)};goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\\/\\/([^\\/]+)\\//,a,b)};goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\\/\\/([^\\/]+)\\//,a,b)};\ngoog.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,c){(a=a.exec(b))?(a=a[1],-1==(c instanceof goog.string.Const?[goog.string.Const.unwrap(c)]:c.map(function(d){return goog.string.Const.unwrap(d)})).indexOf(a)&&(b=goog.html.SafeUrl.INNOCUOUS_STRING)):b=goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeUrl.fromTrustedResourceUrl=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a))};\ngoog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_;goog.html.SafeUrl.trySanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SAFE_URL_PATTERN_.test(a)?goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):goog.html.SafeUrl.tryFromDataUrl(a)};\ngoog.html.SafeUrl.sanitize=function(a){return goog.html.SafeUrl.trySanitize(a)||goog.html.SafeUrl.INNOCUOUS_URL};\ngoog.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=goog.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a),"%s does not match the safe URL pattern",a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\ngoog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){return new goog.html.SafeUrl(a,goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};goog.html.SafeUrl.INNOCUOUS_URL=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.SafeUrl.INNOCUOUS_STRING);goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");const module$contents$goog$html$SafeStyle_CONSTRUCTOR_TOKEN_PRIVATE={};\nclass module$contents$goog$html$SafeStyle_SafeStyle{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=b===module$contents$goog$html$SafeStyle_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}static fromConstant(a){a=goog.string.Const.unwrap(a);if(0===a.length)return module$contents$goog$html$SafeStyle_SafeStyle.EMPTY;(0,goog.asserts.assert)((0,goog.string.internal.endsWith)(a,";"),`Last character of style string is not \';\': ${a}`);(0,goog.asserts.assert)((0,goog.string.internal.contains)(a,\n":"),"Style string must contain at least one \':\', to specify a \\"name: value\\" pair: "+a);return module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_}toString(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_.toString()}static unwrap(a){if(a instanceof module$contents$goog$html$SafeStyle_SafeStyle&&a.constructor===module$contents$goog$html$SafeStyle_SafeStyle)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n(0,goog.asserts.fail)(`expected object of type SafeStyle, got \'${a}`+"\' of type "+goog.typeOf(a));return"type_error:SafeStyle"}static createSafeStyleSecurityPrivateDoNotAccessOrElse(a){return new module$contents$goog$html$SafeStyle_SafeStyle(a,module$contents$goog$html$SafeStyle_CONSTRUCTOR_TOKEN_PRIVATE)}static create(a){let b="";for(let c in a)if(Object.prototype.hasOwnProperty.call(a,c)){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error(`Name allows only [-_a-zA-Z0-9], got: ${c}`);let d=a[c];null!=d&&\n(d=Array.isArray(d)?d.map(module$contents$goog$html$SafeStyle_sanitizePropertyValue).join(" "):module$contents$goog$html$SafeStyle_sanitizePropertyValue(d),b+=`${c}:${d};`)}return b?module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):module$contents$goog$html$SafeStyle_SafeStyle.EMPTY}static concat(a){let b="";const c=d=>{Array.isArray(d)?d.forEach(c):b+=module$contents$goog$html$SafeStyle_SafeStyle.unwrap(d)};Array.prototype.forEach.call(arguments,c);\nreturn b?module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):module$contents$goog$html$SafeStyle_SafeStyle.EMPTY}}module$contents$goog$html$SafeStyle_SafeStyle.EMPTY=module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING="zClosurez";\nfunction module$contents$goog$html$SafeStyle_sanitizePropertyValue(a){if(a instanceof goog.html.SafeUrl)return\'url("\'+goog.html.SafeUrl.unwrap(a).replace(/</g,"%3c").replace(/[\\\\"]/g,"\\\\$&")+\'")\';a=a instanceof goog.string.Const?goog.string.Const.unwrap(a):module$contents$goog$html$SafeStyle_sanitizePropertyValueString(String(a));if(/[{;}]/.test(a))throw new module$contents$goog$asserts_AssertionError("Value does not allow [{;}], got: %s.",[a]);return a}\nfunction module$contents$goog$html$SafeStyle_sanitizePropertyValueString(a){const b=a.replace(module$contents$goog$html$SafeStyle_FUNCTIONS_RE,"$1").replace(module$contents$goog$html$SafeStyle_FUNCTIONS_RE,"$1").replace(module$contents$goog$html$SafeStyle_URL_RE,"url");if(module$contents$goog$html$SafeStyle_VALUE_RE.test(b)){if(module$contents$goog$html$SafeStyle_COMMENT_RE.test(a))return(0,goog.asserts.fail)(`String value disallows comments, got: ${a}`),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING;\nif(!module$contents$goog$html$SafeStyle_hasBalancedQuotes(a))return(0,goog.asserts.fail)(`String value requires balanced quotes, got: ${a}`),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING;if(!module$contents$goog$html$SafeStyle_hasBalancedSquareBrackets(a))return(0,goog.asserts.fail)("String value requires balanced square brackets and one identifier per pair of brackets, got: "+a),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING}else return(0,goog.asserts.fail)(`String value allows only ${module$contents$goog$html$SafeStyle_VALUE_ALLOWED_CHARS}`+\n" and simple functions, got: "+a),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING;return module$contents$goog$html$SafeStyle_sanitizeUrl(a)}function module$contents$goog$html$SafeStyle_hasBalancedQuotes(a){let b=!0,c=!0;for(let d=0;d<a.length;d++){const e=a.charAt(d);"\'"==e&&c?b=!b:\'"\'==e&&b&&(c=!c)}return b&&c}\nfunction module$contents$goog$html$SafeStyle_hasBalancedSquareBrackets(a){let b=!0;const c=/^[-_a-zA-Z0-9]$/;for(let d=0;d<a.length;d++){const e=a.charAt(d);if("]"==e){if(b)return!1;b=!0}else if("["==e){if(!b)return!1;b=!1}else if(!b&&!c.test(e))return!1}return b}\nconst module$contents$goog$html$SafeStyle_VALUE_ALLOWED_CHARS="[-,.\\"\'%_!#/ a-zA-Z0-9\\\\[\\\\]]",module$contents$goog$html$SafeStyle_VALUE_RE=new RegExp(`^${module$contents$goog$html$SafeStyle_VALUE_ALLOWED_CHARS}+\\$`),module$contents$goog$html$SafeStyle_URL_RE=RegExp("\\\\b(url\\\\([ \\t\\n]*)(\'[ -&(-\\\\[\\\\]-~]*\'|\\"[ !#-\\\\[\\\\]-~]*\\"|[!#-&*-\\\\[\\\\]-~]*)([ \\t\\n]*\\\\))","g"),module$contents$goog$html$SafeStyle_ALLOWED_FUNCTIONS="calc cubic-bezier fit-content hsl hsla linear-gradient matrix minmax radial-gradient repeat rgb rgba (rotate|scale|translate)(X|Y|Z|3d)? steps var".split(" "),\nmodule$contents$goog$html$SafeStyle_FUNCTIONS_RE=new RegExp("\\\\b("+module$contents$goog$html$SafeStyle_ALLOWED_FUNCTIONS.join("|")+")\\\\([-+*/0-9a-zA-Z.%#\\\\[\\\\], ]+\\\\)","g"),module$contents$goog$html$SafeStyle_COMMENT_RE=/\\/\\*/;function module$contents$goog$html$SafeStyle_sanitizeUrl(a){return a.replace(module$contents$goog$html$SafeStyle_URL_RE,(b,c,d,e)=>{let f="";d=d.replace(/^([\'"])(.*)\\1$/,(g,h,k)=>{f=h;return k});b=goog.html.SafeUrl.sanitize(d).getTypedStringValue();return c+f+b+f+e})}\ngoog.html.SafeStyle=module$contents$goog$html$SafeStyle_SafeStyle;goog.object={};function module$contents$goog$object_forEach(a,b,c){for(const d in a)b.call(c,a[d],d,a)}function module$contents$goog$object_filter(a,b,c){const d={};for(const e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d}function module$contents$goog$object_map(a,b,c){const d={};for(const e in a)d[e]=b.call(c,a[e],e,a);return d}function module$contents$goog$object_some(a,b,c){for(const d in a)if(b.call(c,a[d],d,a))return!0;return!1}\nfunction module$contents$goog$object_every(a,b,c){for(const d in a)if(!b.call(c,a[d],d,a))return!1;return!0}function module$contents$goog$object_getCount(a){let b=0;for(const c in a)b++;return b}function module$contents$goog$object_getAnyKey(a){for(const b in a)return b}function module$contents$goog$object_getAnyValue(a){for(const b in a)return a[b]}function module$contents$goog$object_contains(a,b){return module$contents$goog$object_containsValue(a,b)}\nfunction module$contents$goog$object_getValues(a){const b=[];let c=0;for(const d in a)b[c++]=a[d];return b}function module$contents$goog$object_getKeys(a){const b=[];let c=0;for(const d in a)b[c++]=d;return b}function module$contents$goog$object_getValueByKeys(a,b){var c=goog.isArrayLike(b);const d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]]}return a}function module$contents$goog$object_containsKey(a,b){return null!==a&&b in a}\nfunction module$contents$goog$object_containsValue(a,b){for(const c in a)if(a[c]==b)return!0;return!1}function module$contents$goog$object_findKey(a,b,c){for(const d in a)if(b.call(c,a[d],d,a))return d}function module$contents$goog$object_findValue(a,b,c){return(b=module$contents$goog$object_findKey(a,b,c))&&a[b]}function module$contents$goog$object_isEmpty(a){for(const b in a)return!1;return!0}function module$contents$goog$object_clear(a){for(const b in a)delete a[b]}\nfunction module$contents$goog$object_remove(a,b){let c;(c=b in a)&&delete a[b];return c}function module$contents$goog$object_add(a,b,c){if(null!==a&&b in a)throw Error(`The object already contains the key "${b}"`);module$contents$goog$object_set(a,b,c)}function module$contents$goog$object_get(a,b,c){return null!==a&&b in a?a[b]:c}function module$contents$goog$object_set(a,b,c){a[b]=c}function module$contents$goog$object_setIfUndefined(a,b,c){return b in a?a[b]:a[b]=c}\nfunction module$contents$goog$object_setWithReturnValueIfNotSet(a,b,c){if(b in a)return a[b];c=c();return a[b]=c}function module$contents$goog$object_equals(a,b){for(const c in a)if(!(c in b)||a[c]!==b[c])return!1;for(const c in b)if(!(c in a))return!1;return!0}function module$contents$goog$object_clone(a){const b={};for(const c in a)b[c]=a[c];return b}\nfunction module$contents$goog$object_unsafeClone(a){if(!a||"object"!==typeof a)return a;if("function"===typeof a.clone)return a.clone();if("undefined"!==typeof Map&&a instanceof Map)return new Map(a);if("undefined"!==typeof Set&&a instanceof Set)return new Set(a);if(a instanceof Date)return new Date(a.getTime());const b=Array.isArray(a)?[]:"function"!==typeof ArrayBuffer||"function"!==typeof ArrayBuffer.isView||!ArrayBuffer.isView(a)||a instanceof DataView?{}:new a.constructor(a.length);for(const c in a)b[c]=\nmodule$contents$goog$object_unsafeClone(a[c]);return b}function module$contents$goog$object_transpose(a){const b={};for(const c in a)b[a[c]]=c;return b}const module$contents$goog$object_PROTOTYPE_FIELDS="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");\nfunction module$contents$goog$object_extend(a,b){let c,d;for(let e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(let f=0;f<module$contents$goog$object_PROTOTYPE_FIELDS.length;f++)c=module$contents$goog$object_PROTOTYPE_FIELDS[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}}\nfunction module$contents$goog$object_create(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return module$contents$goog$object_create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");const c={};for(let d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c}\nfunction module$contents$goog$object_createSet(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return module$contents$goog$object_createSet.apply(null,arguments[0]);const c={};for(let d=0;d<b;d++)c[arguments[d]]=!0;return c}function module$contents$goog$object_createImmutableView(a){let b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b}function module$contents$goog$object_isImmutableView(a){return!!Object.isFrozen&&Object.isFrozen(a)}\nfunction module$contents$goog$object_getAllPropertyNames(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return module$contents$goog$object_getKeys(a);const d={};for(;a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){const e=Object.getOwnPropertyNames(a);for(let f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a)}return module$contents$goog$object_getKeys(d)}\nfunction module$contents$goog$object_getSuperClass(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor}goog.object.add=module$contents$goog$object_add;goog.object.clear=module$contents$goog$object_clear;goog.object.clone=module$contents$goog$object_clone;goog.object.contains=module$contents$goog$object_contains;goog.object.containsKey=module$contents$goog$object_containsKey;goog.object.containsValue=module$contents$goog$object_containsValue;goog.object.create=module$contents$goog$object_create;\ngoog.object.createImmutableView=module$contents$goog$object_createImmutableView;goog.object.createSet=module$contents$goog$object_createSet;goog.object.equals=module$contents$goog$object_equals;goog.object.every=module$contents$goog$object_every;goog.object.extend=module$contents$goog$object_extend;goog.object.filter=module$contents$goog$object_filter;goog.object.findKey=module$contents$goog$object_findKey;goog.object.findValue=module$contents$goog$object_findValue;goog.object.forEach=module$contents$goog$object_forEach;\ngoog.object.get=module$contents$goog$object_get;goog.object.getAllPropertyNames=module$contents$goog$object_getAllPropertyNames;goog.object.getAnyKey=module$contents$goog$object_getAnyKey;goog.object.getAnyValue=module$contents$goog$object_getAnyValue;goog.object.getCount=module$contents$goog$object_getCount;goog.object.getKeys=module$contents$goog$object_getKeys;goog.object.getSuperClass=module$contents$goog$object_getSuperClass;goog.object.getValueByKeys=module$contents$goog$object_getValueByKeys;\ngoog.object.getValues=module$contents$goog$object_getValues;goog.object.isEmpty=module$contents$goog$object_isEmpty;goog.object.isImmutableView=module$contents$goog$object_isImmutableView;goog.object.map=module$contents$goog$object_map;goog.object.remove=module$contents$goog$object_remove;goog.object.set=module$contents$goog$object_set;goog.object.setIfUndefined=module$contents$goog$object_setIfUndefined;goog.object.setWithReturnValueIfNotSet=module$contents$goog$object_setWithReturnValueIfNotSet;\ngoog.object.some=module$contents$goog$object_some;goog.object.transpose=module$contents$goog$object_transpose;goog.object.unsafeClone=module$contents$goog$object_unsafeClone;const module$contents$goog$html$SafeStyleSheet_CONSTRUCTOR_TOKEN_PRIVATE={};\nclass module$contents$goog$html$SafeStyleSheet_SafeStyleSheet{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=b===module$contents$goog$html$SafeStyleSheet_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}toString(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_.toString()}static createRule(a,b){if((0,goog.string.internal.contains)(a,"<"))throw Error(`Selector does not allow \'<\', got: ${a}`);const c=a.replace(/(\'|")((?!\\1)[^\\r\\n\\f\\\\]|\\\\[\\s\\S])*\\1/g,\n"");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|]+$/.test(c))throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\\\]()=^$|] and strings, got: "+a);if(!module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.hasBalancedBrackets_(c))throw Error("() and [] in selector must be balanced, got: "+a);b instanceof module$contents$goog$html$SafeStyle_SafeStyle||(b=module$contents$goog$html$SafeStyle_SafeStyle.create(b));a=`${a}{`+module$contents$goog$html$SafeStyle_SafeStyle.unwrap(b).replace(/</g,"\\\\3C ")+"}";\nreturn module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}static hasBalancedBrackets_(a){const b={"(":")","[":"]"},c=[];for(let d=0;d<a.length;d++){const e=a[d];if(b[e])c.push(b[e]);else if(module$contents$goog$object_contains(b,e)&&c.pop()!=e)return!1}return 0==c.length}static concat(a){let b="";const c=d=>{Array.isArray(d)?d.forEach(c):b+=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.unwrap(d)};Array.prototype.forEach.call(arguments,\nc);return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)}static fromConstant(a){a=goog.string.Const.unwrap(a);if(0===a.length)return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.EMPTY;(0,goog.asserts.assert)(!(0,goog.string.internal.contains)(a,"<"),`Forbidden \'<\' character in style sheet string: ${a}`);return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_}static unwrap(a){if(a instanceof\nmodule$contents$goog$html$SafeStyleSheet_SafeStyleSheet&&a.constructor===module$contents$goog$html$SafeStyleSheet_SafeStyleSheet)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;(0,goog.asserts.fail)("expected object of type SafeStyleSheet, got \'"+a+"\' of type "+goog.typeOf(a));return"type_error:SafeStyleSheet"}static createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a){return new module$contents$goog$html$SafeStyleSheet_SafeStyleSheet(a,module$contents$goog$html$SafeStyleSheet_CONSTRUCTOR_TOKEN_PRIVATE)}}\nmodule$contents$goog$html$SafeStyleSheet_SafeStyleSheet.EMPTY=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");goog.html.SafeStyleSheet=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet;goog.dom.HtmlElement=function(){};goog.dom.TagName=class{static cast(a,b){return a}constructor(){}toString(){}};goog.dom.TagName.A="A";goog.dom.TagName.ABBR="ABBR";goog.dom.TagName.ACRONYM="ACRONYM";goog.dom.TagName.ADDRESS="ADDRESS";goog.dom.TagName.APPLET="APPLET";goog.dom.TagName.AREA="AREA";goog.dom.TagName.ARTICLE="ARTICLE";goog.dom.TagName.ASIDE="ASIDE";goog.dom.TagName.AUDIO="AUDIO";goog.dom.TagName.B="B";goog.dom.TagName.BASE="BASE";goog.dom.TagName.BASEFONT="BASEFONT";goog.dom.TagName.BDI="BDI";goog.dom.TagName.BDO="BDO";\ngoog.dom.TagName.BIG="BIG";goog.dom.TagName.BLOCKQUOTE="BLOCKQUOTE";goog.dom.TagName.BODY="BODY";goog.dom.TagName.BR="BR";goog.dom.TagName.BUTTON="BUTTON";goog.dom.TagName.CANVAS="CANVAS";goog.dom.TagName.CAPTION="CAPTION";goog.dom.TagName.CENTER="CENTER";goog.dom.TagName.CITE="CITE";goog.dom.TagName.CODE="CODE";goog.dom.TagName.COL="COL";goog.dom.TagName.COLGROUP="COLGROUP";goog.dom.TagName.COMMAND="COMMAND";goog.dom.TagName.DATA="DATA";goog.dom.TagName.DATALIST="DATALIST";goog.dom.TagName.DD="DD";\ngoog.dom.TagName.DEL="DEL";goog.dom.TagName.DETAILS="DETAILS";goog.dom.TagName.DFN="DFN";goog.dom.TagName.DIALOG="DIALOG";goog.dom.TagName.DIR="DIR";goog.dom.TagName.DIV="DIV";goog.dom.TagName.DL="DL";goog.dom.TagName.DT="DT";goog.dom.TagName.EM="EM";goog.dom.TagName.EMBED="EMBED";goog.dom.TagName.FIELDSET="FIELDSET";goog.dom.TagName.FIGCAPTION="FIGCAPTION";goog.dom.TagName.FIGURE="FIGURE";goog.dom.TagName.FONT="FONT";goog.dom.TagName.FOOTER="FOOTER";goog.dom.TagName.FORM="FORM";\ngoog.dom.TagName.FRAME="FRAME";goog.dom.TagName.FRAMESET="FRAMESET";goog.dom.TagName.H1="H1";goog.dom.TagName.H2="H2";goog.dom.TagName.H3="H3";goog.dom.TagName.H4="H4";goog.dom.TagName.H5="H5";goog.dom.TagName.H6="H6";goog.dom.TagName.HEAD="HEAD";goog.dom.TagName.HEADER="HEADER";goog.dom.TagName.HGROUP="HGROUP";goog.dom.TagName.HR="HR";goog.dom.TagName.HTML="HTML";goog.dom.TagName.I="I";goog.dom.TagName.IFRAME="IFRAME";goog.dom.TagName.IMG="IMG";goog.dom.TagName.INPUT="INPUT";\ngoog.dom.TagName.INS="INS";goog.dom.TagName.ISINDEX="ISINDEX";goog.dom.TagName.KBD="KBD";goog.dom.TagName.KEYGEN="KEYGEN";goog.dom.TagName.LABEL="LABEL";goog.dom.TagName.LEGEND="LEGEND";goog.dom.TagName.LI="LI";goog.dom.TagName.LINK="LINK";goog.dom.TagName.MAIN="MAIN";goog.dom.TagName.MAP="MAP";goog.dom.TagName.MARK="MARK";goog.dom.TagName.MATH="MATH";goog.dom.TagName.MENU="MENU";goog.dom.TagName.MENUITEM="MENUITEM";goog.dom.TagName.META="META";goog.dom.TagName.METER="METER";\ngoog.dom.TagName.NAV="NAV";goog.dom.TagName.NOFRAMES="NOFRAMES";goog.dom.TagName.NOSCRIPT="NOSCRIPT";goog.dom.TagName.OBJECT="OBJECT";goog.dom.TagName.OL="OL";goog.dom.TagName.OPTGROUP="OPTGROUP";goog.dom.TagName.OPTION="OPTION";goog.dom.TagName.OUTPUT="OUTPUT";goog.dom.TagName.P="P";goog.dom.TagName.PARAM="PARAM";goog.dom.TagName.PICTURE="PICTURE";goog.dom.TagName.PRE="PRE";goog.dom.TagName.PROGRESS="PROGRESS";goog.dom.TagName.Q="Q";goog.dom.TagName.RP="RP";goog.dom.TagName.RT="RT";\ngoog.dom.TagName.RTC="RTC";goog.dom.TagName.RUBY="RUBY";goog.dom.TagName.S="S";goog.dom.TagName.SAMP="SAMP";goog.dom.TagName.SCRIPT="SCRIPT";goog.dom.TagName.SECTION="SECTION";goog.dom.TagName.SELECT="SELECT";goog.dom.TagName.SMALL="SMALL";goog.dom.TagName.SOURCE="SOURCE";goog.dom.TagName.SPAN="SPAN";goog.dom.TagName.STRIKE="STRIKE";goog.dom.TagName.STRONG="STRONG";goog.dom.TagName.STYLE="STYLE";goog.dom.TagName.SUB="SUB";goog.dom.TagName.SUMMARY="SUMMARY";goog.dom.TagName.SUP="SUP";\ngoog.dom.TagName.SVG="SVG";goog.dom.TagName.TABLE="TABLE";goog.dom.TagName.TBODY="TBODY";goog.dom.TagName.TD="TD";goog.dom.TagName.TEMPLATE="TEMPLATE";goog.dom.TagName.TEXTAREA="TEXTAREA";goog.dom.TagName.TFOOT="TFOOT";goog.dom.TagName.TH="TH";goog.dom.TagName.THEAD="THEAD";goog.dom.TagName.TIME="TIME";goog.dom.TagName.TITLE="TITLE";goog.dom.TagName.TR="TR";goog.dom.TagName.TRACK="TRACK";goog.dom.TagName.TT="TT";goog.dom.TagName.U="U";goog.dom.TagName.UL="UL";goog.dom.TagName.VAR="VAR";\ngoog.dom.TagName.VIDEO="VIDEO";goog.dom.TagName.WBR="WBR";goog.labs={};goog.labs.userAgent={};const module$contents$goog$labs$userAgent_USE_CLIENT_HINTS_OVERRIDE="",module$contents$goog$labs$userAgent_USE_CLIENT_HINTS=!1;let module$contents$goog$labs$userAgent_forceClientHintsInTests=!1;goog.labs.userAgent.setUseClientHintsForTesting=a=>{module$contents$goog$labs$userAgent_forceClientHintsInTests=a};\nconst module$contents$goog$labs$userAgent_useClientHintsRuntimeOverride=module$contents$goog$labs$userAgent_USE_CLIENT_HINTS_OVERRIDE?!!goog.getObjectByName(module$contents$goog$labs$userAgent_USE_CLIENT_HINTS_OVERRIDE):!1;goog.labs.userAgent.useClientHints=()=>module$contents$goog$labs$userAgent_USE_CLIENT_HINTS||module$contents$goog$labs$userAgent_useClientHintsRuntimeOverride||module$contents$goog$labs$userAgent_forceClientHintsInTests;goog.labs.userAgent.util={};const module$contents$goog$labs$userAgent$util_ASSUME_CLIENT_HINTS_SUPPORT=!1;function module$contents$goog$labs$userAgent$util_getNativeUserAgentString(){var a=module$contents$goog$labs$userAgent$util_getNavigator();return a&&(a=a.userAgent)?a:""}function module$contents$goog$labs$userAgent$util_getNativeUserAgentData(){const a=module$contents$goog$labs$userAgent$util_getNavigator();return a?a.userAgentData||null:null}\nfunction module$contents$goog$labs$userAgent$util_getNavigator(){return goog.global.navigator}let module$contents$goog$labs$userAgent$util_userAgentInternal=null,module$contents$goog$labs$userAgent$util_userAgentDataInternal=module$contents$goog$labs$userAgent$util_getNativeUserAgentData();\nfunction module$contents$goog$labs$userAgent$util_setUserAgent(a){module$contents$goog$labs$userAgent$util_userAgentInternal="string"===typeof a?a:module$contents$goog$labs$userAgent$util_getNativeUserAgentString()}function module$contents$goog$labs$userAgent$util_getUserAgent(){return null==module$contents$goog$labs$userAgent$util_userAgentInternal?module$contents$goog$labs$userAgent$util_getNativeUserAgentString():module$contents$goog$labs$userAgent$util_userAgentInternal}\nfunction module$contents$goog$labs$userAgent$util_setUserAgentData(a){module$contents$goog$labs$userAgent$util_userAgentDataInternal=a}function module$contents$goog$labs$userAgent$util_resetUserAgentData(){module$contents$goog$labs$userAgent$util_userAgentDataInternal=module$contents$goog$labs$userAgent$util_getNativeUserAgentData()}function module$contents$goog$labs$userAgent$util_getUserAgentData(){return module$contents$goog$labs$userAgent$util_userAgentDataInternal}\nfunction module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(a){if(!(0,goog.labs.userAgent.useClientHints)())return!1;const b=module$contents$goog$labs$userAgent$util_getUserAgentData();return b?b.brands.some(({brand:c})=>c&&(0,goog.string.internal.contains)(c,a)):!1}function module$contents$goog$labs$userAgent$util_matchUserAgent(a){const b=module$contents$goog$labs$userAgent$util_getUserAgent();return(0,goog.string.internal.contains)(b,a)}\nfunction module$contents$goog$labs$userAgent$util_matchUserAgentIgnoreCase(a){const b=module$contents$goog$labs$userAgent$util_getUserAgent();return(0,goog.string.internal.caseInsensitiveContains)(b,a)}function module$contents$goog$labs$userAgent$util_extractVersionTuples(a){const b=RegExp("([A-Z][\\\\w ]+)/([^\\\\s]+)\\\\s*(?:\\\\((.*?)\\\\))?","g"),c=[];let d;for(;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c}goog.labs.userAgent.util.ASSUME_CLIENT_HINTS_SUPPORT=module$contents$goog$labs$userAgent$util_ASSUME_CLIENT_HINTS_SUPPORT;\ngoog.labs.userAgent.util.extractVersionTuples=module$contents$goog$labs$userAgent$util_extractVersionTuples;goog.labs.userAgent.util.getNativeUserAgentString=module$contents$goog$labs$userAgent$util_getNativeUserAgentString;goog.labs.userAgent.util.getUserAgent=module$contents$goog$labs$userAgent$util_getUserAgent;goog.labs.userAgent.util.getUserAgentData=module$contents$goog$labs$userAgent$util_getUserAgentData;goog.labs.userAgent.util.matchUserAgent=module$contents$goog$labs$userAgent$util_matchUserAgent;\ngoog.labs.userAgent.util.matchUserAgentDataBrand=module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand;goog.labs.userAgent.util.matchUserAgentIgnoreCase=module$contents$goog$labs$userAgent$util_matchUserAgentIgnoreCase;goog.labs.userAgent.util.resetUserAgentData=module$contents$goog$labs$userAgent$util_resetUserAgentData;goog.labs.userAgent.util.setUserAgent=module$contents$goog$labs$userAgent$util_setUserAgent;goog.labs.userAgent.util.setUserAgentData=module$contents$goog$labs$userAgent$util_setUserAgentData;var module$exports$goog$labs$userAgent$highEntropy$highEntropyValue={AsyncValue:class{getIfLoaded(){}load(){}},HighEntropyValue:class{constructor(a){this.key_=a;this.promise_=this.value_=void 0;this.pending_=!1}getIfLoaded(){if(module$contents$goog$labs$userAgent$util_getUserAgentData())return this.value_}async load(){const a=module$contents$goog$labs$userAgent$util_getUserAgentData();if(a)return this.promise_||(this.pending_=!0,this.promise_=(async()=>{try{return this.value_=(await a.getHighEntropyValues([this.key_]))[this.key_]}finally{this.pending_=\n!1}})()),await this.promise_}resetForTesting(){if(this.pending_)throw Error("Unsafe call to resetForTesting");this.value_=this.promise_=void 0;this.pending_=!1}},Version:class{constructor(a){this.versionString_=a}toVersionStringForLogging(){return this.versionString_}isAtLeast(a){return 0<=(0,goog.string.internal.compareVersions)(this.versionString_,a)}}};var module$exports$goog$labs$userAgent$highEntropy$highEntropyData={};module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList=new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.HighEntropyValue("fullVersionList");module$exports$goog$labs$userAgent$highEntropy$highEntropyData.platformVersion=new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.HighEntropyValue("platformVersion");goog.labs.userAgent.browser={};const module$contents$goog$labs$userAgent$browser_Brand={ANDROID_BROWSER:"Android Browser",CHROMIUM:"Chromium",EDGE:"Microsoft Edge",FIREFOX:"Firefox",IE:"Internet Explorer",OPERA:"Opera",SAFARI:"Safari",SILK:"Silk"};goog.labs.userAgent.browser.Brand=module$contents$goog$labs$userAgent$browser_Brand;\nfunction module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(a=!1){if(module$contents$goog$labs$userAgent$util_ASSUME_CLIENT_HINTS_SUPPORT)return!0;if(!a&&!(0,goog.labs.userAgent.useClientHints)())return!1;a=module$contents$goog$labs$userAgent$util_getUserAgentData();return!!a&&0<a.brands.length}\nfunction module$contents$goog$labs$userAgent$browser_hasFullVersionList(){return module$contents$goog$labs$userAgent$browser_isAtLeast(module$contents$goog$labs$userAgent$browser_Brand.CHROMIUM,98)}function module$contents$goog$labs$userAgent$browser_matchOpera(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Opera")}\nfunction module$contents$goog$labs$userAgent$browser_matchIE(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Trident")||module$contents$goog$labs$userAgent$util_matchUserAgent("MSIE")}function module$contents$goog$labs$userAgent$browser_matchEdgeHtml(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Edge")}\nfunction module$contents$goog$labs$userAgent$browser_matchEdgeChromium(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(module$contents$goog$labs$userAgent$browser_Brand.EDGE):module$contents$goog$labs$userAgent$util_matchUserAgent("Edg/")}\nfunction module$contents$goog$labs$userAgent$browser_matchOperaChromium(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(module$contents$goog$labs$userAgent$browser_Brand.OPERA):module$contents$goog$labs$userAgent$util_matchUserAgent("OPR")}\nfunction module$contents$goog$labs$userAgent$browser_matchFirefox(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Firefox")||module$contents$goog$labs$userAgent$util_matchUserAgent("FxiOS")}\nfunction module$contents$goog$labs$userAgent$browser_matchSafari(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Safari")&&!(module$contents$goog$labs$userAgent$browser_matchChrome()||module$contents$goog$labs$userAgent$browser_matchCoast()||module$contents$goog$labs$userAgent$browser_matchOpera()||module$contents$goog$labs$userAgent$browser_matchEdgeHtml()||module$contents$goog$labs$userAgent$browser_matchEdgeChromium()||module$contents$goog$labs$userAgent$browser_matchOperaChromium()||\nmodule$contents$goog$labs$userAgent$browser_matchFirefox()||module$contents$goog$labs$userAgent$browser_isSilk()||module$contents$goog$labs$userAgent$util_matchUserAgent("Android"))}function module$contents$goog$labs$userAgent$browser_matchCoast(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Coast")}\nfunction module$contents$goog$labs$userAgent$browser_matchIosWebview(){return(module$contents$goog$labs$userAgent$util_matchUserAgent("iPad")||module$contents$goog$labs$userAgent$util_matchUserAgent("iPhone"))&&!module$contents$goog$labs$userAgent$browser_matchSafari()&&!module$contents$goog$labs$userAgent$browser_matchChrome()&&!module$contents$goog$labs$userAgent$browser_matchCoast()&&!module$contents$goog$labs$userAgent$browser_matchFirefox()&&module$contents$goog$labs$userAgent$util_matchUserAgent("AppleWebKit")}\nfunction module$contents$goog$labs$userAgent$browser_matchChrome(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(module$contents$goog$labs$userAgent$browser_Brand.CHROMIUM):(module$contents$goog$labs$userAgent$util_matchUserAgent("Chrome")||module$contents$goog$labs$userAgent$util_matchUserAgent("CriOS"))&&!module$contents$goog$labs$userAgent$browser_matchEdgeHtml()||module$contents$goog$labs$userAgent$browser_isSilk()}\nfunction module$contents$goog$labs$userAgent$browser_matchAndroidBrowser(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Android")&&!(module$contents$goog$labs$userAgent$browser_matchChrome()||module$contents$goog$labs$userAgent$browser_matchFirefox()||module$contents$goog$labs$userAgent$browser_matchOpera()||module$contents$goog$labs$userAgent$browser_isSilk())}const module$contents$goog$labs$userAgent$browser_isOpera=module$contents$goog$labs$userAgent$browser_matchOpera;\ngoog.labs.userAgent.browser.isOpera=module$contents$goog$labs$userAgent$browser_matchOpera;const module$contents$goog$labs$userAgent$browser_isIE=module$contents$goog$labs$userAgent$browser_matchIE;goog.labs.userAgent.browser.isIE=module$contents$goog$labs$userAgent$browser_matchIE;const module$contents$goog$labs$userAgent$browser_isEdge=module$contents$goog$labs$userAgent$browser_matchEdgeHtml;goog.labs.userAgent.browser.isEdge=module$contents$goog$labs$userAgent$browser_matchEdgeHtml;\nconst module$contents$goog$labs$userAgent$browser_isEdgeChromium=module$contents$goog$labs$userAgent$browser_matchEdgeChromium;goog.labs.userAgent.browser.isEdgeChromium=module$contents$goog$labs$userAgent$browser_matchEdgeChromium;const module$contents$goog$labs$userAgent$browser_isOperaChromium=module$contents$goog$labs$userAgent$browser_matchOperaChromium;goog.labs.userAgent.browser.isOperaChromium=module$contents$goog$labs$userAgent$browser_matchOperaChromium;\nconst module$contents$goog$labs$userAgent$browser_isFirefox=module$contents$goog$labs$userAgent$browser_matchFirefox;goog.labs.userAgent.browser.isFirefox=module$contents$goog$labs$userAgent$browser_matchFirefox;const module$contents$goog$labs$userAgent$browser_isSafari=module$contents$goog$labs$userAgent$browser_matchSafari;goog.labs.userAgent.browser.isSafari=module$contents$goog$labs$userAgent$browser_matchSafari;const module$contents$goog$labs$userAgent$browser_isCoast=module$contents$goog$labs$userAgent$browser_matchCoast;\ngoog.labs.userAgent.browser.isCoast=module$contents$goog$labs$userAgent$browser_matchCoast;const module$contents$goog$labs$userAgent$browser_isIosWebview=module$contents$goog$labs$userAgent$browser_matchIosWebview;goog.labs.userAgent.browser.isIosWebview=module$contents$goog$labs$userAgent$browser_matchIosWebview;const module$contents$goog$labs$userAgent$browser_isChrome=module$contents$goog$labs$userAgent$browser_matchChrome;goog.labs.userAgent.browser.isChrome=module$contents$goog$labs$userAgent$browser_matchChrome;\nconst module$contents$goog$labs$userAgent$browser_isAndroidBrowser=module$contents$goog$labs$userAgent$browser_matchAndroidBrowser;goog.labs.userAgent.browser.isAndroidBrowser=module$contents$goog$labs$userAgent$browser_matchAndroidBrowser;function module$contents$goog$labs$userAgent$browser_isSilk(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Silk")}goog.labs.userAgent.browser.isSilk=module$contents$goog$labs$userAgent$browser_isSilk;\nfunction module$contents$goog$labs$userAgent$browser_createVersionMap(a){const b={};a.forEach(c=>{b[c[0]]=c[1]});return c=>b[c.find(d=>d in b)]||""}\nfunction module$contents$goog$labs$userAgent$browser_getVersion(){var a=module$contents$goog$labs$userAgent$util_getUserAgent();if(module$contents$goog$labs$userAgent$browser_matchIE())return module$contents$goog$labs$userAgent$browser_getIEVersion(a);a=module$contents$goog$labs$userAgent$util_extractVersionTuples(a);const b=module$contents$goog$labs$userAgent$browser_createVersionMap(a);return module$contents$goog$labs$userAgent$browser_matchOpera()?b(["Version","Opera"]):module$contents$goog$labs$userAgent$browser_matchEdgeHtml()?\nb(["Edge"]):module$contents$goog$labs$userAgent$browser_matchEdgeChromium()?b(["Edg"]):module$contents$goog$labs$userAgent$browser_isSilk()?b(["Silk"]):module$contents$goog$labs$userAgent$browser_matchChrome()?b(["Chrome","CriOS","HeadlessChrome"]):(a=a[2])&&a[1]||""}goog.labs.userAgent.browser.getVersion=module$contents$goog$labs$userAgent$browser_getVersion;\nfunction module$contents$goog$labs$userAgent$browser_isVersionOrHigher(a){return 0<=(0,goog.string.internal.compareVersions)(module$contents$goog$labs$userAgent$browser_getVersion(),a)}goog.labs.userAgent.browser.isVersionOrHigher=module$contents$goog$labs$userAgent$browser_isVersionOrHigher;\nfunction module$contents$goog$labs$userAgent$browser_getIEVersion(a){var b=/rv: *([\\d\\.]*)/.exec(a);if(b&&b[1])return b[1];b="";const c=/MSIE +([\\d\\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\\/(\\d.\\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0"}else b="7.0";else b=c[1];return b}\nfunction module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a){var b=module$contents$goog$labs$userAgent$util_getUserAgent();if(a===module$contents$goog$labs$userAgent$browser_Brand.IE)return module$contents$goog$labs$userAgent$browser_matchIE()?module$contents$goog$labs$userAgent$browser_getIEVersion(b):"";b=module$contents$goog$labs$userAgent$util_extractVersionTuples(b);const c=module$contents$goog$labs$userAgent$browser_createVersionMap(b);switch(a){case module$contents$goog$labs$userAgent$browser_Brand.OPERA:if(module$contents$goog$labs$userAgent$browser_matchOpera())return c(["Version",\n"Opera"]);if(module$contents$goog$labs$userAgent$browser_matchOperaChromium())return c(["OPR"]);break;case module$contents$goog$labs$userAgent$browser_Brand.EDGE:if(module$contents$goog$labs$userAgent$browser_matchEdgeHtml())return c(["Edge"]);if(module$contents$goog$labs$userAgent$browser_matchEdgeChromium())return c(["Edg"]);break;case module$contents$goog$labs$userAgent$browser_Brand.CHROMIUM:if(module$contents$goog$labs$userAgent$browser_matchChrome())return c(["Chrome","CriOS","HeadlessChrome"])}return a===\nmodule$contents$goog$labs$userAgent$browser_Brand.FIREFOX&&module$contents$goog$labs$userAgent$browser_matchFirefox()||a===module$contents$goog$labs$userAgent$browser_Brand.SAFARI&&module$contents$goog$labs$userAgent$browser_matchSafari()||a===module$contents$goog$labs$userAgent$browser_Brand.ANDROID_BROWSER&&module$contents$goog$labs$userAgent$browser_matchAndroidBrowser()||a===module$contents$goog$labs$userAgent$browser_Brand.SILK&&module$contents$goog$labs$userAgent$browser_isSilk()?(a=b[2])&&\na[1]||"":""}\nfunction module$contents$goog$labs$userAgent$browser_versionOf_(a){if(module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()&&a!==module$contents$goog$labs$userAgent$browser_Brand.SILK){var b=module$contents$goog$labs$userAgent$util_getUserAgentData().brands.find(({brand:c})=>c===a);if(!b||!b.version)return NaN;b=b.version.split(".")}else{b=module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a);if(""===b)return NaN;b=b.split(".")}return 0===b.length?NaN:Number(b[0])}\nfunction module$contents$goog$labs$userAgent$browser_isAtLeast(a,b){(0,goog.asserts.assert)(Math.floor(b)===b,"Major version must be an integer");return module$contents$goog$labs$userAgent$browser_versionOf_(a)>=b}goog.labs.userAgent.browser.isAtLeast=module$contents$goog$labs$userAgent$browser_isAtLeast;\nfunction module$contents$goog$labs$userAgent$browser_isAtMost(a,b){(0,goog.asserts.assert)(Math.floor(b)===b,"Major version must be an integer");return module$contents$goog$labs$userAgent$browser_versionOf_(a)<=b}goog.labs.userAgent.browser.isAtMost=module$contents$goog$labs$userAgent$browser_isAtMost;\nclass module$contents$goog$labs$userAgent$browser_HighEntropyBrandVersion{constructor(a,b,c){this.brand_=a;this.version_=new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.Version(c);this.useUach_=b}getIfLoaded(){if(this.useUach_){var a=module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.getIfLoaded();if(void 0!==a)return a=a.find(({brand:b})=>this.brand_===b),(0,goog.asserts.assertExists)(a),new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.Version(a.version)}if(module$contents$goog$labs$userAgent$browser_preUachHasLoaded)return this.version_}async load(){if(this.useUach_){var a=\nawait module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.load();if(void 0!==a)return a=a.find(({brand:b})=>this.brand_===b),(0,goog.asserts.assertExists)(a),new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.Version(a.version)}else await 0;module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!0;return this.version_}}let module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!1;\nasync function module$contents$goog$labs$userAgent$browser_loadFullVersions(){module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(!0)&&await module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.load();module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!0}goog.labs.userAgent.browser.loadFullVersions=module$contents$goog$labs$userAgent$browser_loadFullVersions;\ngoog.labs.userAgent.browser.resetForTesting=()=>{module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!1;module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.resetForTesting()};\nfunction module$contents$goog$labs$userAgent$browser_fullVersionOf(a){let b="";module$contents$goog$labs$userAgent$browser_hasFullVersionList()||(b=module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a));const c=a!==module$contents$goog$labs$userAgent$browser_Brand.SILK&&module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(!0);if(c){if(!module$contents$goog$labs$userAgent$util_getUserAgentData().brands.find(({brand:d})=>d===a))return}else if(""===b)return;return new module$contents$goog$labs$userAgent$browser_HighEntropyBrandVersion(a,\nc,b)}goog.labs.userAgent.browser.fullVersionOf=module$contents$goog$labs$userAgent$browser_fullVersionOf;\nfunction module$contents$goog$labs$userAgent$browser_getVersionStringForLogging(a){if(module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(!0)){var b=module$contents$goog$labs$userAgent$browser_fullVersionOf(a);if(b){if(b=b.getIfLoaded())return b.toVersionStringForLogging();b=module$contents$goog$labs$userAgent$util_getUserAgentData().brands.find(({brand:c})=>c===a);(0,goog.asserts.assertExists)(b);return b.version}return""}return module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a)}\ngoog.labs.userAgent.browser.getVersionStringForLogging=module$contents$goog$labs$userAgent$browser_getVersionStringForLogging;goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};const module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE={};\nclass module$contents$goog$html$SafeHtml_SafeHtml{constructor(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=b===module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}toString(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}static unwrap(a){return module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(a).toString()}static unwrapTrustedHTML(a){if(a instanceof module$contents$goog$html$SafeHtml_SafeHtml&&\na.constructor===module$contents$goog$html$SafeHtml_SafeHtml)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail(`expected object of type SafeHtml, got \'${a}\' of type `+goog.typeOf(a));return"type_error:SafeHtml"}static htmlEscape(a){if(a instanceof module$contents$goog$html$SafeHtml_SafeHtml)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a))}static htmlEscapePreservingNewlines(a){if(a instanceof\nmodule$contents$goog$html$SafeHtml_SafeHtml)return a;a=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(a);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(a)))}static htmlEscapePreservingNewlinesAndSpaces(a){if(a instanceof module$contents$goog$html$SafeHtml_SafeHtml)return a;a=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(a);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(a)))}static comment(a){return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\\x3c!--"+\ngoog.string.internal.htmlEscape(a)+"--\\x3e")}static create(a,b,c){module$contents$goog$html$SafeHtml_SafeHtml.verifyTagName(String(a));return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)}static verifyTagName(a){if(!module$contents$goog$html$SafeHtml_VALID_NAMES_IN_TAG.test(a))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Invalid tag name <${a}>.`:"");if(a.toUpperCase()in module$contents$goog$html$SafeHtml_NOT_ALLOWED_TAG_NAMES)throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\n`Tag name <${a}> is not allowed for SafeHtml.`:"");}static createIframe(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);const e={};e.src=a||null;e.srcdoc=b&&module$contents$goog$html$SafeHtml_SafeHtml.unwrap(b);a=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes(e,{sandbox:""},c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)}static createSandboxIframe(a,b,c,d){if(!module$contents$goog$html$SafeHtml_SafeHtml.canUseSandboxIframe())throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\n"The browser does not support sandboxed iframes.":"");const e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox="";a=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes(e,{},c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)}static canUseSandboxIframe(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype}static createScriptSrc(a,b){goog.html.TrustedResourceUrl.unwrap(a);\na=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes({src:a},{},b);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",a)}static createScript(a,b){for(var c in b)if(Object.prototype.hasOwnProperty.call(b,c)){var d=c.toLowerCase();if("language"==d||"src"==d||"text"==d)throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Cannot set "${d}" attribute`:"");}c="";a=module$contents$goog$array_concat(a);for(d=0;d<\na.length;d++)c+=module$contents$goog$html$SafeScript_SafeScript.unwrap(a[d]);a=module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",b,a)}static createStyle(a,b){b=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes({type:"text/css"},{},b);let c="";a=module$contents$goog$array_concat(a);for(let d=0;d<a.length;d++)c+=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.unwrap(a[d]);\na=module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",b,a)}static createMetaRefresh(a,b){a=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(module$contents$goog$labs$userAgent$browser_matchIE()||module$contents$goog$labs$userAgent$browser_matchEdgeHtml())&&goog.string.internal.contains(a,";")&&(a="\'"+a.replace(/\'/g,"%27")+"\'");return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",\n{"http-equiv":"refresh",content:(b||0)+"; url="+a})}static join(a,b){a=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(a);const c=[],d=e=>{Array.isArray(e)?e.forEach(d):(e=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(e),c.push(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(e)))};b.forEach(d);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c.join(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(a)))}static concat(a){return module$contents$goog$html$SafeHtml_SafeHtml.join(module$contents$goog$html$SafeHtml_SafeHtml.EMPTY,\nArray.prototype.slice.call(arguments))}static createSafeHtmlSecurityPrivateDoNotAccessOrElse(a){const b=goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createHTML(a):a;return new module$contents$goog$html$SafeHtml_SafeHtml(a,module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE)}static createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(a,b,c){b=`<${a}`+module$contents$goog$html$SafeHtml_SafeHtml.stringifyAttributes(a,b);null==c?c=[]:Array.isArray(c)||(c=[c]);goog.dom.tags.isVoidTag(a.toLowerCase())?\n(goog.asserts.assert(!c.length,`Void tag <${a}> does not allow content.`),b+=">"):(c=module$contents$goog$html$SafeHtml_SafeHtml.concat(c),b+=">"+module$contents$goog$html$SafeHtml_SafeHtml.unwrap(c)+"</"+a+">");return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b)}static stringifyAttributes(a,b){let c="";if(b)for(let d in b)if(Object.prototype.hasOwnProperty.call(b,d)){if(!module$contents$goog$html$SafeHtml_VALID_NAMES_IN_TAG.test(d))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\n`Invalid attribute name "${d}".`:"");const e=b[d];null!=e&&(c+=" "+module$contents$goog$html$SafeHtml_getAttrNameAndValue(a,d,e))}return c}static combineAttributes(a,b,c){const d={};for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=a[e]);for(const f in b)Object.prototype.hasOwnProperty.call(b,f)&&(goog.asserts.assert(f.toLowerCase()==f,"Must be lower case"),d[f]=b[f]);if(c)for(const f in c)if(Object.prototype.hasOwnProperty.call(c,\nf)){e=f.toLowerCase();if(e in a)throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Cannot override "${e}" attribute, got "`+f+\'" with value "\'+c[f]+\'"\':"");e in b&&delete d[e];d[f]=c[f]}return d}}module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES=goog.DEBUG;module$contents$goog$html$SafeHtml_SafeHtml.SUPPORT_STYLE_ATTRIBUTE=!0;module$contents$goog$html$SafeHtml_SafeHtml.from=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape;\nconst module$contents$goog$html$SafeHtml_VALID_NAMES_IN_TAG=/^[a-zA-Z0-9-]+$/,module$contents$goog$html$SafeHtml_URL_ATTRIBUTES={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0},module$contents$goog$html$SafeHtml_NOT_ALLOWED_TAG_NAMES={[goog.dom.TagName.APPLET]:!0,[goog.dom.TagName.BASE]:!0,[goog.dom.TagName.EMBED]:!0,[goog.dom.TagName.IFRAME]:!0,[goog.dom.TagName.LINK]:!0,[goog.dom.TagName.MATH]:!0,[goog.dom.TagName.META]:!0,[goog.dom.TagName.OBJECT]:!0,[goog.dom.TagName.SCRIPT]:!0,\n[goog.dom.TagName.STYLE]:!0,[goog.dom.TagName.SVG]:!0,[goog.dom.TagName.TEMPLATE]:!0};\nfunction module$contents$goog$html$SafeHtml_getAttrNameAndValue(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if("style"==b.toLowerCase())if(module$contents$goog$html$SafeHtml_SafeHtml.SUPPORT_STYLE_ATTRIBUTE)c=module$contents$goog$html$SafeHtml_getStyleValue(c);else throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\'Attribute "style" not supported.\':"");else{if(/^on/i.test(b))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\n`Attribute "${b}`+\'" requires goog.string.Const value, "\'+c+\'" given.\':"");if(b.toLowerCase()in module$contents$goog$html$SafeHtml_URL_ATTRIBUTES)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);else if("string"===typeof c)c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Attribute "${b}" on tag "${a}`+\'" requires goog.html.SafeUrl, goog.string.Const, or string, value "\'+\nc+\'" given.\':"");}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());goog.asserts.assert("string"===typeof c||"number"===typeof c,"String or number value expected, got "+typeof c+" with value: "+c);return`${b}="`+goog.string.internal.htmlEscape(String(c))+\'"\'}\nfunction module$contents$goog$html$SafeHtml_getStyleValue(a){if(!goog.isObject(a))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?\'The "style" attribute requires goog.html.SafeStyle or map of style properties, \'+typeof a+" given: "+a:"");a instanceof module$contents$goog$html$SafeStyle_SafeStyle||(a=module$contents$goog$html$SafeStyle_SafeStyle.create(a));return module$contents$goog$html$SafeStyle_SafeStyle.unwrap(a)}\nmodule$contents$goog$html$SafeHtml_SafeHtml.DOCTYPE_HTML=function(){return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>")}();module$contents$goog$html$SafeHtml_SafeHtml.EMPTY=new module$contents$goog$html$SafeHtml_SafeHtml(goog.global.trustedTypes&&goog.global.trustedTypes.emptyHTML||"",module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE);module$contents$goog$html$SafeHtml_SafeHtml.BR=function(){return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>")}();\ngoog.html.SafeHtml=module$contents$goog$html$SafeHtml_SafeHtml;goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};\ngoog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};\ngoog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue(function(){if(goog.DEBUG&&"undefined"===typeof document)return!1;var a=document.createElement("div"),b=document.createElement("div");b.appendChild(document.createElement("div"));a.appendChild(b);if(goog.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(module$contents$goog$html$SafeHtml_SafeHtml.EMPTY);return!b.parentElement});\ngoog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS&&a.tagName){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+a.tagName+".");}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};\ngoog.dom.safe.setInnerHtmlFromConstant=function(a,b){goog.dom.safe.setInnerHtml(a,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Constant HTML to be immediatelly used."),goog.string.Const.unwrap(b)))};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setFormElementAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLFormElement(a).action=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setButtonFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLButtonElement(a).formAction=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setInputFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLInputElement(a).formAction=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=module$contents$goog$html$SafeStyle_SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b))};\ngoog.dom.safe.setAnchorHref=function(a,b){goog.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setAudioSrc=function(a,b){goog.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:audio\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};\ngoog.dom.safe.setVideoSrc=function(a,b){goog.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:video\\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setEmbedSrc=function(a,b){goog.dom.asserts.assertIsHTMLEmbedElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setFrameSrc=function(a,b){goog.dom.asserts.assertIsHTMLFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};\ngoog.dom.safe.setIframeSrc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};goog.dom.safe.setIframeSrcdoc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b)};\ngoog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.asserts.assertIsHTMLLinkElement(a);a.rel=c;goog.string.internal.caseInsensitiveContains(c,"stylesheet")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,\'URL must be TrustedResourceUrl because "rel" contains "stylesheet"\'),a.href=goog.html.TrustedResourceUrl.unwrap(b),(b=goog.dom.safe.getStyleNonce(a.ownerDocument&&a.ownerDocument.defaultView))&&a.setAttribute("nonce",b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrap(b):\nb instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrap(b):goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitizeAssertUnchanged(b))};goog.dom.safe.setObjectData=function(a,b){goog.dom.asserts.assertIsHTMLObjectElement(a);a.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);goog.dom.safe.setNonceForScriptElement_(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};\ngoog.dom.safe.setScriptContent=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);goog.dom.safe.setNonceForScriptElement_(a);a.textContent=module$contents$goog$html$SafeScript_SafeScript.unwrapTrustedScript(b)};goog.dom.safe.setNonceForScriptElement_=function(a){const b=goog.dom.safe.getScriptNonce(a.ownerDocument&&a.ownerDocument.defaultView);b&&a.setAttribute("nonce",b)};\ngoog.dom.safe.setLocationHref=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.assignLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(goog.html.SafeUrl.unwrap(b))};\ngoog.dom.safe.replaceLocation=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(goog.html.SafeUrl.unwrap(b))};goog.dom.safe.openInWindow=function(a,b,c,d){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitizeAssertUnchanged(a);b=b||goog.global;c=c instanceof goog.string.Const?goog.string.Const.unwrap(c):c||"";return void 0!==d?b.open(goog.html.SafeUrl.unwrap(a),c,d):b.open(goog.html.SafeUrl.unwrap(a),c)};\ngoog.dom.safe.parseFromStringHtml=function(a,b){return goog.dom.safe.parseFromString(a,b,"text/html")};goog.dom.safe.parseFromString=function(a,b,c){return a.parseFromString(module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b),c)};\ngoog.dom.safe.createImageFromBlob=function(a){if(!/^image\\/.*/g.test(a.type))throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");var b=goog.global.URL.createObjectURL(a);a=new goog.global.Image;a.onload=function(){goog.global.URL.revokeObjectURL(b)};a.src=b;return a};goog.dom.safe.createContextualFragment=function(a,b){return a.createContextualFragment(module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b))};\ngoog.dom.safe.getScriptNonce=function(a){return goog.dom.safe.getNonce_("script[nonce]",a)};goog.dom.safe.getStyleNonce=function(a){return goog.dom.safe.getNonce_(\'style[nonce],link[rel="stylesheet"][nonce]\',a)};goog.dom.safe.NONCE_PATTERN_=/^[\\w+/_-]+[=]{0,2}$/;goog.dom.safe.getNonce_=function(a,b){b=(b||goog.global).document;return b.querySelector?(a=b.querySelector(a))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.dom.safe.NONCE_PATTERN_.test(a)?a:"":""};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\\u00a0",ZERO_WIDTH_SPACE:"\\u200b"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;\ngoog.string.subs=function(a,b){const c=a.split("%s");let d="";const e=Array.prototype.slice.call(arguments,1);for(;e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\\s\\xa0]+/g," ").replace(/^\\s+|\\s+$/g,"")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;\ngoog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\\t\\n\\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};\ngoog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\\u0080"<=a&&"\\ufffd">=a};goog.string.stripNewlines=function(a){return a.replace(/(\\r\\n|\\r|\\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\\r\\n|\\r|\\n)/g,"\\n")};goog.string.normalizeWhitespace=function(a){return a.replace(/\\xa0|\\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\\xa0|[ \\t]+/g," ")};\ngoog.string.collapseBreakingSpaces=function(a){return a.replace(/[\\t\\r\\n ]+/g," ").replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g,"")};goog.string.trim=goog.string.internal.trim;goog.string.trimLeft=function(a){return a.replace(/^[\\s\\xa0]+/,"")};goog.string.trimRight=function(a){return a.replace(/[\\s\\xa0]+$/,"")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;\ngoog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;const d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length);for(let g=0;g<f;g++){c=d[g];const h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\\d+|\\D+/g)};\ngoog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\\d+|\\.\\d+|\\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\\+/g," "))};goog.string.newLineToBr=goog.string.internal.newLineToBr;\ngoog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};\ngoog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};\ngoog.string.unescapeEntitiesUsingDom_=function(a,b){const c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":\'"\'};let d;d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(e,f){let g=c[e];if(g)return g;"#"==f.charAt(0)&&(f=Number("0"+f.slice(1)),isNaN(f)||(g=String.fromCharCode(f)));g||(goog.dom.safe.setInnerHtml(d,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."),\ne+" ")),g=d.firstChild.nodeValue.slice(0,-1));return c[e]=g})};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(b,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return\'"\';default:return"#"!=c.charAt(0)||(c=Number("0"+c.slice(1)),isNaN(c))?b:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};\ngoog.string.preserveSpaces=function(a){return a.replace(/(^|[\\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){const c=b.length;for(let d=0;d<c;d++){const e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};\ngoog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\\x00":"\\\\0","\\b":"\\\\b","\\f":"\\\\f","\\n":"\\\\n","\\r":"\\\\r","\\t":"\\\\t","\\v":"\\\\x0B",\'"\':\'\\\\"\',"\\\\":"\\\\\\\\","<":"\\\\u003C"};goog.string.jsEscapeCache_={"\'":"\\\\\'"};\ngoog.string.quote=function(a){a=String(a);const b=[\'"\'];for(let c=0;c<a.length;c++){const d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push(\'"\');return b.join("")};goog.string.escapeString=function(a){const b=[];for(let c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};\ngoog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];let b;const c=a.charCodeAt(0);if(31<c&&127>c)b=a;else{if(256>c){if(b="\\\\x",16>c||256<c)b+="0"}else b="\\\\u",4096>c&&(b+="0");b+=c.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=b};goog.string.contains=goog.string.internal.contains;\ngoog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){let d=a;0<=b&&b<a.length&&0<c&&(d=a.slice(0,b)+a.slice(b+c));return d};goog.string.remove=function(a,b){return a.replace(b,"")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,"")};\ngoog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,c.replace(/\\$/g,"$$$$"))};goog.string.regExpEscape=function(a){return String(a).replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g,"\\\\$1").replace(/\\x08/g,"\\\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};\ngoog.string.padNumber=function(a,b,c){if(!Number.isFinite(a))return String(a);a=void 0!==c?a.toFixed(c):String(a);c=a.indexOf(".");-1===c&&(c=a.length);const d="-"===a[0]?"-":"";d&&(a=a.substring(1));return d+goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};\ngoog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){let b=0;for(let c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){const b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};\ngoog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\\-([a-z])/g,function(b,c){return c.toUpperCase()})};goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};goog.string.toTitleCase=function(a,b){b="string"===typeof b?goog.string.regExpEscape(b):"\\\\s";return a.replace(new RegExp("(^"+(b?"|["+b+"]+":"")+")([a-z])","g"),function(c,d,e){return d+e.toUpperCase()})};\ngoog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.slice(1)).toLowerCase()};goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return"string"===typeof a?/^\\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);const d=[];for(;0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};\ngoog.string.lastComponent=function(a,b){if(b)"string"==typeof b&&(b=[b]);else return a;let c=-1;for(let d=0;d<b.length;d++){if(""==b[d])continue;const e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};\ngoog.string.editDistance=function(a,b){const c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.string.path={};goog.string.path.baseName=function(a){const b=a.lastIndexOf("/")+1;return a.slice(b)};goog.string.path.basename=goog.string.path.baseName;goog.string.path.dirname=function(a){const b=a.lastIndexOf("/")+1;a=a.slice(0,b);/^\\/+$/.test(a)||(a=a.replace(/\\/+$/,""));return a};goog.string.path.extension=function(a){a=goog.string.path.baseName(a).replace(/\\.+/g,".");const b=a.lastIndexOf(".");return 0>=b?"":a.slice(b+1)};\ngoog.string.path.join=function(a){let b=arguments[0];for(let c=1;c<arguments.length;c++){const d=arguments[c];b=goog.string.startsWith(d,"/")?d:""==b||goog.string.endsWith(b,"/")?b+d:b+("/"+d)}return b};\ngoog.string.path.normalizePath=function(a){if(""==a)return".";let b="";goog.string.startsWith(a,"/")&&(b="/",goog.string.startsWith(a,"//")&&!goog.string.startsWith(a,"///")&&(b="//"));a=a.split("/");const c=[];for(let d=0;d<a.length;d++){const e=a[d];""!=e&&"."!=e&&(".."!=e||!b&&!c.length||".."==module$contents$goog$array_peek(c)?c.push(e):c.pop())}return b+c.join("/")||"."};goog.string.path.split=function(a){const b=goog.string.path.dirname(a);a=goog.string.path.baseName(a);return[b,a]};const DEBUG_WASI$$module$src$filesystem$wasi=!1;function assertLeadingSlash$$module$src$filesystem$wasi(a){return/^\\//g.test(a)?a:`/${a}`}function removeLeadingSlash$$module$src$filesystem$wasi(a){return a.replace(/^\\//g,"")}function shouldOpenReader$$module$src$filesystem$wasi(a){return(a&(WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants))!==goog.global.BigInt(0)}\nfunction performanceNowPoly$$module$src$filesystem$wasi(){if("undefined"===typeof performance||"undefined"===typeof performance.now){const a=Date.now();return Date.now()-a}return performance.now()}function concatUint8Arrays$$module$src$filesystem$wasi(a){var b=a.reduce((d,e)=>d+e.length,0);if(0!==a.length){b=new Uint8Array(b);var c=0;for(const d of a)b.set(d,c),c+=d.length;return b}}\nconst WASI$$module$src$filesystem$wasi=function({}){this.fd=Array.from({length:4});this.fd[0]={fd:0,path:"/dev/stdin",seekPos:goog.global.BigInt(0),buffers:[]};this.fd[1]={fd:1,path:"/dev/stdout",seekPos:goog.global.BigInt(0),buffers:[]};this.fd[2]={fd:2,path:"/dev/stderr",seekPos:goog.global.BigInt(0),buffers:[]};this.fd[3]={fd:3,path:"/",seekPos:goog.global.BigInt(0),buffers:[]};this.getMemory=this.getMemory.bind(this);this.CPUTIME_START=0};\nWASI$$module$src$filesystem$wasi.prototype.start=function(a){this.CPUTIME_START=performanceNowPoly$$module$src$filesystem$wasi();a.exports._start()};WASI$$module$src$filesystem$wasi.prototype.getImports=function(a){const b={};a=WebAssembly.Module.imports(a);for(const c of a)"function"===c.kind&&c.module.startsWith("wasi_")&&("object"!==typeof b[c.module]&&(b[c.module]={}),b[c.module][c.name]=this[c.name].bind(this));return b};\nWASI$$module$src$filesystem$wasi.prototype.setMemory=function(a){this.memory=a};WASI$$module$src$filesystem$wasi.prototype.getMemory=function(){this.view&&this.view.buffer&&this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer));return this.view};WASI$$module$src$filesystem$wasi.prototype.msToNs=function(a){const b=Math.trunc(a);a=goog.global.BigInt(Math.round(1E6*(a-b)));return goog.global.BigInt(b)*goog.global.BigInt(1E6)+a};\nWASI$$module$src$filesystem$wasi.prototype.now=function(a){switch(a){case WASI_CLOCK_MONOTONIC$$module$src$filesystem$constants:return Math.floor(performanceNowPoly$$module$src$filesystem$wasi());case WASI_CLOCK_REALTIME$$module$src$filesystem$constants:return this.msToNs(Date.now());case WASI_CLOCK_PROCESS_CPUTIME_ID$$module$src$filesystem$constants:case WASI_CLOCK_THREAD_CPUTIME_ID$$module$src$filesystem$constants:return Math.floor(performanceNowPoly$$module$src$filesystem$wasi()-this.CPUTIME_START);\ndefault:return 0}};WASI$$module$src$filesystem$wasi.prototype.args_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("args_get",a,b,module$src$filesystem$constants);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.args_sizes_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("args_sizes_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.clock_res_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("args_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.clock_time_get=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("clock_time_get",a,b,c,arguments);const d=this.getMemory(),e=this.now(a);d.setBigUint64(c,goog.global.BigInt(e),!0);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.environ_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("environ_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.environ_sizes_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("environ_sizes_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_advise=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_advise",a,b,c,d,arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_allocate=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_allocate",a,b,c,arguments);return WASI_ENOSYS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_close=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_close",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_datasync=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_datasync",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_fdstat_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_fdstat_get",a,b,arguments);const c=this.getMemory();c.setUint8(b+4,WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants);c.setUint16(b+2,0,!0);c.setUint16(b+4,0,!0);c.setBigUint64(b+8,goog.global.BigInt(RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants),!0);c.setBigUint64(b+8+8,goog.global.BigInt(RIGHTS_REGULAR_FILE_INHERITING$$module$src$filesystem$constants),\n!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_fdstat_set_flags=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_fdstat_set_flags",a,b,arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_fdstat_set_rights=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_fdstat_set_rights",a,b,c,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_filestat_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_filestat_get",a,b,arguments);let c=0;this.fd[a]&&(c=this.fd[a].buffers.reduce(function(e,f){return e+(null==f?void 0:f.byteLength)?null==f?void 0:f.byteLength:0},0));const d=this.getMemory();d.setBigUint64(b,goog.global.BigInt(a),!0);b+=8;d.setBigUint64(b,goog.global.BigInt(a),!0);b+=8;d.setUint8(b,WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants);b+=8;d.setBigUint64(b,\ngoog.global.BigInt(1),!0);b+=8;d.setBigUint64(b,goog.global.BigInt(c),!0);b+=8;d.setBigUint64(b,this.msToNs(this.CPUTIME_START),!0);b+=8;d.setBigUint64(b,this.msToNs(this.CPUTIME_START),!0);d.setBigUint64(b+8,this.msToNs(this.CPUTIME_START),!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_filestat_set_size=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_filestat_set_size",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_filestat_set_times=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_filestat_set_times",a,b,c,d,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_pread=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_pread",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_prestat_dir_name=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_prestat_dir_name",a,b,c,this.fd[a]);if(!this.fd[a]&&!this.fd[a-1])return WASI_EBADF$$module$src$filesystem$constants;({path:c}=this.fd[a]);a=this.getMemory();c=encoder$$module$src$utils$text_encoders.encode(c);(new Uint8Array(a.buffer)).set(c,b);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_prestat_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_prestat_get",a,b,this.fd[a]);if(!this.fd[a])return WASI_EBADF$$module$src$filesystem$constants;var {path:c}=this.fd[a];a=this.getMemory();c=encoder$$module$src$utils$text_encoders.encode(c);a.setUint8(b,WASI_PREOPENTYPE_DIR$$module$src$filesystem$constants);a.setUint32(b+4,c.byteLength,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_pwrite=function(a,b,c,d,e){console.log("fd_pwrite",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_read=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_read",a,b,c,d,arguments);const e=this.fd[a]&&this.fd[a].buffers;var f=e.reduce((m,p)=>m+p.length,0);const g=this.getMemory();if(e&&0!==e.length){var h=Number(this.fd[a].seekPos),k=0,l=!1;if(h>=f)return k=g.getUint32(b,!0),g.setUint8(k,"\\x00"),g.setUint32(d,0,!0),WASI_ESUCCESS$$module$src$filesystem$constants;for(f=0;f<c;f++){var n=b+8*f;const m=g.getUint32(n,!0);n=g.getUint32(n+\n4,!0);l||(k+=n,Array.from({length:n},(p,q)=>q).reduce((p,q)=>{if(l)return p;const [B,r]=p;let v=p=0,D=!1,y=0,u;if(0===q)for(;!D;)u=e[p]?e[p].byteLength:0,y<=h&&u+y>h?(D=!0,v=h-y):(y+=u,p+=1);else p=B,v=r;e[p]?(g.setUint8(m+q,e[p][v]),v+1>=e[p].byteLength?(p=B+1,v=0):v+=1):(g.setUint8(m+q,"\\x00"),h+=q,l=!0);return[p,v]},[0,0]),l||(h+=n))}this.fd[a].seekPos=goog.global.BigInt(h);g.setUint32(d,k,!0);return WASI_ESUCCESS$$module$src$filesystem$constants}console.error("Reading non existent file",a,this.fd[a])};\nWASI$$module$src$filesystem$wasi.prototype.fd_readdir=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_readdir",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_renumber=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_renumber",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_seek=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_seek",a,b,c,d,arguments);const e=this.getMemory();switch(c){case WASI_WHENCE_CUR$$module$src$filesystem$constants:var f;this.fd[a].seekPos=(null!=(f=this.fd[a].seekPos)?f:goog.global.BigInt(0))+goog.global.BigInt(b);break;case WASI_WHENCE_END$$module$src$filesystem$constants:f=(this.fd[a].buffers||[]).reduce((g,h)=>g+h.length,0);this.fd[a].seekPos=BigInt(f)+BigInt(b);break;\ncase WASI_WHENCE_SET$$module$src$filesystem$constants:this.fd[a].seekPos=BigInt(b)}e.setBigUint64(d,this.fd[a].seekPos,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_sync=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_sync",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_tell=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_tell",a,b,arguments);const c=this.getMemory();this.fd[a].seekPos||(this.fd[a].seekPos=goog.global.BigInt(0));c.setBigUint64(b,this.fd[a].seekPos,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.fd_write=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_write",{fd:a,iovs:b,iovsLength:c,nwritten:d});let e=!1;const f=this.getMemory();this.fd[a].buffers=this.fd[a].buffers||[];this.fd[a].seekPos===goog.global.BigInt(0)&&0<this.fd[a].buffers.length&&(e=!0);let g=0;for(let l=0;l<c;l++){var h=b+8*l,k=f.getUint32(h,!0);h=f.getUint32(h+4,!0);g+=h;k=new Uint8Array(f.buffer,k,h);e?this.fd[a].buffers.unshift(k.slice(0,h)):this.fd[a].buffers.push(k.slice(0,\nh))}this.fd[a].seekPos+=goog.global.BigInt(g);f.setUint32(d,g,!0);[1,2].includes(a)&&console.log(decoder$$module$src$utils$text_encoders.decode(concatUint8Arrays$$module$src$filesystem$wasi(this.fd[a].buffers)));return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_create_directory=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_create_directory",a,b,c,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_filestat_get=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_filestat_get",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_filestat_set_times=function(a,b,c,d,e,f,g){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_filestat_set_times",a,b,c,d,e,f,g,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_link=function(a,b,c,d,e,f,g){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_link",a,b,c,d,e,f,g,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_open=function(a,b,c,d,e,f,g,h,k){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_open",a,b,c,d,e,f,g,h,k,arguments);const l=this.getMemory();var n=(this.fd[a]||{path:"/"}).path,m=new Uint8Array(l.buffer,c,d);m=decoder$$module$src$utils$text_encoders.decode(m);const p=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(goog.string.path.join(3===a?"":n,m)));DEBUG_WASI$$module$src$filesystem$wasi&&console.log(";; opening path",\np,"withREader",shouldOpenReader$$module$src$filesystem$wasi(f));if(p.startsWith("/..")||"/._"===p||"/.AppleDouble"===p)return WASI_EBADF$$module$src$filesystem$constants;(n=Object.values(this.fd).find(q=>q.path===p&&Array.isArray(q.buffers)))?m=n.fd:(m=this.fd.length,this.fd[m]={fd:m});this.fd[m]={...this.fd[m],path:p,type:"file",seekPos:goog.global.BigInt(0),buffers:n?this.fd[m].buffers:[]};shouldOpenReader$$module$src$filesystem$wasi(f)&&DEBUG_WASI$$module$src$filesystem$wasi&&console.log("should open a read handle for",\np);l.setUint32(k,m,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_readlink=function(a,b,c,d,e,f){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_readlink",a,b,c,d,e,f,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_remove_directory=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_remove_directory",a,b,c);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_rename=function(a,b,c,d,e,f){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_rename",a,b,c,d,e,f,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_symlink=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_symlink",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.path_unlink_file=function(a,b,c){3<a&&DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_unlink_file",a,b,c,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.poll_oneoff=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("poll_oneoff",a,b,c,d,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.proc_exit=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("proc_exit",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.proc_raise=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("proc_raise",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.random_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("random_get",a,b);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.sched_yield=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sched_yield",arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.sock_recv=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sock_recv",arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.sock_send=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sock_send",arguments);return WASI_ENOSYS$$module$src$filesystem$constants};\nWASI$$module$src$filesystem$wasi.prototype.sock_shutdown=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sock_shutdown",arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.findBuffers=function(a){const b=Object.values(this.fd).find(({path:c})=>c===a);return b&&b.buffers};\nWASI$$module$src$filesystem$wasi.prototype.readdir=function(a){const b=(assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a))+"/").replace("//","/"),c=[];Object.values(this.fd).forEach(({path:d})=>!/\\//g.test(d.replace(b,""))&&c.push(d));return c.map(d=>removeLeadingSlash$$module$src$filesystem$wasi(d.replace(b,""))).filter(d=>!!d)};\nWASI$$module$src$filesystem$wasi.prototype.writeFile=function(a,b){const c=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));a=Object.keys(this.fd).length;const d=Object.values(this.fd).find(({path:e})=>e===c);this.fd[a]={fd:a,path:c,seekPos:goog.global.BigInt(0),buffers:[b]};d&&delete this.fd[d]};\nWASI$$module$src$filesystem$wasi.prototype.appendFile=function(a,b){var c=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));(c=this.findBuffers(c))?c.push(b):console.error(`Can\'t append to non-existing file ${a}`)};WASI$$module$src$filesystem$wasi.prototype.readFile=function(a){a=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));if(a=this.findBuffers(a))return concatUint8Arrays$$module$src$filesystem$wasi(a)};\nWASI$$module$src$filesystem$wasi.prototype.readStdOut=function(){const a=Object.values(this.fd[0]);return concatUint8Arrays$$module$src$filesystem$wasi(a&&a.buffers||[])};WASI$$module$src$filesystem$wasi.prototype.unlink=function(a){const b=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));(a=Object.values(this.fd).find(({path:c})=>c===b))?delete this.fd[a]:console.error(`While trying to unlink ${b}, path not found`)};\nWASI$$module$src$filesystem$wasi.prototype.mkdir=function(a){const b=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a)),c=[];Object.values(this.fd).forEach(({path:d})=>d.startsWith(b)&&c.push(d));0<c.length?console.warn(`mkdir: path ${a} already exists`):(a=Object.keys(this.fd).length,this.fd[a]={fd:a,path:b})};var module$src$filesystem$wasi={};module$src$filesystem$wasi.WASI=WASI$$module$src$filesystem$wasi;function clearArray$$module$src$utils$clear_array(a){for(;0<a.length;)a.pop()}var module$src$utils$clear_array={};module$src$utils$clear_array.clearArray=clearArray$$module$src$utils$clear_array;var module$node_modules$lines_logger$lib$index={default:{}};module$node_modules$lines_logger$lib$index.default.__esModule=!0;module$node_modules$lines_logger$lib$index.default.LoggerFactory=module$node_modules$lines_logger$lib$index.default.logLevels=void 0;module$node_modules$lines_logger$lib$index.default.logLevels={log_raise_error:1,log_with_warnings:2,trace:3,debug:4,info:5,warn:6,error:7,disable:8};\nvar LoggerFactory$$module$node_modules$lines_logger$lib$index=function(){function a(b,c){if(void 0===b&&(b="log_with_warnings"),void 0===c&&(c=null),this.logLevel=b,!module$node_modules$lines_logger$lib$index.default.logLevels[b])throw Error("Invalid log level "+b+" allowed: "+JSON.stringify(module$node_modules$lines_logger$lib$index.default.logLevels));this.mockConsole=c||console}return a.prototype.dummy=function(){},a.prototype.setLogWarnings=function(b){this.logLevel=b},a.prototype.getLogWarnings=\nfunction(){return this.logLevel},a.prototype.getSingleLoggerColor=function(b,c,d){return this.getSingleLoggerStyle(b,this.getColorStyle(c),d)},a.prototype.getSingleLogger=function(b,c){var d=this.getRandomColor(b);return this.getSingleLoggerStyle(b,this.getColorStyle(d),c)},a.prototype.getSingleLoggerStyle=function(b,c,d,e){var f=this;return void 0===e&&(e="log_with_warnings"),function(){for(var g=[],h=0;h<arguments.length;h++)g[h]=arguments[h];if(module$node_modules$lines_logger$lib$index.default.logLevels[f.logLevel]>\nmodule$node_modules$lines_logger$lib$index.default.logLevels[e])return f.dummy;g=Array.prototype.slice.call(g);h=g.shift().split("{}");for(var k=[f.mockConsole,"%c"+b,c],l=0;l<h.length;l++)k.push(h[l]),void 0!==g[l]&&k.push(g[l]);if(h.length-1!==g.length)if("log_with_warnings"===f.logLevel)f.mockConsole.error("MissMatch amount of arguments");else if("log_raise_error"===f.logLevel)throw Error("MissMatch amount of arguments");return Function.prototype.bind.apply(d,k)}},a.prototype.getLoggerColor=function(b,\nc){return this.getLoggerStyle(b,this.getColorStyle(c))},a.prototype.getColorStyle=function(b){return"color: white; background-color: "+b+"; padding: 2px 6px; border-radius: 2px; font-size: 10px"},a.getHash=function(b,c){void 0===c&&(c=0);var d=3735928559^c;c^=1103547991;for(var e=0,f;e<b.length;e++)f=b.charCodeAt(e),d=Math.imul(d^f,2654435761),c=Math.imul(c^f,1597334677);return d=Math.imul(d^d>>>16,2246822507)^Math.imul(c^c>>>13,3266489909),4294967296*(2097151&(Math.imul(c^c>>>16,2246822507)^Math.imul(d^\nd>>>13,3266489909)))+(d>>>0)},a.prototype.getRandomColor=function(b){void 0===b&&(b="");b=a.getHash(b);for(var c="#",d=0;3>d;d++)c+=("00"+(8+(b>>7*d&127)).toString(16)).substr(-2);return c},a.prototype.getLogger=function(b){return this.getLoggerColor(b,this.getRandomColor(b))},a.prototype.getLoggerStyle=function(b,c){return{trace:this.getSingleLoggerStyle(b,c,this.mockConsole.trace,"trace"),debug:this.getSingleLoggerStyle(b,c,this.mockConsole.debug,"debug"),log:this.getSingleLoggerStyle(b,c,this.mockConsole.log,\n"info"),warn:this.getSingleLoggerStyle(b,c,this.mockConsole.warn,"warn"),error:this.getSingleLoggerStyle(b,c,this.mockConsole.error,"error")}},a}();module$node_modules$lines_logger$lib$index.default.LoggerFactory=LoggerFactory$$module$node_modules$lines_logger$lib$index;let logWorkletMain$$module$src$logger,logWorkletWorker$$module$src$logger,logSABMain$$module$src$logger,logSABWorker$$module$src$logger,logVANMain$$module$src$logger,logVANWorker$$module$src$logger,logOldSpnMain$$module$src$logger,logOldSpnWorker$$module$src$logger,logIndex$$module$src$logger,logSPNMainSingle$$module$src$logger,logSinglethreadWorkletMain$$module$src$logger,logSinglethreadWorkletWorker$$module$src$logger,logCommonUtils$$module$src$logger,logWasmModule$$module$src$logger,logMidiRequest$$module$src$logger;\nconst isProd$$module$src$logger=1;logWorkletMain$$module$src$logger=a=>b=>{};logWorkletWorker$$module$src$logger=a=>b=>{};logSABMain$$module$src$logger=a=>b=>{};logSABWorker$$module$src$logger=a=>b=>{};logVANMain$$module$src$logger=a=>b=>{};logVANWorker$$module$src$logger=a=>b=>{};logOldSpnMain$$module$src$logger=a=>b=>{};logOldSpnWorker$$module$src$logger=a=>b=>{};logIndex$$module$src$logger=a=>b=>{};logSPNMainSingle$$module$src$logger=a=>b=>{};\nlogSinglethreadWorkletMain$$module$src$logger=a=>b=>{};logSinglethreadWorkletWorker$$module$src$logger=a=>b=>{};logCommonUtils$$module$src$logger=a=>b=>{};logWasmModule$$module$src$logger=a=>b=>{};logMidiRequest$$module$src$logger=a=>b=>{};var $jscompDefaultExport$$module$src$logger=a=>b=>{},module$src$logger={};module$src$logger.default=$jscompDefaultExport$$module$src$logger;module$src$logger.logCommonUtils=logCommonUtils$$module$src$logger;module$src$logger.logIndex=logIndex$$module$src$logger;\nmodule$src$logger.logMidiRequest=logMidiRequest$$module$src$logger;module$src$logger.logOldSpnMain=logOldSpnMain$$module$src$logger;module$src$logger.logOldSpnWorker=logOldSpnWorker$$module$src$logger;module$src$logger.logSABMain=logSABMain$$module$src$logger;module$src$logger.logSABWorker=logSABWorker$$module$src$logger;module$src$logger.logSPNMainSingle=logSPNMainSingle$$module$src$logger;module$src$logger.logSinglethreadWorkletMain=logSinglethreadWorkletMain$$module$src$logger;\nmodule$src$logger.logSinglethreadWorkletWorker=logSinglethreadWorkletWorker$$module$src$logger;module$src$logger.logVANMain=logVANMain$$module$src$logger;module$src$logger.logVANWorker=logVANWorker$$module$src$logger;module$src$logger.logWasmModule=logWasmModule$$module$src$logger;module$src$logger.logWorkletMain=logWorkletMain$$module$src$logger;module$src$logger.logWorkletWorker=logWorkletWorker$$module$src$logger;const CompressionMethod$$module$src$zlib$zlib={DEFLATE:8,RESERVED:15};var module$src$zlib$zlib={};module$src$zlib$zlib.CompressionMethod=CompressionMethod$$module$src$zlib$zlib;/*\n zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */\nfunction Huffman$$module$src$zlib$huffman(a){const b=a.length;let c=0,d=Number.POSITIVE_INFINITY,e,f,g,h;let k,l;for(k=0;k<b;++k)a[k]>c&&(c=a[k]),a[k]<d&&(d=a[k]);const n=1<<c,m=new Uint32Array(n);e=1;f=0;for(g=2;e<=c;){for(k=0;k<b;++k)if(a[k]===e){h=0;var p=f;for(l=0;l<e;++l)h=h<<1|p&1,p>>=1;p=e<<16|k;for(l=h;l<n;l+=g)m[l]=p;++f}++e;f<<=1;g<<=1}return[m,c,d]}var module$src$zlib$huffman={};module$src$zlib$huffman.Huffman=Huffman$$module$src$zlib$huffman;const ZLIB_RAW_INFLATE_BUFFER_SIZE$$module$src$zlib$rawinflate=32768;\nfunction RawInflate$$module$src$zlib$rawinflate(a,b){this.blocks=[];this.bufferSize=ZLIB_RAW_INFLATE_BUFFER_SIZE$$module$src$zlib$rawinflate;this.bitsbuflen=this.bitsbuf=this.ip=this.totalpos=0;this.input=new Uint8Array(a);this.bfinal=!1;this.bufferType=RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE;this.resize=!1;if(b||!(b={}))b.index&&(this.ip=b.index),b.bufferSize&&(this.bufferSize=b.bufferSize),b.bufferType&&(this.bufferType=b.bufferType),b.resize&&(this.resize=b.resize);switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:this.op=\nRawInflate$$module$src$zlib$rawinflate.MaxBackwardLength;this.output=new Uint8Array(RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength+this.bufferSize+RawInflate$$module$src$zlib$rawinflate.MaxCopyLength);break;case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:this.op=0;this.output=new Uint8Array(this.bufferSize);break;default:throw Error("invalid inflate mode");}}RawInflate$$module$src$zlib$rawinflate.BufferType={BLOCK:0,ADAPTIVE:1};\nRawInflate$$module$src$zlib$rawinflate.prototype.decompress=function(){for(;!this.bfinal;)this.parseBlock();switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:return this.concatBufferBlock();case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:return this.concatBufferDynamic();default:throw Error("invalid inflate mode");}};RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength=32768;RawInflate$$module$src$zlib$rawinflate.MaxCopyLength=258;\nRawInflate$$module$src$zlib$rawinflate.Order=function(a){return new Uint16Array(a)}([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);RawInflate$$module$src$zlib$rawinflate.LengthCodeTable=function(a){return new Uint16Array(a)}([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258]);RawInflate$$module$src$zlib$rawinflate.LengthExtraTable=function(a){return new Uint8Array(a)}([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0]);\nRawInflate$$module$src$zlib$rawinflate.DistCodeTable=function(a){return new Uint16Array(a)}([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]);RawInflate$$module$src$zlib$rawinflate.DistExtraTable=function(a){return new Uint8Array(a)}([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\nRawInflate$$module$src$zlib$rawinflate.FixedLiteralLengthTable=function(a){return a}(function(){const a=new Uint8Array(288);let b,c;b=0;for(c=a.length;b<c;++b)a[b]=143>=b?8:255>=b?9:279>=b?7:8;return Huffman$$module$src$zlib$huffman(a)}());RawInflate$$module$src$zlib$rawinflate.FixedDistanceTable=function(a){return a}(function(){const a=new Uint8Array(30);let b,c;b=0;for(c=a.length;b<c;++b)a[b]=5;return Huffman$$module$src$zlib$huffman(a)}());\nRawInflate$$module$src$zlib$rawinflate.prototype.parseBlock=function(){let a=this.readBits(3);a&1&&(this.bfinal=!0);a>>>=1;switch(a){case 0:this.parseUncompressedBlock();break;case 1:this.parseFixedHuffmanBlock();break;case 2:this.parseDynamicHuffmanBlock();break;default:throw Error("unknown BTYPE: "+a);}};\nRawInflate$$module$src$zlib$rawinflate.prototype.readBits=function(a){let b=this.bitsbuf,c=this.bitsbuflen;const d=this.input;let e=this.ip;if(e+(a-c+7>>3)>=d.length)throw Error("input buffer is broken");for(;c<a;)b|=d[e++]<<c,c+=8;this.bitsbuf=b>>>a;this.bitsbuflen=c-a;this.ip=e;return b&(1<<a)-1};\nRawInflate$$module$src$zlib$rawinflate.prototype.readCodeByTable=function(a){let b=this.bitsbuf,c=this.bitsbuflen;var d=this.input;let e=this.ip;var f=d.length;const g=a[0];for(a=a[1];c<a&&!(e>=f);)b|=d[e++]<<c,c+=8;d=g[b&(1<<a)-1];f=d>>>16;if(f>c)throw Error("invalid code length: "+f);this.bitsbuf=b>>f;this.bitsbuflen=c-f;this.ip=e;return d&65535};\nRawInflate$$module$src$zlib$rawinflate.prototype.parseUncompressedBlock=function(){const a=this.input;let b=this.ip,c=this.output,d=this.op;var e=a.length;let f;const g=c.length;this.bitsbuflen=this.bitsbuf=0;if(b+1>=e)throw Error("invalid uncompressed block header: LEN");f=a[b++]|a[b++]<<8;if(b+1>=e)throw Error("invalid uncompressed block header: NLEN");e=a[b++]|a[b++]<<8;if(f===~e)throw Error("invalid uncompressed block header: length verify");if(b+f>a.length)throw Error("input buffer is broken");\nswitch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:for(;d+f>c.length;)e=g-d,f-=e,c.set(a.subarray(b,b+e),d),d+=e,b+=e,this.op=d,c=this.expandBufferBlock(),d=this.op;break;case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:for(;d+f>c.length;)c=this.expandBufferAdaptive({fixRatio:2});break;default:throw Error("invalid inflate mode");}c.set(a.subarray(b,b+f),d);this.ip=b+f;this.op=d+f;this.output=c};\nRawInflate$$module$src$zlib$rawinflate.prototype.parseFixedHuffmanBlock=function(){switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(RawInflate$$module$src$zlib$rawinflate.FixedLiteralLengthTable,RawInflate$$module$src$zlib$rawinflate.FixedDistanceTable);break;case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:this.decodeHuffmanBlock(RawInflate$$module$src$zlib$rawinflate.FixedLiteralLengthTable,RawInflate$$module$src$zlib$rawinflate.FixedDistanceTable);\nbreak;default:throw Error("invalid inflate mode");}};\nRawInflate$$module$src$zlib$rawinflate.prototype.parseDynamicHuffmanBlock=function(){var a=this.readBits(5)+257,b=this.readBits(5)+1,c=this.readBits(4)+4,d=new Uint8Array(RawInflate$$module$src$zlib$rawinflate.Order.length);let e;for(e=0;e<c;++e)d[RawInflate$$module$src$zlib$rawinflate.Order[e]]=this.readBits(3);d=Huffman$$module$src$zlib$huffman(d);c=new Uint8Array(a+b);e=0;for(b=a+b;e<b;){var f=this.readCodeByTable(d);switch(f){case 16:for(f=3+this.readBits(2);f--;)c[e++]=g;break;case 17:for(f=\n3+this.readBits(3);f--;)c[e++]=0;var g=0;break;case 18:for(f=11+this.readBits(7);f--;)c[e++]=0;g=0;break;default:g=c[e++]=f}}g=Huffman$$module$src$zlib$huffman(c.subarray(0,a));a=Huffman$$module$src$zlib$huffman(c.subarray(a));switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(g,a);break;case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:this.decodeHuffmanBlock(g,a);break;default:throw Error("invalid inflate mode");}};\nRawInflate$$module$src$zlib$rawinflate.prototype.decodeHuffmanBlock=function(a,b){let c=this.output,d=this.op;this.currentLitlenTable=a;const e=c.length-RawInflate$$module$src$zlib$rawinflate.MaxCopyLength;var f;let g,h;const k=RawInflate$$module$src$zlib$rawinflate.LengthCodeTable,l=RawInflate$$module$src$zlib$rawinflate.LengthExtraTable,n=RawInflate$$module$src$zlib$rawinflate.DistCodeTable,m=RawInflate$$module$src$zlib$rawinflate.DistExtraTable;for(;256!==(f=this.readCodeByTable(a));)if(256>f)d>=\ne&&(this.op=d,c=this.expandBufferBlock(),d=this.op),c[d++]=f;else for(f-=257,h=k[f],0<l[f]&&(h+=this.readBits(l[f])),f=this.readCodeByTable(b),g=n[f],0<m[f]&&(g+=this.readBits(m[f])),d>=e&&(this.op=d,c=this.expandBufferBlock(),d=this.op);h--;)c[d]=c[d++-g];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=d};\nRawInflate$$module$src$zlib$rawinflate.prototype.decodeHuffmanAdaptive=function(a,b){let c=this.output,d=this.op;this.currentLitlenTable=a;let e=c.length;var f;let g,h;const k=RawInflate$$module$src$zlib$rawinflate.LengthCodeTable,l=RawInflate$$module$src$zlib$rawinflate.LengthExtraTable,n=RawInflate$$module$src$zlib$rawinflate.DistCodeTable,m=RawInflate$$module$src$zlib$rawinflate.DistExtraTable;for(;256!==(f=this.readCodeByTable(a));)if(256>f)d>=e&&(c=this.expandBufferAdaptive(),e=c.length),c[d++]=\nf;else for(f-=257,h=k[f],0<l[f]&&(h+=this.readBits(l[f])),f=this.readCodeByTable(b),g=n[f],0<m[f]&&(g+=this.readBits(m[f])),d+h>e&&(c=this.expandBufferAdaptive(),e=c.length);h--;)c[d]=c[d++-g];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=d};\nRawInflate$$module$src$zlib$rawinflate.prototype.expandBufferBlock=function(a){a=new Uint8Array(this.op-RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength);const b=this.op-RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength,c=this.output;a.set(c.subarray(RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength,a.length));this.blocks.push(a);this.totalpos+=a.length;c.set(c.subarray(b,b+RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength));this.op=RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength;\nreturn c};RawInflate$$module$src$zlib$rawinflate.prototype.expandBufferAdaptive=function(a){let b=Math.trunc(this.input.length/this.ip+1);const c=this.input,d=this.output;a&&("number"===typeof a.fixRatio&&(b=a.fixRatio),"number"===typeof a.addRatio&&(b+=a.addRatio));2>b?(a=(c.length-this.ip)/this.currentLitlenTable[2],a=Math.trunc(a/2*258),a=a<d.length?d.length+a:d.length<<1):a=d.length*b;a=new Uint8Array(a);a.set(d);return this.output=a};\nRawInflate$$module$src$zlib$rawinflate.prototype.concatBufferBlock=function(){let a=0;const b=this.output,c=this.blocks;let d;const e=new Uint8Array(this.totalpos+(this.op-RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength));let f,g,h,k;if(0===c.length)return this.output.subarray(RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength,this.op);f=0;for(g=c.length;f<g;++f)for(d=c[f],h=0,k=d.length;h<k;++h)e[a++]=d[h];f=RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength;for(g=this.op;f<\ng;++f)e[a++]=b[f];this.blocks=[];return this.buffer=e};RawInflate$$module$src$zlib$rawinflate.prototype.concatBufferDynamic=function(){let a;const b=this.op;this.resize?(a=new Uint8Array(b),a.set(this.output.subarray(0,b))):a=this.output.subarray(0,b);return this.buffer=a};var module$src$zlib$rawinflate={};module$src$zlib$rawinflate.RawInflate=RawInflate$$module$src$zlib$rawinflate;function Util$$module$src$zlib$util(){}Util$$module$src$zlib$util.stringToByteArray=function(a){a=[...a];let b,c;b=0;for(c=a.length;b<c;b++)a[b]=(a[b].charPointAt(0)&255)>>>0;return new Uint8Array([a])};var module$src$zlib$util={};module$src$zlib$util.Util=Util$$module$src$zlib$util;function Adler32$$module$src$zlib$adler32(a){"string"===typeof a&&(a=Util$$module$src$zlib$util.stringToByteArray(a));return Adler32$$module$src$zlib$adler32.update(1,a)}Adler32$$module$src$zlib$adler32.update=function(a,b){let c=a&65535;a=a>>>16&65535;let d=b.length,e,f=0;for(;0<d;){e=d>Adler32$$module$src$zlib$adler32.OptimizationParameter?Adler32$$module$src$zlib$adler32.OptimizationParameter:d;d-=e;do c+=b[f++],a+=c;while(--e);c%=65521;a%=65521}return(a<<16|c)>>>0};\nAdler32$$module$src$zlib$adler32.OptimizationParameter=1024;var module$src$zlib$adler32={};module$src$zlib$adler32.Adler32=Adler32$$module$src$zlib$adler32;function Inflate$$module$src$zlib$inflate(a,b){this.input=a;this.ip=0;if(b||!(b={}))b.index&&(this.ip=b.index),b.verify&&(this.verify=b.verify);const c=a[this.ip++],d=a[this.ip++];switch(c&15){case CompressionMethod$$module$src$zlib$zlib.DEFLATE:this.method=CompressionMethod$$module$src$zlib$zlib.DEFLATE;break;default:throw Error("unsupported compression method");}if(0!==((c<<8)+d)%31)throw Error("invalid fcheck flag:"+((c<<8)+d)%31);if(d&32)throw Error("fdict flag is not supported");this.rawinflate=\nnew RawInflate$$module$src$zlib$rawinflate(a,{index:this.ip,bufferSize:b.bufferSize,bufferType:b.bufferType,resize:b.resize})}Inflate$$module$src$zlib$inflate.BufferType=RawInflate$$module$src$zlib$rawinflate.BufferType;\nInflate$$module$src$zlib$inflate.prototype.decompress=function(){var a=this.input;const b=this.rawinflate.decompress();this.ip=this.rawinflate.ip;if(this.verify&&(a=(a[this.ip++]<<24|a[this.ip++]<<16|a[this.ip++]<<8|a[this.ip++])>>>0,a!==Adler32$$module$src$zlib$adler32(b)))throw Error("invalid adler-32 checksum");return b};var module$src$zlib$inflate={};module$src$zlib$inflate.Inflate=Inflate$$module$src$zlib$inflate;const PAGE_SIZE$$module$src$module=65536,PAGES_PER_MB$$module$src$module=16,csoundWasiJsMessageCallback$$module$src$module=({memory:a,messagePort:b,streamBuffer:c})=>function(d,e,f,g){if(a){d=new Uint8Array(a.buffer,g,f);d=uint2String$$module$src$utils$text_encoders(d);var h=/\\n$/g.test(d);e=/^\\n/g.test(d);var k=d.split("\\n").filter(n=>0<n.length),l=[];if(0===k.length&&h||e)l.push(c.join("")),clearArray$$module$src$utils$clear_array(c);k.forEach((n,m)=>{m+1===k.length?h?0===m?(l.push(c.join("")+n),\nclearArray$$module$src$utils$clear_array(c)):l.push(n):c.push(n):0===m?(l.push(c.join("")+n),clearArray$$module$src$utils$clear_array(c)):l.push(n)});l.forEach(n=>{n.replace(/(\\r\\n|\\n|\\r)/gm,"")&&b.post({log:n})})}},assertPluginExports$$module$src$module=a=>{if(a&&"object"===typeof a&&"object"===typeof a.exports){if(a.exports.__wasm_call_ctors){if(a.exports.csoundModuleCreate||a.exports.csound_opcode_init||a.exports.csound_fgen_init)return!0;console.error(a.exports,"A csound plugin turns out to be neither a plugin, opcode or module.\\nPerhaps csdl.h or module.h wasn\'t imported correctly?");\nreturn!1}console.error("A csound plugin didn\'t export __wasm_call_ctors.\\nPlease re-run wasm-ld with either --export-all or include --export=__wasm_call_ctors");return!1}console.error("Error instantiating a csound plugin, instance and/or export is missing!");return!1},getBinaryHeaderData$$module$src$module=a=>{function b(){let l=0,n=1;for(;;){const m=a[c++];l+=(m&127)*n;n*=128;if(!(m&128))break}return l}1836278016!==(new Uint32Array((new Uint8Array(a.subarray(0,24))).buffer))[0]&&console.error("Wasm magic number is missing!");\nif(0!==a[8])return logWasmModule$$module$src$logger("Dylink section wasn\'t found in wasm binary, assuming static wasm."),"static";let c=9;const d=b();c++;(0,goog.asserts.assert)(a[c]==="d".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="y".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="l".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="i".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="n".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="k".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]===\n".".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="0".codePointAt(0));c+=3;const e=b(),f=b(),g=b(),h=b(),k=b();return{sectionSize:d,memorySize:e,memoryAlign:f,neededDynlibsCount:k,tableSize:g,tableAlign:h}},loadStaticWasm$$module$src$module=async({wasmBytes:a,wasi:b,messagePort:c})=>{const d=await WebAssembly.compile(a);a=new WebAssembly.Memory({initial:16384});const e=b.getImports(d);e.env=e.env||{};e.env.csoundLoadModules=()=>0;e.env.memory=a;e.env.csoundWasiJsMessageCallback=csoundWasiJsMessageCallback$$module$src$module({memory:e.env.memory,\nstreamBuffer:[],messagePort:c});c=await WebAssembly.instantiate(d,e);b.setMemory(a);b.start(c);c.exports.__wasi_js_csoundSetMessageStringCallback();return[c,b]};\nvar $jscompDefaultExport$$module$src$module=async function({wasmDataURI:a,withPlugins:b=[],messagePort:c}){var d={};const e=new WASI$$module$src$filesystem$wasi({preopens:{"/":"/"}});a=new Uint8Array(a);a=(new Inflate$$module$src$zlib$inflate(a)).decompress();var f=getBinaryHeaderData$$module$src$module(a);if("static"===f)return await loadStaticWasm$$module$src$module({messagePort:c,wasmBytes:a,wasmFs:d,wasi:e});const {memorySize:g,memoryAlign:h,tableSize:k}=f;b=await b.reduce(async(u,z)=>{u=await u;\nlet C,A;try{C=new Uint8Array(z),A=getBinaryHeaderData$$module$src$module(C)}catch(G){console.error("Error in plugin",G)}A&&u.push({headerData:A,wasmPluginBytes:C});return u},[]);var l=128*PAGES_PER_MB$$module$src$module;d=Math.ceil((g+h)/PAGE_SIZE$$module$src$module);f=Math.ceil(b.reduce((u,{headerData:z})=>"static"===z?0:u+(z.memorySize+h),0)/PAGE_SIZE$$module$src$module);f=d+f+l;const n=new WebAssembly.Memory({initial:f,maximum:1024*PAGES_PER_MB$$module$src$module}),m=new WebAssembly.Table({initial:k+\n1,element:"anyfunc"});e.setMemory(n);const p=new WebAssembly.Global({value:"i32",mutable:!0},f*PAGE_SIZE$$module$src$module);f=new WebAssembly.Global({value:"i32",mutable:!0},f*PAGE_SIZE$$module$src$module);l=new WebAssembly.Global({value:"i32",mutable:!1},l);const q=new WebAssembly.Global({value:"i32",mutable:!1},1),B=new WebAssembly.Global({value:"i32",mutable:!0},0);a=await WebAssembly.compile(a);const r=e.getImports(a);let v=[],D=d;r.env=r.env||{};r.env.memory=n;r.env.__indirect_function_table=\nm;r.env.__stack_pointer=p;r.env.__memory_base=l;r.env.__table_base=q;r.env.csoundLoadModules=u=>{v.forEach(z=>{void 0===y?console.error("csound-wasm internal: timing problem detected!"):dlinit$$module$src$dlinit(y,z,m,u)});return 0};r.env._ZTH5errno=function(){};r.env.csoundWasiJsMessageCallback=csoundWasiJsMessageCallback$$module$src$module({memory:n,messagePort:c,streamBuffer:[]});r.env.printDebugCallback=(u,z)=>{u=new Uint8Array(n.buffer,u,z);u=uint2String$$module$src$utils$text_encoders(u);console.log(u)};\nr["GOT.mem"]=r["GOT.mem"]||{};r["GOT.mem"].__heap_base=f;r["GOT.func"]=r["GOT.func"]||{};const y=await WebAssembly.instantiate(a,r);c=Object.assign({},y.exports);a={};a.exports=Object.assign(c,{memory:n});v=await b.reduce(async(u,{headerData:z,wasmPluginBytes:C})=>{u=await u;try{const {memorySize:A,memoryAlign:G,tableSize:F}=z,I=await WebAssembly.compile(C),t=e.getImports(I),E=new WebAssembly.Global({value:"i32",mutable:!1},D*PAGE_SIZE$$module$src$module);m.grow(F);t.env=Object.assign({},t.env);t.env.memory=\nn;t.env.__indirect_function_table=m;t.env.__memory_base=E;t.env.__stack_pointer=p;t.env.__table_base=q;t.env.csoundLoadModules=B;delete t.env.csoundWasiJsMessageCallback;D+=Math.ceil((A+G)/PAGE_SIZE$$module$src$module);const x=await WebAssembly.instantiate(I,t);assertPluginExports$$module$src$module(x)&&(x.exports.__wasm_call_ctors(),u.push(x))}catch(A){console.error("Error while compiling csound-plugin",A)}return u},[]);e.start(a);a.exports.__wasi_js_csoundSetMessageStringCallback();return[a,e]},\nmodule$src$module={};module$src$module.csoundWasiJsMessageCallback=csoundWasiJsMessageCallback$$module$src$module;module$src$module.default=$jscompDefaultExport$$module$src$module;const handleCsoundStart$$module$src$workers$common_utils=(a,b,c,d,e)=>f=>{const {csound:g}=f,h=1===b.csoundShouldDaemonize(g);h&&(b.csoundSetOption(g,"--daemon"),b.csoundSetOption(g,"-odac"));const k=b.csoundStart(g),l=b.csoundGetOutputName(g)||"test.wav";logCommonUtils$$module$src$logger(`handleCsoundStart: actual csoundStart result ${k}, outputName: ${l}`)();0!==k&&a.post(`error: csoundStart failed while trying to render ${l},`+" look out for errors in options and syntax");setTimeout(()=>{const n=\nb._isRequestingRtMidiInput(g);if(h||n||l.includes("dac"))d(f);else if(a.broadcastPlayState("renderStarted"),e)e(f);else for(;0===b.csoundPerformKsmps(g););},0);return k},instantiateAudioPacket$$module$src$workers$common_utils=(a,b)=>{const c=[];for(let d=0;d<a;d++)c.push(new Float64Array(b));return c},renderFunction$$module$src$workers$common_utils=({libraryCsound:a,workerMessagePort:b})=>async({csound:c})=>{const d=a.csoundGetKr(c);let e=0,f=0;for(;("renderStarted"===b.vanillaWorkerState||"renderStarted"===\nb.workerState)&&0===e;)e=a.csoundPerformKsmps(c),f+=1,"function"===typeof setTimeout&&0===e&&0===f%(2*d)&&await new Promise(g=>setTimeout(g,0));b.broadcastPlayState("renderEnded")};var module$src$workers$common_utils={};module$src$workers$common_utils.handleCsoundStart=handleCsoundStart$$module$src$workers$common_utils;module$src$workers$common_utils.instantiateAudioPacket=instantiateAudioPacket$$module$src$workers$common_utils;module$src$workers$common_utils.renderFunction=renderFunction$$module$src$workers$common_utils;const DEFAULT_BUFFER_LEN$$module$src$constants=128,MAX_CHANNELS$$module$src$constants=32,RING_BUFFER_SIZE$$module$src$constants=16384,MIDI_BUFFER_SIZE$$module$src$constants=1024,MIDI_BUFFER_PAYLOAD_SIZE$$module$src$constants=3,CALLBACK_DATA_BUFFER_SIZE$$module$src$constants=16384,initialSharedState$$module$src$constants=[0,4096,0,0,0,0,-1,-1,-1,-1,0,DEFAULT_BUFFER_LEN$$module$src$constants,0,0,0,0,0,0,0,0],AUDIO_STATE$$module$src$constants={CSOUND_LOCK:0,FRAMES_REQUESTED:1,IS_PERFORMING:2,IS_RENDERING:3,\nIS_PAUSED:4,STOP:5,SAMPLE_RATE:6,KSMPS:7,NCHNLS:8,NCHNLS_I:9,IS_REQUESTING_MIC:10,BUFFER_LEN:11,OUTPUT_READ_INDEX:12,OUTPUT_WRITE_INDEX:13,AVAIL_IN_BUFS:14,AVAIL_OUT_BUFS:15,IS_REQUESTING_RTMIDI:16,RTMIDI_INDEX:17,AVAIL_RTMIDI_EVENTS:18,HAS_PENDING_CALLBACKS:19},DATA_TYPE$$module$src$constants={NUMBER:0,STRING:1,FLOAT_32:2,FLOAT_64:3};var module$src$constants={};module$src$constants.AUDIO_STATE=AUDIO_STATE$$module$src$constants;module$src$constants.CALLBACK_DATA_BUFFER_SIZE=CALLBACK_DATA_BUFFER_SIZE$$module$src$constants;\nmodule$src$constants.DATA_TYPE=DATA_TYPE$$module$src$constants;module$src$constants.DEFAULT_BUFFER_LEN=DEFAULT_BUFFER_LEN$$module$src$constants;module$src$constants.MAX_CHANNELS=MAX_CHANNELS$$module$src$constants;module$src$constants.MIDI_BUFFER_PAYLOAD_SIZE=MIDI_BUFFER_PAYLOAD_SIZE$$module$src$constants;module$src$constants.MIDI_BUFFER_SIZE=MIDI_BUFFER_SIZE$$module$src$constants;module$src$constants.RING_BUFFER_SIZE=RING_BUFFER_SIZE$$module$src$constants;module$src$constants.initialSharedState=initialSharedState$$module$src$constants;let combined$$module$src$workers$sab_worker,pollPromise$$module$src$workers$sab_worker,unlockPromise$$module$src$workers$sab_worker;\nconst callUncloned$$module$src$workers$sab_worker=async(a,b)=>(a=combined$$module$src$workers$sab_worker.get(a))&&a.apply({},b||[]),sabCreateRealtimeAudioThread$$module$src$workers$sab_worker=({libraryCsound:a,callbacksRequest:b,releaseStop:c,releasePause:d,releaseResumed:e,wasm:f,workerMessagePort:g})=>async({audioStateBuffer:h,audioStreamIn:k,audioStreamOut:l,midiBuffer:n,csound:m})=>{const p=new Int32Array(h);initialSharedState$$module$src$constants.forEach((H,K)=>{Atomics.store(p,K,H)});h=a._isRequestingRtMidiInput(m);\nvar q=0===Atomics.load(p,AUDIO_STATE$$module$src$constants.NCHNLS_I)&&a.csoundGetInputName(m).includes("adc"),B=Atomics.load(p,AUDIO_STATE$$module$src$constants.NCHNLS),r=Atomics.load(p,AUDIO_STATE$$module$src$constants.NCHNLS_I),v=Atomics.load(p,AUDIO_STATE$$module$src$constants.SAMPLE_RATE);-1<B&&a.csoundSetOption(m,`--nchnls=${B}`);-1<r&&a.csoundSetOption(m,`--nchnls_i=${r}`);-1<v&&a.csoundSetOption(m,`--sr=${v}`);const D=a.csoundGetNchnls(m),y=r||q?a.csoundGetNchnlsInput(m):0,u=Atomics.load(p,\nAUDIO_STATE$$module$src$constants.SAMPLE_RATE)||a.csoundGetSr(m);Atomics.store(p,AUDIO_STATE$$module$src$constants.NCHNLS,D);Atomics.store(p,AUDIO_STATE$$module$src$constants.NCHNLS_I,y);Atomics.store(p,AUDIO_STATE$$module$src$constants.IS_REQUESTING_MIC,q?1:0);Atomics.store(p,AUDIO_STATE$$module$src$constants.SAMPLE_RATE,a.csoundGetSr(m));Atomics.store(p,AUDIO_STATE$$module$src$constants.IS_REQUESTING_RTMIDI,h);q=a.csoundGetKsmps(m);Atomics.store(p,AUDIO_STATE$$module$src$constants.KSMPS,q);const z=\na.csoundGet0dBFS(m);B=[];r=[];for(v=0;v<D;++v)B.push(new Float64Array(l,RING_BUFFER_SIZE$$module$src$constants*v,RING_BUFFER_SIZE$$module$src$constants));for(l=0;l<y;++l)r.push(new Float64Array(k,RING_BUFFER_SIZE$$module$src$constants*l,RING_BUFFER_SIZE$$module$src$constants));g.broadcastPlayState("realtimePerformanceStarted");Atomics.store(p,AUDIO_STATE$$module$src$constants.IS_PERFORMING,1);logSABWorker$$module$src$logger("Atomic.wait started (thread is now locked)\\n")();k=!0;let C=0,A=0,G=0,F=\n0,I;l=(H=!1)=>1===Atomics.load(p,AUDIO_STATE$$module$src$constants.STOP)||1!==Atomics.load(p,AUDIO_STATE$$module$src$constants.IS_PERFORMING)||0!==C||H?(0===C&&(logSABWorker$$module$src$logger("calling csoundStop and one performKsmps to trigger endof logs")(),a.csoundStop(m),a.csoundPerformKsmps(m)),logSABWorker$$module$src$logger("triggering realtimePerformanceEnded event")(),g.broadcastPlayState("realtimePerformanceEnded"),logSABWorker$$module$src$logger("End of realtimePerformance loop!")(),c(),\n!0):!1;for(v=!0;!v||(I=Atomics.wait(p,AUDIO_STATE$$module$src$constants.CSOUND_LOCK,1,1E4));){if("timed-out"===I){l(!0);break}k&&(k=!1,await new Promise(w=>{unlockPromise$$module$src$workers$sab_worker=w;g.broadcastSabUnlocked()}),logSABWorker$$module$src$logger("Atomic.wait unlocked, performance started")());1===Atomics.load(p,AUDIO_STATE$$module$src$constants.IS_PAUSED)&&(await new Promise(w=>setTimeout(w,0)),d(),await new Promise(w=>setTimeout(w,0)),Atomics.wait(p,AUDIO_STATE$$module$src$constants.IS_PAUSED,\n0),await new Promise(w=>setTimeout(w,0)),e(),await new Promise(w=>setTimeout(w,0)));if(l())break;if(h){var t=Atomics.load(p,AUDIO_STATE$$module$src$constants.AVAIL_RTMIDI_EVENTS);if(0<t){var E=Atomics.load(p,AUDIO_STATE$$module$src$constants.RTMIDI_INDEX),x=E;for(let w=0;w<t;w++){x=(E+MIDI_BUFFER_PAYLOAD_SIZE$$module$src$constants*w)%MIDI_BUFFER_SIZE$$module$src$constants;const J=Atomics.load(n,x),L=Atomics.load(n,x+1),M=Atomics.load(n,x+2);a.csoundPushMidiMessage(m,J,L,M)}Atomics.store(p,AUDIO_STATE$$module$src$constants.RTMIDI_INDEX,\n(x+1)%MIDI_BUFFER_SIZE$$module$src$constants);Atomics.sub(p,AUDIO_STATE$$module$src$constants.AVAIL_RTMIDI_EVENTS,t)}}const H=Atomics.load(p,AUDIO_STATE$$module$src$constants.BUFFER_LEN);t=Atomics.load(p,AUDIO_STATE$$module$src$constants.AVAIL_IN_BUFS)>=H;E=a.csoundGetSpin(m);x=a.csoundGetSpout(m);const K=t&&new Float64Array(f.wasi.memory.buffer,E,q*y),N=new Float64Array(f.wasi.memory.buffer,x,q*D);E=Atomics.load(p,AUDIO_STATE$$module$src$constants.FRAMES_REQUESTED);for(x=0;x<E;x++){if(0===A)if(0===\nC)C=a.csoundPerformKsmps(m),!v&&Atomics.add(p,AUDIO_STATE$$module$src$constants.AVAIL_OUT_BUFS,q),v=!1;else if(0!==C){Atomics.store(p,AUDIO_STATE$$module$src$constants.IS_PERFORMING,0);l(!0);return}B.forEach((w,J)=>{w[F]=(N[A*D+J]||0)/z});t&&(r.forEach((w,J)=>{K[A*y+J]=(w[G]||0)*z}),G=t&&(G+1)%RING_BUFFER_SIZE$$module$src$constants);F=(F+1)%RING_BUFFER_SIZE$$module$src$constants;A=(A+1)%q}t&&Atomics.sub(p,AUDIO_STATE$$module$src$constants.AVAIL_IN_BUFS,E);1===Atomics.compareExchange(p,AUDIO_STATE$$module$src$constants.HAS_PENDING_CALLBACKS,\n1,0)&&await new Promise(w=>{pollPromise$$module$src$workers$sab_worker=w;b()});if(l())break;t=Atomics.load(p,AUDIO_STATE$$module$src$constants.OUTPUT_READ_INDEX);t=Math.max(2048-(F<t?F+RING_BUFFER_SIZE$$module$src$constants-t:F-t),0);Atomics.store(p,AUDIO_STATE$$module$src$constants.FRAMES_REQUESTED,t);0===t&&await new Promise(w=>setTimeout(w,H/u*1E3))}},initMessagePort$$module$src$workers$sab_worker=({port:a})=>{const b=new $jscompDefaultExport$$module$src$utils$message_port_state;b.post=c=>a.postMessage({log:c});\nb.broadcastPlayState=c=>a.postMessage({playStateChange:c});b.broadcastSabUnlocked=()=>a.postMessage({sabWorker:"unlocked"});b.ready=!0;return b},initCallbackReplyPort$$module$src$workers$sab_worker=({port:a})=>{a.addEventListener("message",b=>{if(b.data&&b.data.unlock)b=unlockPromise$$module$src$workers$sab_worker,unlockPromise$$module$src$workers$sab_worker=void 0,b&&b();else{b=b.data;var c=b.reduce((d,{id:e,argumentz:f,apiKey:g})=>{try{const h=combined$$module$src$workers$sab_worker.get(g),k=h&&\nh.apply({},f||[]);d.push({id:e,answer:k})}catch(h){throw Error(h);}return d},[]);a.postMessage(c);c=pollPromise$$module$src$workers$sab_worker;pollPromise$$module$src$workers$sab_worker=void 0;c&&c(b)}});a.start()},renderFunction$$module$src$workers$sab_worker=({libraryCsound:a,callbacksRequest:b,releaseStop:c,releasePause:d,releaseResumed:e,workerMessagePort:f})=>async({audioStateBuffer:g,csound:h})=>{g=new Int32Array(g);Atomics.store(g,AUDIO_STATE$$module$src$constants.IS_RENDERING,1);for(f.broadcastSabUnlocked();1!==\nAtomics.load(g,AUDIO_STATE$$module$src$constants.STOP)&&0===a.csoundPerformKsmps(h);)1===Atomics.load(g,AUDIO_STATE$$module$src$constants.IS_PAUSED)&&(d(),Atomics.wait(g,AUDIO_STATE$$module$src$constants.IS_PAUSED,0),e()),1===Atomics.compareExchange(g,AUDIO_STATE$$module$src$constants.HAS_PENDING_CALLBACKS,1,0)&&await new Promise(k=>{pollPromise$$module$src$workers$sab_worker=k;b()});Atomics.store(g,AUDIO_STATE$$module$src$constants.IS_RENDERING,0);f.broadcastPlayState("renderEnded");c()},initialize$$module$src$workers$sab_worker=\nasync({wasmDataURI:a,withPlugins:b=[],messagePort:c,callbackPort:d})=>{logSABWorker$$module$src$logger("initializing SABWorker and WASM")();const e=initMessagePort$$module$src$workers$sab_worker({port:c}),f=()=>d.postMessage("poll"),g=()=>d.postMessage("releaseStop"),h=()=>d.postMessage("releasePause"),k=()=>d.postMessage("releaseResumed");initCallbackReplyPort$$module$src$workers$sab_worker({port:d});const [l,n]=await $jscompDefaultExport$$module$src$module({wasmDataURI:a,withPlugins:b,messagePort:e});\nl.wasi=n;const m=$jscompDefaultExport$$module$src$libcsound(l);a=pipe$$module$node_modules$rambda$dist$rambda_mjs(assoc$$module$node_modules$rambda$dist$rambda_mjs("csoundStart",(p,q)=>handleCsoundStart$$module$src$workers$common_utils(e,m,n,sabCreateRealtimeAudioThread$$module$src$workers$sab_worker({libraryCsound:m,callbacksRequest:f,wasm:l,workerMessagePort:e,releaseStop:g,releasePause:h,releaseResumed:k}),renderFunction$$module$src$workers$sab_worker({libraryCsound:m,callbacksRequest:f,workerMessagePort:e,\nwasi:n,releaseStop:g,releasePause:h,releaseResumed:k}))(q)),assoc$$module$node_modules$rambda$dist$rambda_mjs("wasm",l))(m);combined$$module$src$workers$sab_worker=new Map(Object.entries(a));m.csoundInitialize(0);return m.csoundCreate()},sabWorker$$module$src$workers$sab_worker={initialize:initialize$$module$src$workers$sab_worker,callUncloned:callUncloned$$module$src$workers$sab_worker};\nexpose$$module$node_modules$comlink$dist$esm$comlink_mjs({initialize:sabWorker$$module$src$workers$sab_worker.initialize,callUncloned:sabWorker$$module$src$workers$sab_worker.callUncloned});var module$src$workers$sab_worker={};module$src$workers$sab_worker.sabWorker=sabWorker$$module$src$workers$sab_worker;}).call(this);\n//# sourceMappingURL=__compiled.sab.worker.js.map\n'])),
module$dist$__compiled_sab_worker_inline={};module$dist$__compiled_sab_worker_inline.default=$jscompDefaultExport$$module$dist$__compiled_sab_worker_inline;class SharedArrayBufferMainThread$$module$src$mains$sab_main{constructor({audioContext:a,audioWorker:b,audioContextIsProvided:c,inputChannelCount:d,outputChannelCount:e}){this.hasSharedArrayBuffer=!0;this.ipcMessagePorts=new IPCMessagePorts$$module$src$mains$messages_main;this.eventPromises=new EventPromises$$module$src$utils$event_promises;this.publicEvents=new PublicEventAPI$$module$src$events(this);b.ipcMessagePorts=this.ipcMessagePorts;this.audioContextIsProvided=c;this.audioWorker=b;this.audioWorker.onPlayStateChange=
this.audioWorker.onPlayStateChange.bind(b);this.currentPlayState=this.csoundInstance=void 0;this.currentDerivedPlayState="stop";this.exportApi={};this.callbackId=0;this.callbackBuffer={};this.audioStateBuffer=new SharedArrayBuffer(initialSharedState$$module$src$constants.length*Int32Array.BYTES_PER_ELEMENT);this.audioStatePointer=new Int32Array(this.audioStateBuffer);c&&Atomics.store(this.audioStatePointer,AUDIO_STATE$$module$src$constants.SAMPLE_RATE,a.sampleRate);d&&Atomics.store(this.audioStatePointer,
AUDIO_STATE$$module$src$constants.NCHNLS_I,d);e&&Atomics.store(this.audioStatePointer,AUDIO_STATE$$module$src$constants.NCHNLS,e);this.audioStreamIn=new SharedArrayBuffer(MAX_CHANNELS$$module$src$constants*RING_BUFFER_SIZE$$module$src$constants*Float64Array.BYTES_PER_ELEMENT);this.audioStreamOut=new SharedArrayBuffer(MAX_CHANNELS$$module$src$constants*RING_BUFFER_SIZE$$module$src$constants*Float64Array.BYTES_PER_ELEMENT);this.midiBufferSAB=new SharedArrayBuffer(MIDI_BUFFER_SIZE$$module$src$constants*
MIDI_BUFFER_PAYLOAD_SIZE$$module$src$constants*Int32Array.BYTES_PER_ELEMENT);this.midiBuffer=new Int32Array(this.midiBufferSAB);this.onPlayStateChange=this.onPlayStateChange.bind(this);this.prepareRealtimePerformance=this.prepareRealtimePerformance.bind(this);logSABMain$$module$src$logger("SharedArrayBufferMainThread got constructed")()}async terminateInstance(){this.csoundWorker&&(this.csoundWorker.terminate(),delete this.csoundWorker);this.audioWorker&&this.audioWorker.terminateInstance&&(await this.audioWorker.terminateInstance(),
delete this.audioWorker.terminateInstance);this.proxyPort&&(this.proxyPort[releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs](),delete this.proxyPort);this.publicEvents&&this.publicEvents.terminateInstance();Object.keys(this.exportApi).forEach(a=>delete this.exportApi[a]);Object.keys(this).forEach(a=>delete this[a])}get api(){return this.exportApi}handleMidiInput({data:[a,b,c]}){var d=Atomics.load(this.audioStatePointer,AUDIO_STATE$$module$src$constants.AVAIL_RTMIDI_EVENTS);const e=Atomics.load(this.audioStatePointer,
AUDIO_STATE$$module$src$constants.RTMIDI_INDEX);d=(d*MIDI_BUFFER_PAYLOAD_SIZE$$module$src$constants+e)%MIDI_BUFFER_SIZE$$module$src$constants;Atomics.store(this.midiBuffer,d,a);Atomics.store(this.midiBuffer,d+1,b);Atomics.store(this.midiBuffer,d+2,c);Atomics.add(this.audioStatePointer,AUDIO_STATE$$module$src$constants.AVAIL_RTMIDI_EVENTS,1)}async csoundPause(){if(this.eventPromises.isWaiting("pause"))return-1;this.eventPromises.createPausePromise();Atomics.store(this.audioStatePointer,AUDIO_STATE$$module$src$constants.IS_PAUSED,
1);await this.eventPromises.waitForPause();this.onPlayStateChange("realtimePerformancePaused");return 0}async csoundResume(){1===Atomics.load(this.audioStatePointer,AUDIO_STATE$$module$src$constants.IS_PAUSED)&&1!==Atomics.load(this.audioStatePointer,AUDIO_STATE$$module$src$constants.STOP)&&1===Atomics.load(this.audioStatePointer,AUDIO_STATE$$module$src$constants.IS_PERFORMING)&&(Atomics.store(this.audioStatePointer,AUDIO_STATE$$module$src$constants.IS_PAUSED,0),Atomics.notify(this.audioStatePointer,
AUDIO_STATE$$module$src$constants.IS_PAUSED),this.onPlayStateChange("realtimePerformanceResumed"))}async onPlayStateChange(a){if(void 0===this)console.log("Failed to announce playstatechange",a);else if(this.currentPlayState=a,this.publicEvents&&a){switch(a){case "realtimePerformanceStarted":logSABMain$$module$src$logger("event: realtimePerformanceStarted received, proceeding to call prepareRealtimePerformance")();try{await this.prepareRealtimePerformance()}catch(b){console.error(b)}break;case "realtimePerformanceEnded":this.eventPromises.createStopPromise();
Object.values(this.callbackBuffer).forEach(({argumentz:b,apiKey:c,resolveCallback:d})=>this.proxyPort.callUncloned(c,b).then(d));this.callbackBuffer={};logSABMain$$module$src$logger("event: realtimePerformanceEnded received, beginning cleanup")();initialSharedState$$module$src$constants.forEach((b,c)=>{Atomics.store(this.audioStatePointer,c,b)});break;case "renderStarted":this.publicEvents.triggerRenderStarted(this);this.eventPromises.releaseStartPromise();break;case "renderEnded":logSABMain$$module$src$logger("event: renderEnded received, beginning cleanup")(),
this.publicEvents.triggerRenderEnded(this),this.eventPromises&&this.eventPromises.releaseStopPromise()}try{await this.audioWorker.onPlayStateChange(a)}catch(b){console.error(b)}}}async prepareRealtimePerformance(){logSABMain$$module$src$logger("prepareRealtimePerformance")();const a=Atomics.load(this.audioStatePointer,AUDIO_STATE$$module$src$constants.NCHNLS),b=Atomics.load(this.audioStatePointer,AUDIO_STATE$$module$src$constants.NCHNLS_I);this.audioWorker.isRequestingInput=Atomics.load(this.audioStatePointer,
AUDIO_STATE$$module$src$constants.IS_REQUESTING_MIC);this.audioWorker.isRequestingMidi=Atomics.load(this.audioStatePointer,AUDIO_STATE$$module$src$constants.IS_REQUESTING_RTMIDI);const c=Atomics.load(this.audioStatePointer,AUDIO_STATE$$module$src$constants.KSMPS),d=Atomics.load(this.audioStatePointer,AUDIO_STATE$$module$src$constants.SAMPLE_RATE);this.audioWorker.ksmps=c;this.audioWorker.sampleRate=d;this.audioWorker.inputCount=b;this.audioWorker.outputsCount=a}async initialize({wasmDataURI:a,withPlugins:b}){b&&
!isEmpty$$module$node_modules$rambda$dist$rambda_mjs(b)&&(b=await fetchPlugins$$module$src$utils(b));logSABMain$$module$src$logger("initialization: instantiate the SABWorker Thread")();const c=new Worker($jscompDefaultExport$$module$dist$__compiled_sab_worker_inline());this.csoundWorker=c;const d=this.audioStateBuffer,e=this.audioStatePointer,f=this.audioStreamIn,g=this.audioStreamOut,h=this.midiBuffer;logSABMain$$module$src$logger("providing the audioWorker a pointer to SABMain's instance")();this.audioWorker.csoundWorkerMain=
this;logSABMain$$module$src$logger("adding message eventListeners for mainMessagePort and mainMessagePortAudio")();this.ipcMessagePorts.mainMessagePort.addEventListener("message",messageEventHandler$$module$src$mains$messages_main(this));this.ipcMessagePorts.mainMessagePort.start();this.ipcMessagePorts.mainMessagePortAudio.addEventListener("message",messageEventHandler$$module$src$mains$messages_main(this));this.ipcMessagePorts.mainMessagePortAudio.start();logSABMain$$module$src$logger("(postMessage) making a message channel from SABMain to SABWorker via workerMessagePort")();
this.ipcMessagePorts.sabMainCallbackReply.addEventListener("message",n=>{switch(n.data){case "poll":this.ipcMessagePorts&&this.ipcMessagePorts.sabMainCallbackReply.postMessage(Object.keys(this.callbackBuffer).map(l=>({id:l,apiKey:this.callbackBuffer[l].apiKey,argumentz:this.callbackBuffer[l].argumentz})));break;case "releaseStop":this.onPlayStateChange("renderStarted"===this.currentPlayState?"renderEnded":"realtimePerformanceEnded");this.publicEvents&&this.publicEvents.triggerRealtimePerformanceEnded(this);
this.eventPromises&&this.eventPromises.releaseStopPromise();break;case "releasePause":this.publicEvents.triggerRealtimePerformancePaused(this);this.eventPromises.releasePausePromise();break;case "releaseResumed":this.publicEvents.triggerRealtimePerformanceResumed(this);this.eventPromises.releaseResumePromise();break;default:n.data.forEach(({id:l,answer:p})=>{this.callbackBuffer[l].resolveCallback(p);delete this.callbackBuffer[l]})}});this.ipcMessagePorts.sabMainCallbackReply.start();const k=wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(c);
a=a();this.proxyPort=k;const m=await k.initialize(transfer$$module$node_modules$comlink$dist$esm$comlink_mjs({wasmDataURI:a,wasmTransformerDataURI:this.wasmTransformerDataURI,messagePort:this.ipcMessagePorts.workerMessagePort,callbackPort:this.ipcMessagePorts.sabWorkerCallbackReply,withPlugins:b},[a,this.ipcMessagePorts.workerMessagePort,this.ipcMessagePorts.sabWorkerCallbackReply]));this.csoundInstance=m;this.ipcMessagePorts.mainMessagePort.start();this.ipcMessagePorts.mainMessagePortAudio.start();
logSABMain$$module$src$logger("A proxy port from SABMain to SABWorker established")();this.exportApi.pause=this.csoundPause.bind(this);this.exportApi.resume=this.csoundResume.bind(this);this.exportApi.terminateInstance=this.terminateInstance.bind(this);this.exportApi.enableAudioInput=()=>console.warn("enableAudioInput was ignored: please use -iadc option before calling start with useWorker=true");this.exportApi.getNode=async()=>{const n=this.audioWorker.audioWorkletNode;return n?n:await new Promise(l=>
{this.exportApi.once("onAudioNodeCreated",l)})};this.exportApi.getAudioContext=async()=>this.audioWorker.audioContext;this.exportApi=this.publicEvents.decorateAPI(this.exportApi);this.exportApi.addListener("message",console.log);for(const n of Object.keys(api$$module$src$libcsound)){const l=makeProxyCallback$$module$src$utils(k,m,n,this.currentPlayState),p=api$$module$src$libcsound[n];switch(n){case "csoundCreate":break;case "csoundStart":b=async function(){if(!m||"number"!==typeof m)return console.error("starting csound failed because csound instance wasn't created"),
-1;if(this.eventPromises.isWaiting("start"))return-1;this.eventPromises.createStartPromise();const q=await l({audioStateBuffer:d,audioStreamIn:f,audioStreamOut:g,midiBuffer:h,csound:m});await this.eventPromises.waitForStart();this.ipcMessagePorts&&this.ipcMessagePorts.sabMainCallbackReply.postMessage({unlock:!0});return q};b.toString=()=>p.toString();this.exportApi.start=b.bind(this);break;case "csoundStop":b=async()=>{logSABMain$$module$src$logger(["Checking if it's safe to call stop:",stopableStates$$module$src$utils.has(this.currentPlayState),
"currentPlayState is",this.currentPlayState].join("\n"))();return this.eventPromises.isWaiting("stop")?(logSABMain$$module$src$logger("already waiting to stop, doing nothing")(),-1):stopableStates$$module$src$utils.has(this.currentPlayState)?(logSABMain$$module$src$logger("Marking SAB's state to STOP")(),this.eventPromises.createStopPromise(),Atomics.store(this.audioStatePointer,AUDIO_STATE$$module$src$constants.STOP,1),logSABMain$$module$src$logger("Marking that performance is not running anymore (stops the audio too)")(),
Atomics.store(this.audioStatePointer,AUDIO_STATE$$module$src$constants.IS_PERFORMING,0),"realtimePerformancePaused"===this.currentPlayState&&(Atomics.store(this.audioStatePointer,AUDIO_STATE$$module$src$constants.IS_PAUSED,0),Atomics.notify(this.audioStatePointer,AUDIO_STATE$$module$src$constants.IS_PAUSED)),"renderStarted"!==this.currentPlayState&&!Atomics.compareExchange(this.audioStatePointer,AUDIO_STATE$$module$src$constants.CSOUND_LOCK,0,1)&&Atomics.notify(this.audioStatePointer,AUDIO_STATE$$module$src$constants.CSOUND_LOCK),
await this.eventPromises.waitForStop(),0):-1};this.exportApi.stop=b.bind(this);b.toString=()=>p.toString();break;case "csoundReset":b=async()=>{if(this.currentPlayState){if(this.eventPromises.isWaiting("reset"))return-1;stopableStates$$module$src$utils.has(this.currentPlayState)&&await this.exportApi.stop();this.ipcMessagePorts.restartAudioWorkerPorts();this.audioContextIsProvided||(await this.audioWorker.terminateInstance(),delete this.audioWorker.audioContext);return await l([])}};this.exportApi.reset=
b.bind(this);b.toString=()=>p.toString();break;case "csoundPushMidiMessage":b=async(q=0,u=0,t=0)=>{this.handleMidiInput({data:[q,u,t]})};this.exportApi.midiMessage=b.bind(this);b.toString=()=>p.toString();break;case "fs":this.exportApi.fs={};Object.keys(p).forEach(q=>{const u=makeProxyCallback$$module$src$utils(k,m,q,this.currentPlayState);u.toString=()=>p[q].toString();this.exportApi.fs[q]=u});break;default:b=async(...q)=>{if("realtimePerformanceStarted"===this.currentPlayState||"renderStarted"===
this.currentPlayState||this.eventPromises.isWaitingToStart()){const u=this.callbackId;this.callbackId+=1;const t=new Promise((x,r)=>{const y=setTimeout(()=>r(Error(`Worker timed out so ${csoundApiRename$$module$src$utils(n)}() wasn't called!`)),1E4);this.callbackBuffer[u]={resolveCallback:v=>{clearTimeout(y);x(v)},apiKey:n,argumentz:[m,...q]}});Atomics.compareExchange(e,AUDIO_STATE$$module$src$constants.HAS_PENDING_CALLBACKS,0,1);return await t}return await l.apply(void 0,q)},b.toString=()=>p.toString(),
this.exportApi[csoundApiRename$$module$src$utils(n)]=b}}logSABMain$$module$src$logger("PUBLIC API Generated and stored")()}}var $jscompDefaultExport$$module$src$mains$sab_main=SharedArrayBufferMainThread$$module$src$mains$sab_main,module$src$mains$sab_main={};module$src$mains$sab_main.default=$jscompDefaultExport$$module$src$mains$sab_main;async function requestMidi$$module$src$utils$request_midi({onMidiMessage:a}){logMidiRequest$$module$src$logger("requesting for web-midi connection")();if(navigator&&navigator.requestMIDIAccess)try{const b=await navigator.requestMIDIAccess();if(b.inputs){const c=b.inputs.values();for(let d=c.next();d&&!d.done;d=c.next())logMidiRequest$$module$src$logger(`Connecting midi-input: ${d.value.name||"unkown"}`)(),d.value.onmidimessage=a}else logMidiRequest$$module$src$logger("no midi-device detected")()}catch(b){logMidiRequest$$module$src$logger("error while connecting web-midi: "+
b)()}else logMidiRequest$$module$src$logger("no web-midi support found, midi-input will not work!")()}var module$src$utils$request_midi={};module$src$utils$request_midi.requestMidi=requestMidi$$module$src$utils$request_midi;var $jscompDefaultExport$$module$dist$__compiled_worklet_worker_inline=()=>"data:application/javascript;base64,",
module$dist$__compiled_worklet_worker_inline={};module$dist$__compiled_worklet_worker_inline.default=$jscompDefaultExport$$module$dist$__compiled_worklet_worker_inline;let UID$$module$src$mains$worklet_main=0;
class AudioWorkletMainThread$$module$src$mains$worklet_main{constructor({audioContext:a,audioContextIsProvided:b,autoConnect:c}){this.autoConnect=c;this.audioContextIsProvided=b;this.ipcMessagePorts=void 0;this.audioContext=a;this.softwareBufferSize=this.hardwareBufferSize=this.outputsCount=this.inputsCount=this.sampleRate=this.ksmps=this.workletProxy=this.csoundWorkerMain=this.currentPlayState=this.audioWorkletNode=void 0;this.initialize=this.initialize.bind(this);this.onPlayStateChange=this.onPlayStateChange.bind(this);
this.terminateInstance=this.terminateInstance.bind(this);this.createWorkletNode=this.createWorkletNode.bind(this);logWorkletMain$$module$src$logger("AudioWorkletMainThread was constructed")()}async terminateInstance(){this.audioWorkletNode&&(this.audioWorkletNode.disconnect(),delete this.audioWorkletNode);if(this.audioContext){if("closed"!==this.audioContext.state)try{await this.audioContext.close()}catch{}delete this.audioContext}this.workletProxy&&(this.workletProxy[releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs](),
delete this.workletProxy)}createWorkletNode(a,b,c){a=new AudioWorkletNode(a,"csound-worklet-processor",{inputChannelCount:b?[b]:0,outputChannelCount:[this.outputsCount||2],processorOptions:{contextUid:c,isRequestingInput:this.isRequestingInput,inputsCount:b,outputsCount:this.outputsCount,ksmps:this.ksmps,maybeSharedArrayBuffer:this.csoundWorkerMain.hasSharedArrayBuffer&&this.csoundWorkerMain.audioStatePointer,maybeSharedArrayBufferAudioIn:this.csoundWorkerMain.hasSharedArrayBuffer&&this.csoundWorkerMain.audioStreamIn,
maybeSharedArrayBufferAudioOut:this.csoundWorkerMain.hasSharedArrayBuffer&&this.csoundWorkerMain.audioStreamOut}});this.csoundWorkerMain.publicEvents.triggerOnAudioNodeCreated(a);return a}async onPlayStateChange(a){this.currentPlayState=a;switch(a){case "realtimePerformanceStarted":logWorkletMain$$module$src$logger("event received: realtimePerformanceStarted")();await this.initialize();this.csoundWorkerMain&&this.csoundWorkerMain.eventPromises&&(this.csoundWorkerMain.publicEvents&&this.csoundWorkerMain.publicEvents.triggerRealtimePerformanceStarted(this),
this.csoundWorkerMain.eventPromises&&await this.csoundWorkerMain.eventPromises.releaseStartPromise());break;case "realtimePerformanceEnded":logWorkletMain$$module$src$logger("event received: realtimePerformanceEnded"+!this.csoundWorkerMain.hasSharedArrayBuffer?" cleaning up ports":"")();if(!this.audioContextIsProvided&&this.autoConnect&&this.audioContext&&"closed"!==this.audioContext.state)try{await this.audioContext.close()}catch{}this.autoConnect&&this.audioWorkletNode&&(this.audioWorkletNode.disconnect(),
delete this.audioWorkletNode);this.workletProxy&&(this.workletProxy[releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs](),delete this.workletProxy);this.workletWorkerUrl&&(window.URL||window.webkitURL).revokeObjectURL(this.workletWorkerUrl);this.audioWorkletNode&&delete this.audioWorkletNode;this.softwareBufferSize=this.hardwareBufferSize=this.outputsCount=this.inputsCount=this.sampleRate=this.currentPlayState=void 0;break;case "realtimePerformancePaused":this.csoundWorkerMain&&this.csoundWorkerMain.eventPromises&&
(this.csoundWorkerMain.publicEvents&&this.csoundWorkerMain.publicEvents.triggerRealtimePerformancePaused(this),await this.csoundWorkerMain.eventPromises.releasePausePromise());break;case "realtimePerformanceResumed":this.csoundWorkerMain&&this.csoundWorkerMain.eventPromises&&(this.csoundWorkerMain.publicEvents&&this.csoundWorkerMain.publicEvents.triggerRealtimePerformanceResumed(this),await this.csoundWorkerMain.eventPromises.releaseResumePromise())}}async initialize(){this.audioContext||(this.audioContextIsProvided&&
console.error("fatal: the provided AudioContext was undefined"),this.audioContext=new (WebkitAudioContext$$module$src$utils())({sampleRate:this.sampleRate}));"closed"===this.audioContext.state&&(this.audioContextIsProvided&&console.error("fatal: the provided AudioContext was closed, falling back new AudioContext"),this.audioContext=new (WebkitAudioContext$$module$src$utils())({sampleRate:this.sampleRate}));this.sampleRate!==this.audioContext.sampleRate&&(this.audioContext=new (WebkitAudioContext$$module$src$utils())({sampleRate:this.sampleRate}),
this.audioContextIsProvided&&console.error("Internal error: sample rate was ignored from provided audioContext"));this.workletWorkerUrl=$jscompDefaultExport$$module$dist$__compiled_worklet_worker_inline();try{await this.audioContext.audioWorklet.addModule(this.workletWorkerUrl)}catch(c){console.error("Error calling audioWorklet.addModule",c)}logWorkletMain$$module$src$logger("WorkletWorker module added")();if(this.csoundWorkerMain){var a=`audioWorklet${UID$$module$src$mains$worklet_main}`;UID$$module$src$mains$worklet_main+=
1;this.isRequestingMidi&&(logWorkletMain$$module$src$logger("requesting for web-midi connection"),requestMidi$$module$src$utils$request_midi({onMidiMessage:this.csoundWorkerMain.handleMidiInput.bind(this.csoundWorkerMain)}));if(this.isRequestingInput){let c;var b=new Promise(f=>{c=f});const d=void 0===navigator.mediaDevices?navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia:navigator.mediaDevices.getUserMedia,e=f=>{if(f){f=this.audioContext.createMediaStreamSource(f);
this.inputsCount=f.channelCount;const g=this.createWorkletNode(this.audioContext,f.channelCount,a);this.audioWorkletNode=g;this.autoConnect&&f.connect(g).connect(this.audioContext.destination)}else this.inputsCount=0,this.audioWorkletNode=this.createWorkletNode(this.audioContext,0,a),this.autoConnect&&this.audioWorkletNode.connect(this.audioContext.destination);c&&c()};logWorkletMain$$module$src$logger("requesting microphone access")();void 0===navigator.mediaDevices?d.call(navigator,{audio:{optional:[{echoCancellation:!1,
sampleSize:32}]}},e,console.error):d.call(navigator.mediaDevices,{audio:{echoCancellation:!1,sampleSize:32}}).then(e).catch(console.error)}else this.audioWorkletNode=this.createWorkletNode(this.audioContext,0,a),logWorkletMain$$module$src$logger("connecting Node to AudioContext destination")(),this.autoConnect&&this.audioWorkletNode.connect(this.audioContext.destination);b&&await b;this.workletProxy=wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(this.audioWorkletNode.port);this.ipcMessagePorts.mainMessagePortAudio.addEventListener("message",
messageEventHandler$$module$src$mains$messages_main(this));this.ipcMessagePorts.mainMessagePortAudio.start();await this.workletProxy.initialize(transfer$$module$node_modules$comlink$dist$esm$comlink_mjs({contextUid:a,messagePort:this.ipcMessagePorts.workerMessagePortAudio,requestPort:this.ipcMessagePorts.audioWorkerFrameRequestPort,inputPort:this.ipcMessagePorts.audioWorkerAudioInputPort},[this.ipcMessagePorts.workerMessagePortAudio,this.ipcMessagePorts.audioWorkerFrameRequestPort,this.ipcMessagePorts.audioWorkerAudioInputPort]));
logWorkletMain$$module$src$logger("initialization finished in main")()}else console.error("fatal: worker not reachable from worklet-main thread")}}var $jscompDefaultExport$$module$src$mains$worklet_main=AudioWorkletMainThread$$module$src$mains$worklet_main,module$src$mains$worklet_main={};module$src$mains$worklet_main.default=$jscompDefaultExport$$module$src$mains$worklet_main;const requestMicrophoneNode$$module$src$mains$io_utils=a=>{const b=void 0===navigator.mediaDevices?navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia:navigator.mediaDevices.getUserMedia;console.log("requesting microphone access");void 0===navigator.mediaDevices?b.call(navigator,{audio:{optional:[{echoCancellation:!1,sampleSize:32}]}},a,console.error):b.call(navigator.mediaDevices,{audio:{echoCancellation:!1,sampleSize:32}}).then(a).catch(console.error)};
async function enableAudioInput$$module$src$mains$io_utils(){console.log("enabling audio input");requestMicrophoneNode$$module$src$mains$io_utils(async a=>{if(a){a=(await this.getAudioContext()).createMediaStreamSource(a);this.inputsCount=a.channelCount;const b=await this.getNode();a.connect(b)}})}var module$src$mains$io_utils={};module$src$mains$io_utils.enableAudioInput=enableAudioInput$$module$src$mains$io_utils;module$src$mains$io_utils.requestMicrophoneNode=requestMicrophoneNode$$module$src$mains$io_utils;var $jscompDefaultExport$$module$dist$__compiled_old_spn_worker_inline=()=>(window.URL||window.webkitURL).createObjectURL(new Blob(['(function(){/*\n\n Copyright The Closure Library Authors.\n SPDX-License-Identifier: Apache-2.0\n*/\nvar $jscomp=$jscomp||{};$jscomp.scope={};var COMPILED=!0,goog=goog||{};goog.global=this||self;goog.exportPath_=function(a,b,c,d){a=a.split(".");d=d||goog.global;a[0]in d||"undefined"==typeof d.execScript||d.execScript("var "+a[0]);for(var e;a.length&&(e=a.shift());)if(a.length||void 0===b)d=d[e]&&d[e]!==Object.prototype[e]?d[e]:d[e]={};else if(!c&&goog.isObject(b)&&goog.isObject(d[e]))for(var f in b)b.hasOwnProperty(f)&&(d[e][f]=b[f]);else d[e]=b};\ngoog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2020;goog.DEBUG=!0;goog.LOCALE="en";goog.getLocale=function(){return goog.LOCALE};goog.TRUSTED_SITE=!0;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;\ngoog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(a))throw Error(\'Namespace "\'+a+\'" already declared.\');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b,c){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var d=a;(d=d.substring(0,d.lastIndexOf(".")))&&!goog.getObjectByName(d);)goog.implicitNamespaces_[d]=!0}goog.exportPath_(a,b,c)};goog.NONCE_PATTERN_=/^[\\w+/_-]+[=]{0,2}$/;\ngoog.getScriptNonce_=function(a){a=(a||goog.global).document;return(a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(a)?a:""};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\ngoog.module=function(a){if("string"!==typeof a||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You\'re likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");\ngoog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error(\'Namespace "\'+a+\'" already declared.\');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};goog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:"es6",GOOG:"goog"};goog.moduleLoaderState_=null;\ngoog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?"function"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};\ngoog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0};\ngoog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(a in goog.loadedModules_)throw Error(\'Module with namespace "\'+a+\'" already exists.\');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||"function"!=typeof b.getCurrentModulePath)throw Error(\'Module with namespace "\'+\na+\'" has been loaded incorrectly.\');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&null!=goog.getObjectByName(a)},goog.implicitNamespaces_={"goog.module":!0});\ngoog.getObjectByName=function(a,b){a=a.split(".");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b};goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};\ngoog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath="";goog.abstractMethod=function(){throw Error("unimplemented abstract method");};\ngoog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";goog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRUSTED_TYPES_POLICY_NAME="goog";\ngoog.hasBadLetScoping=null;\ngoog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};var c={},d=c;if("function"===typeof a)d=a.call(void 0,d);else if("string"===typeof a)d=goog.loadModuleFromSource_.call(void 0,d,a);else throw Error("Invalid module definition");var e=goog.moduleLoaderState_.moduleName;if("string"===typeof e&&e)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(e,d,c!==d):goog.SEAL_MODULE_EXPORTS&&\nObject.seal&&"object"==typeof d&&null!=d&&Object.seal(d),goog.loadedModules_[e]={exports:d,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error(\'Invalid module name "\'+e+\'"\');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a,b){eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(b));return a};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};\ngoog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};goog.typeOf=function(a){var b=typeof a;return"object"!=b?b:a?Array.isArray(a)?"array":b:"null"};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};\ngoog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};goog.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,goog.UID_PROPERTY_)&&a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};\ngoog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if("function"===typeof a.clone)return a.clone();if("undefined"!==typeof Map&&a instanceof Map)return new Map(a);if("undefined"!==typeof Set&&a instanceof Set)return new Set(a);b="array"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};\ngoog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};\ngoog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}};goog.now=function(){return Date.now()};goog.globalEval=function(a){(0,eval)(a)};\ngoog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error(\'className passed in goog.getCssName must not start with ".". You passed: \'+a);var c=function(e){return goog.cssNameMapping_[e]||e},d=function(e){e=e.split("-");for(var f=[],g=0;g<e.length;g++)f.push(c(e[g]));return f.join("-")};d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(e){return e};a=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};\ngoog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.GetMsgOptions=function(){};\ngoog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,"&lt;"));c&&c.unescapeHtmlEntities&&(a=a.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&apos;/g,"\'").replace(/&quot;/g,\'"\').replace(/&amp;/g,"&"));b&&(a=a.replace(/\\{\\$([^}]+)}/g,function(d,e){return null!=b&&e in b?b[e]:d}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,!0,c)};goog.exportProperty=function(a,b,c){a[b]=c};\ngoog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(d,e,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++)g[h-2]=arguments[h];return b.prototype[e].apply(d,g)}};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");a.call(goog.global)};COMPILED||(goog.global.COMPILED=COMPILED);\ngoog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;\ngoog.defineClass.createSealingConstructor_=function(a,b){return goog.defineClass.SEAL_CLASS_INSTANCES?function(){var c=a.apply(this,arguments)||this;c[goog.UID_PROPERTY_]=c[goog.UID_PROPERTY_];return c}:a};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");\ngoog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};goog.identity_=function(a){return a};\ngoog.createTrustedTypesPolicy=function(a){var b=null,c=goog.global.trustedTypes;if(!c||!c.createPolicy)return b;try{b=c.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_})}catch(d){goog.logToConsole_(d.message)}return b};\n!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.isEdge_=function(){return!!(goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"").match(/Edge\\/(\\d+)(\\.\\d)*/i)},goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?"complete"!=a.readyState:"loading"==a.readyState},goog.findBasePath_=function(){if(void 0!=goog.global.CLOSURE_BASE_PATH&&"string"===typeof goog.global.CLOSURE_BASE_PATH)goog.basePath=\ngoog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;a=b?[b]:a.getElementsByTagName("SCRIPT");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?");d=-1==d?c.length:d;if("base.js"==c.slice(d-7,d)){goog.basePath=c.slice(0,d-7);break}}}},goog.findBasePath_(),goog.protectScriptTag_=function(a){return a.replace(/<\\/(SCRIPT)/ig,"\\\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={};this.idToPath_={};this.written_={};this.loadingDeps_=\n[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory;this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error("Unregonized namespace: "+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},\ngoog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{}));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=function(a){this.factory_=a},goog.DebugLoader_.prototype.load_=\nfunction(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(e){var f=b.getPathFromDeps_(e);if(!f)throw Error("Bad dependency path or symbol: "+e);if(!b.written_[f]){b.written_[f]=!0;e=b.dependencies_[f];for(f=0;f<e.requires.length;f++)goog.isProvided_(e.requires[f])||d(e.requires[f]);c.push(e)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else goog.logToConsole_("goog.require could not find: "+a)},goog.DebugLoader_.prototype.loadDeps_=\nfunction(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error("Cannot call pause after the call to load.");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error("Double call to loaded.");e=!0;a.loaded_(d)},pending:function(){for(var g=[],h=0;h<a.loadingDeps_.length;h++)g.push(a.loadingDeps_[h]);return g},setModuleState:function(g){goog.moduleLoaderState_={type:g,\nmoduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(g,h,k){k&&(goog.loadedModules_[k]={exports:h,type:goog.ModuleType.ES6,moduleId:k||""})},registerGoogModuleExports:function(g,h){goog.loadedModules_[g]={exports:h,type:goog.ModuleType.GOOG,moduleId:g}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(g){if(c)throw Error("Cannot register with defer after the call to load.");a.defer_(d,g)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};\ntry{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);break}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==\na.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=function(a){return a in this.idToPath_?\nthis.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,b,c){},goog.LoadController.prototype.setModuleState=\nfunction(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf("://");0<=b&&(a=a.substring(b+3),b=a.indexOf("/"),0<=b&&(a=a.substring(b+1)));return a},\ngoog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=function(a){delete goog.Dependency.callbackMap_[a]},\ngoog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error("Callback key "+a+" does not exist (was base.js loaded more than once?).");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=goog.global.document;if("complete"==\nb.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\\bdeps.js$/.test(this.path)){a.loaded();return}throw Error(\'Cannot write "\'+this.path+\'" after document load\');}var c=goog.getScriptNonce_();if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var d=function(h){h.readyState&&"complete"!=h.readyState?h.onload=d:(goog.Dependency.unregisterCallback_(e),a.loaded())};var e=goog.Dependency.registerCallback_(d);c=c?\' nonce="\'+c+\'"\':"";var f=\'<script src="\'+this.path+\'"\'+\nc+(goog.Dependency.defer_?" defer":"")+\' id="script-\'+e+\'">\\x3c/script>\';f+="<script"+c+">";f=goog.Dependency.defer_?f+("document.getElementById(\'script-"+e+"\').onload = function() {\\n  goog.Dependency.callback_(\'"+e+"\', this);\\n};\\n"):f+("goog.Dependency.callback_(\'"+e+"\', document.getElementById(\'script-"+e+"\'));");f+="\\x3c/script>";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(f):f)}else{var g=b.createElement("script");g.defer=goog.Dependency.defer_;g.async=!1;c&&(g.nonce=\nc);g.onload=function(){g.onload=null;a.loaded()};g.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(g)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),a.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,\nb,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(l,m){var n="",p=goog.getScriptNonce_();p&&(n=\' nonce="\'+p+\'"\');l=m?\'<script type="module" crossorigin\'+n+">"+m+"\\x3c/script>":\'<script type="module" crossorigin src="\'+l+\'"\'+n+">\\x3c/script>";d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(l):l)}function c(l,m){var n=d.createElement("script");n.defer=!0;n.async=!1;n.type="module";n.setAttribute("crossorigin",\n!0);var p=goog.getScriptNonce_();p&&(n.nonce=p);m?n.text=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(m):m:n.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(l):l;d.head.appendChild(n)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);\na.setModuleState(goog.ModuleType.ES6)});f(void 0,\'goog.Dependency.callback_("\'+g+\'")\');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(l){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,l,goog.moduleLoaderState_.moduleName)});f(void 0,\'import * as m from "\'+this.path+\'"; goog.Dependency.callback_("\'+h+\'", m)\');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);a.clearModuleState();a.loaded()});f(void 0,\'goog.Dependency.callback_("\'+\nk+\'")\')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=goog.loadFileSync_(e.path);e.contents_&&(e.contents_=\ne.transform(e.contents_),e.contents_&&(e.contents_+="\\n//# sourceURL="+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var l=e.contents_;e.contents_=null;goog.globalEval(goog.CLOSURE_EVAL_PREFILTER_.createScript(l));if(f)var m=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),m)});a.loaded()}}\nfunction d(){var l=goog.global.document,m=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(m);c()}),n=goog.getScriptNonce_();n="<script"+(n?\' nonce="\'+n+\'"\':"")+">"+goog.protectScriptTag_(\'goog.Dependency.callback_("\'+m+\'");\')+"\\x3c/script>";l.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(n):n)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,a.loaded()):\na.pause();else{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length;if(goog.Dependency.defer_&&(g||goog.isDocumentLoading_()))a.defer(function(){c()});else{var h=goog.global.document;g=goog.inHtmlDocument_()&&("ActiveXObject"in goog.global||goog.isEdge_());if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!g){goog.Dependency.defer_=!0;a.pause();var k=h.onreadystatechange;h.onreadystatechange=function(){"interactive"==h.readyState&&(h.onreadystatechange=\nk,c(),a.resume());"function"===typeof k&&k.apply(void 0,arguments)}}else goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,\nc,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=function(a){return goog.LOAD_MODULE_USING_EVAL&&void 0!==goog.global.JSON?"goog.loadModule("+goog.global.JSON.stringify(a+"\\n//# sourceURL="+this.path+"\\n")+");":\'goog.loadModule(function(exports) {"use strict";\'+a+"\\n;return exports});\\n//# sourceURL="+this.path+"\\n"},goog.DebugLoader_.prototype.addDependency=function(a,b,c,d){b=\nb||[];a=a.replace(/\\\\/g,"/");var e=goog.normalizePath_(goog.basePath+a);d&&"boolean"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d);this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(){},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,b,c,d,e):e.module==goog.ModuleType.ES6?goog.ASSUME_ES_MODULES_TRANSPILED?\nnew goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null,goog.global.CLOSURE_NO_DEPS||goog.debugLoader_.loadClosureDeps(),\ngoog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});if(!COMPILED){var isChrome87=!1;try{isChrome87=eval(goog.global.trustedTypes.emptyScript)!==goog.global.trustedTypes.emptyScript}catch(a){}goog.CLOSURE_EVAL_PREFILTER_=goog.global.trustedTypes&&isChrome87&&goog.createTrustedTypesPolicy("goog#base#devonly#eval")||{createScript:goog.identity_}};const proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.proxy"),createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.endpoint"),releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.releaseProxy"),throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs=Symbol("Comlink.thrown"),isObject$$module$node_modules$comlink$dist$esm$comlink_mjs=a=>"object"===typeof a&&null!==a||"function"===typeof a,proxyTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs=\n{canHandle:a=>isObject$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&a[proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs],serialize(a){const {port1:b,port2:c}=new MessageChannel;expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b);return[c,[c]]},deserialize(a){a.start();return wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(a)}},throwTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs={canHandle:a=>isObject$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&\nthrowMarker$$module$node_modules$comlink$dist$esm$comlink_mjs in a,serialize({value:a}){return[a instanceof Error?{isError:!0,value:{message:a.message,name:a.name,stack:a.stack}}:{isError:!1,value:a},[]]},deserialize(a){if(a.isError)throw Object.assign(Error(a.value.message),a.value);throw a.value;}},transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs=new Map([["proxy",proxyTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs],["throw",throwTransferHandler$$module$node_modules$comlink$dist$esm$comlink_mjs]]);\nfunction expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=self){b.addEventListener("message",function e(d){if(d&&d.data){var {id:f,type:g,path:h}=Object.assign({path:[]},d.data),k=(d.data.argumentList||[]).map(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);try{const m=h.slice(0,-1).reduce((p,q)=>p[q],a),n=h.reduce((p,q)=>p[q],a);switch(g){case "GET":var l=n;break;case "SET":m[h.slice(-1)[0]]=fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(d.data.value);\nl=!0;break;case "APPLY":l=n.apply(m,k);break;case "CONSTRUCT":const p=new n(...k);l=proxy$$module$node_modules$comlink$dist$esm$comlink_mjs(p);break;case "ENDPOINT":const {port1:q,port2:r}=new MessageChannel;expose$$module$node_modules$comlink$dist$esm$comlink_mjs(a,r);l=transfer$$module$node_modules$comlink$dist$esm$comlink_mjs(q,[q]);break;case "RELEASE":l=void 0;break;default:return}}catch(m){l={value:m,[throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:0}}Promise.resolve(l).catch(m=>\n({value:m,[throwMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:0})).then(m=>{const [n,p]=toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(m);b.postMessage(Object.assign(Object.assign({},n),{id:f}),p);"RELEASE"===g&&(b.removeEventListener("message",e),closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(b))})}});b.start&&b.start()}function isMessagePort$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return"MessagePort"===a.constructor.name}\nfunction closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a){isMessagePort$$module$node_modules$comlink$dist$esm$comlink_mjs(a)&&a.close()}function wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b){return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,[],b)}function throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(a){if(a)throw Error("Proxy has been released and is not useable");}\nfunction createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=[],c=function(){}){let d=!1;const e=new Proxy(c,{get(f,g){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);if(g===releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs)return()=>requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"RELEASE",path:b.map(h=>h.toString())}).then(()=>{closeEndPoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a);d=!0});if("then"===\ng){if(0===b.length)return{then:()=>e};f=requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"GET",path:b.map(h=>h.toString())}).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);return f.then.bind(f)}return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,[...b,g])},set(f,g,h){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);const [k,l]=toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(h);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,\n{type:"SET",path:[...b,g].map(m=>m.toString()),value:k},l).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)},apply(f,g,h){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);f=b[b.length-1];if(f===createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs)return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"ENDPOINT"}).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);if("bind"===f)return createProxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a,\nb.slice(0,-1));const [k,l]=processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(h);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,{type:"APPLY",path:b.map(m=>m.toString()),argumentList:k},l).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)},construct(f,g){throwIfProxyReleased$$module$node_modules$comlink$dist$esm$comlink_mjs(d);const [h,k]=processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(g);return requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,\n{type:"CONSTRUCT",path:b.map(l=>l.toString()),argumentList:h},k).then(fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs)}});return e}function myFlat$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return Array.prototype.concat.apply([],a)}\nfunction processArguments$$module$node_modules$comlink$dist$esm$comlink_mjs(a){a=a.map(toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs);return[a.map(b=>b[0]),myFlat$$module$node_modules$comlink$dist$esm$comlink_mjs(a.map(b=>b[1]))]}const transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs=new WeakMap;function transfer$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b){transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs.set(a,b);return a}\nfunction proxy$$module$node_modules$comlink$dist$esm$comlink_mjs(a){return Object.assign(a,{[proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs]:!0})}function windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b=self,c="*"){return{postMessage:(d,e)=>a.postMessage(d,c,e),addEventListener:b.addEventListener.bind(b),removeEventListener:b.removeEventListener.bind(b)}}\nfunction toWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(a){for(const [b,c]of transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs)if(c.canHandle(a)){const [d,e]=c.serialize(a);return[{type:"HANDLER",name:b,value:d},e]}return[{type:"RAW",value:a},transferCache$$module$node_modules$comlink$dist$esm$comlink_mjs.get(a)||[]]}\nfunction fromWireValue$$module$node_modules$comlink$dist$esm$comlink_mjs(a){switch(a.type){case "HANDLER":return transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs.get(a.name).deserialize(a.value);case "RAW":return a.value}}\nfunction requestResponseMessage$$module$node_modules$comlink$dist$esm$comlink_mjs(a,b,c){return new Promise(d=>{const e=generateUUID$$module$node_modules$comlink$dist$esm$comlink_mjs();a.addEventListener("message",function h(g){g.data&&g.data.id&&g.data.id===e&&(a.removeEventListener("message",h),d(g.data))});a.start&&a.start();a.postMessage(Object.assign({id:e},b),c)})}\nfunction generateUUID$$module$node_modules$comlink$dist$esm$comlink_mjs(){return Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}var module$node_modules$comlink$dist$esm$comlink_mjs={};module$node_modules$comlink$dist$esm$comlink_mjs.createEndpoint=createEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.expose=expose$$module$node_modules$comlink$dist$esm$comlink_mjs;\nmodule$node_modules$comlink$dist$esm$comlink_mjs.proxy=proxy$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.proxyMarker=proxyMarker$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.releaseProxy=releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.transfer=transfer$$module$node_modules$comlink$dist$esm$comlink_mjs;\nmodule$node_modules$comlink$dist$esm$comlink_mjs.transferHandlers=transferHandlers$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.windowEndpoint=windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs;module$node_modules$comlink$dist$esm$comlink_mjs.wrap=wrap$$module$node_modules$comlink$dist$esm$comlink_mjs;var module$node_modules$lines_logger$lib$index={default:{}};module$node_modules$lines_logger$lib$index.default.__esModule=!0;module$node_modules$lines_logger$lib$index.default.LoggerFactory=module$node_modules$lines_logger$lib$index.default.logLevels=void 0;module$node_modules$lines_logger$lib$index.default.logLevels={log_raise_error:1,log_with_warnings:2,trace:3,debug:4,info:5,warn:6,error:7,disable:8};\nvar LoggerFactory$$module$node_modules$lines_logger$lib$index=function(){function a(b,c){if(void 0===b&&(b="log_with_warnings"),void 0===c&&(c=null),this.logLevel=b,!module$node_modules$lines_logger$lib$index.default.logLevels[b])throw Error("Invalid log level "+b+" allowed: "+JSON.stringify(module$node_modules$lines_logger$lib$index.default.logLevels));this.mockConsole=c||console}return a.prototype.dummy=function(){},a.prototype.setLogWarnings=function(b){this.logLevel=b},a.prototype.getLogWarnings=\nfunction(){return this.logLevel},a.prototype.getSingleLoggerColor=function(b,c,d){return this.getSingleLoggerStyle(b,this.getColorStyle(c),d)},a.prototype.getSingleLogger=function(b,c){var d=this.getRandomColor(b);return this.getSingleLoggerStyle(b,this.getColorStyle(d),c)},a.prototype.getSingleLoggerStyle=function(b,c,d,e){var f=this;return void 0===e&&(e="log_with_warnings"),function(){for(var g=[],h=0;h<arguments.length;h++)g[h]=arguments[h];if(module$node_modules$lines_logger$lib$index.default.logLevels[f.logLevel]>\nmodule$node_modules$lines_logger$lib$index.default.logLevels[e])return f.dummy;g=Array.prototype.slice.call(g);h=g.shift().split("{}");for(var k=[f.mockConsole,"%c"+b,c],l=0;l<h.length;l++)k.push(h[l]),void 0!==g[l]&&k.push(g[l]);if(h.length-1!==g.length)if("log_with_warnings"===f.logLevel)f.mockConsole.error("MissMatch amount of arguments");else if("log_raise_error"===f.logLevel)throw Error("MissMatch amount of arguments");return Function.prototype.bind.apply(d,k)}},a.prototype.getLoggerColor=function(b,\nc){return this.getLoggerStyle(b,this.getColorStyle(c))},a.prototype.getColorStyle=function(b){return"color: white; background-color: "+b+"; padding: 2px 6px; border-radius: 2px; font-size: 10px"},a.getHash=function(b,c){void 0===c&&(c=0);var d=3735928559^c;c^=1103547991;for(var e=0,f;e<b.length;e++)f=b.charCodeAt(e),d=Math.imul(d^f,2654435761),c=Math.imul(c^f,1597334677);return d=Math.imul(d^d>>>16,2246822507)^Math.imul(c^c>>>13,3266489909),4294967296*(2097151&(Math.imul(c^c>>>16,2246822507)^Math.imul(d^\nd>>>13,3266489909)))+(d>>>0)},a.prototype.getRandomColor=function(b){void 0===b&&(b="");b=a.getHash(b);for(var c="#",d=0;3>d;d++)c+=("00"+(8+(b>>7*d&127)).toString(16)).substr(-2);return c},a.prototype.getLogger=function(b){return this.getLoggerColor(b,this.getRandomColor(b))},a.prototype.getLoggerStyle=function(b,c){return{trace:this.getSingleLoggerStyle(b,c,this.mockConsole.trace,"trace"),debug:this.getSingleLoggerStyle(b,c,this.mockConsole.debug,"debug"),log:this.getSingleLoggerStyle(b,c,this.mockConsole.log,\n"info"),warn:this.getSingleLoggerStyle(b,c,this.mockConsole.warn,"warn"),error:this.getSingleLoggerStyle(b,c,this.mockConsole.error,"error")}},a}();module$node_modules$lines_logger$lib$index.default.LoggerFactory=LoggerFactory$$module$node_modules$lines_logger$lib$index;let logWorkletMain$$module$src$logger,logWorkletWorker$$module$src$logger,logSABMain$$module$src$logger,logSABWorker$$module$src$logger,logVANMain$$module$src$logger,logVANWorker$$module$src$logger,logOldSpnMain$$module$src$logger,logOldSpnWorker$$module$src$logger,logIndex$$module$src$logger,logSPNMainSingle$$module$src$logger,logSinglethreadWorkletMain$$module$src$logger,logSinglethreadWorkletWorker$$module$src$logger,logCommonUtils$$module$src$logger,logWasmModule$$module$src$logger,logMidiRequest$$module$src$logger;\nconst isProd$$module$src$logger=1;logWorkletMain$$module$src$logger=a=>b=>{};logWorkletWorker$$module$src$logger=a=>b=>{};logSABMain$$module$src$logger=a=>b=>{};logSABWorker$$module$src$logger=a=>b=>{};logVANMain$$module$src$logger=a=>b=>{};logVANWorker$$module$src$logger=a=>b=>{};logOldSpnMain$$module$src$logger=a=>b=>{};logOldSpnWorker$$module$src$logger=a=>b=>{};logIndex$$module$src$logger=a=>b=>{};logSPNMainSingle$$module$src$logger=a=>b=>{};\nlogSinglethreadWorkletMain$$module$src$logger=a=>b=>{};logSinglethreadWorkletWorker$$module$src$logger=a=>b=>{};logCommonUtils$$module$src$logger=a=>b=>{};logWasmModule$$module$src$logger=a=>b=>{};logMidiRequest$$module$src$logger=a=>b=>{};var $jscompDefaultExport$$module$src$logger=a=>b=>{},module$src$logger={};module$src$logger.default=$jscompDefaultExport$$module$src$logger;module$src$logger.logCommonUtils=logCommonUtils$$module$src$logger;module$src$logger.logIndex=logIndex$$module$src$logger;\nmodule$src$logger.logMidiRequest=logMidiRequest$$module$src$logger;module$src$logger.logOldSpnMain=logOldSpnMain$$module$src$logger;module$src$logger.logOldSpnWorker=logOldSpnWorker$$module$src$logger;module$src$logger.logSABMain=logSABMain$$module$src$logger;module$src$logger.logSABWorker=logSABWorker$$module$src$logger;module$src$logger.logSPNMainSingle=logSPNMainSingle$$module$src$logger;module$src$logger.logSinglethreadWorkletMain=logSinglethreadWorkletMain$$module$src$logger;\nmodule$src$logger.logSinglethreadWorkletWorker=logSinglethreadWorkletWorker$$module$src$logger;module$src$logger.logVANMain=logVANMain$$module$src$logger;module$src$logger.logVANWorker=logVANWorker$$module$src$logger;module$src$logger.logWasmModule=logWasmModule$$module$src$logger;module$src$logger.logWorkletMain=logWorkletMain$$module$src$logger;module$src$logger.logWorkletWorker=logWorkletWorker$$module$src$logger;const handleCsoundStart$$module$src$workers$common_utils=(a,b,c,d,e)=>f=>{const {csound:g}=f,h=1===b.csoundShouldDaemonize(g);h&&(b.csoundSetOption(g,"--daemon"),b.csoundSetOption(g,"-odac"));const k=b.csoundStart(g),l=b.csoundGetOutputName(g)||"test.wav";logCommonUtils$$module$src$logger(`handleCsoundStart: actual csoundStart result ${k}, outputName: ${l}`)();0!==k&&a.post(`error: csoundStart failed while trying to render ${l},`+" look out for errors in options and syntax");setTimeout(()=>{const m=\nb._isRequestingRtMidiInput(g);if(h||m||l.includes("dac"))d(f);else if(a.broadcastPlayState("renderStarted"),e)e(f);else for(;0===b.csoundPerformKsmps(g););},0);return k},instantiateAudioPacket$$module$src$workers$common_utils=(a,b)=>{const c=[];for(let d=0;d<a;d++)c.push(new Float64Array(b));return c},renderFunction$$module$src$workers$common_utils=({libraryCsound:a,workerMessagePort:b})=>async({csound:c})=>{const d=a.csoundGetKr(c);let e=0,f=0;for(;("renderStarted"===b.vanillaWorkerState||"renderStarted"===\nb.workerState)&&0===e;)e=a.csoundPerformKsmps(c),f+=1,"function"===typeof setTimeout&&0===e&&0===f%(2*d)&&await new Promise(g=>setTimeout(g,0));b.broadcastPlayState("renderEnded")};var module$src$workers$common_utils={};module$src$workers$common_utils.handleCsoundStart=handleCsoundStart$$module$src$workers$common_utils;module$src$workers$common_utils.instantiateAudioPacket=instantiateAudioPacket$$module$src$workers$common_utils;module$src$workers$common_utils.renderFunction=renderFunction$$module$src$workers$common_utils;function MessagePortState$$module$src$utils$message_port_state(){}MessagePortState$$module$src$utils$message_port_state.prototype.ready=!1;MessagePortState$$module$src$utils$message_port_state.prototype.port=void 0;MessagePortState$$module$src$utils$message_port_state.prototype.post=()=>{};MessagePortState$$module$src$utils$message_port_state.prototype.broadcastPlayState=()=>{};MessagePortState$$module$src$utils$message_port_state.prototype.workerState=void 0;\nMessagePortState$$module$src$utils$message_port_state.prototype.vanillaWorkerState=void 0;var $jscompDefaultExport$$module$src$utils$message_port_state=MessagePortState$$module$src$utils$message_port_state,module$src$utils$message_port_state={};module$src$utils$message_port_state.MessagePortState=MessagePortState$$module$src$utils$message_port_state;module$src$utils$message_port_state.default=$jscompDefaultExport$$module$src$utils$message_port_state;const WebkitAudioContext$$module$src$utils$new_audio_context=()=>{if(void 0!==window.webkitAudioContext)return window.webkitAudioContext;if(void 0!==window.AudioContext)return window.AudioContext},newAudioContext$$module$src$utils$new_audio_context=()=>{const a=WebkitAudioContext$$module$src$utils$new_audio_context();if(a)return new a};var module$src$utils$new_audio_context={};module$src$utils$new_audio_context.WebkitAudioContext=WebkitAudioContext$$module$src$utils$new_audio_context;\nmodule$src$utils$new_audio_context.newAudioContext=newAudioContext$$module$src$utils$new_audio_context;function add$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>add$$module$node_modules$rambda$dist$rambda_mjs(a,c):Number(a)+Number(b)}const cloneList$$module$node_modules$rambda$dist$rambda_mjs=a=>Array.prototype.slice.call(a);function curry$$module$node_modules$rambda$dist$rambda_mjs(a,b=[]){return(...c)=>{c=[...b,...c];return c.length>=a.length?a(...c):curry$$module$node_modules$rambda$dist$rambda_mjs(a,c)}}\nfunction adjustFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d=0>a?c.length+a:a;if(a>=c.length||0>d)return c;a=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);a[d]=b(a[d]);return a}const adjust$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(adjustFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction all$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>all$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(let c=0;c<b.length;c++)if(!a(b[c]))return!1;return!0}function allPass$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{let c=0;for(;c<a.length;){if(!a[c](...b))return!1;c++}return!0}}function always$$module$node_modules$rambda$dist$rambda_mjs(a){return b=>a}\nfunction and$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>and$$module$node_modules$rambda$dist$rambda_mjs(a,c):a&&b}function any$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>any$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=0;for(;c<b.length;){if(a(b[c],c))return!0;c++}return!1}\nfunction anyPass$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{let c=0;for(;c<a.length;){if(a[c](...b))return!0;c++}return!1}}function append$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>append$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof b)return b.split("").concat(a);const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(b);c.push(a);return c}\nfunction apply$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>apply$$module$node_modules$rambda$dist$rambda_mjs(a,c):a.apply(this,b)}const {isArray:isArray$$module$node_modules$rambda$dist$rambda_mjs}=Array;\nfunction __findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a,b=0){for(const c in a)!1!==a.hasOwnProperty(c)&&"constructor"!==c&&("object"===typeof a[c]&&(b=Math.max(b,__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a[c]))),"function"===typeof a[c]&&(b=Math.max(b,a[c].length)));return b}\nfunction __filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(){const a=[];let b=0;const c=arguments.length;for(;b<c&&"undefined"!==typeof arguments[b];)a[b]=arguments[b],b++;return a}\nfunction __applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){var d=b-c.length;if(1===d)return f=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f));if(2===d)return(f,g)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g));if(3===d)return(f,g,h)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,\nb,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g,h));if(4===d)return(f,g,h,k)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,f,g,h,k));if(4<d)return(...f)=>__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,b,__filterUndefined$$module$node_modules$rambda$dist$rambda_mjs(...c,...f));if(isArray$$module$node_modules$rambda$dist$rambda_mjs(a)){var e=[];d=0;const f=a.length;\nfor(;d<f;d++){if("object"===typeof a[d]||isArray$$module$node_modules$rambda$dist$rambda_mjs(a[d]))e[d]=__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a[d],b,c);"function"===typeof a[d]&&(e[d]=a[d](...c))}return e}d={};for(e in a)!1!==a.hasOwnProperty(e)&&"constructor"!==e&&("object"===typeof a[e]?d[e]=__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a[e],b,c):"function"===typeof a[e]&&(d[e]=a[e](...c)));return d}\nfunction applySpec$$module$node_modules$rambda$dist$rambda_mjs(a,...b){const c=__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs(a);return 0===c?()=>({}):__applySpecWithArity$$module$node_modules$rambda$dist$rambda_mjs(a,c,b)}function assocFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return Object.assign({},c,{[a]:b})}const assoc$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(assocFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction _isInteger$$module$node_modules$rambda$dist$rambda_mjs(a){return a<<0===a}const isInteger$$module$node_modules$rambda$dist$rambda_mjs=Number.isInteger||_isInteger$$module$node_modules$rambda$dist$rambda_mjs;\nfunction assocPathFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d="string"===typeof a?a.split(".").map(e=>isInteger$$module$node_modules$rambda$dist$rambda_mjs(Number(e))?Number(e):e):a;if(0===d.length)return b;a=d[0];if(1<d.length){const e="object"===typeof c&&null!==c&&c.hasOwnProperty(a)?c[a]:isInteger$$module$node_modules$rambda$dist$rambda_mjs(d[1])?[]:{};b=assocPathFn$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(d,1),b,e)}return isInteger$$module$node_modules$rambda$dist$rambda_mjs(a)&&\nisArray$$module$node_modules$rambda$dist$rambda_mjs(c)?(c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c),c[a]=b,c):assoc$$module$node_modules$rambda$dist$rambda_mjs(a,b,c)}const assocPath$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(assocPathFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction _curryN$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return function(){var d=0;let e=0;const f=b.length,g=arguments.length,h=Array(f+g);for(;d<f;)h[d]=b[d],d++;for(;e<g;)h[f+e]=arguments[e],e++;d=a-h.length;return h.length>=a?c.apply(this,h):_arity$1$$module$node_modules$rambda$dist$rambda_mjs(d,_curryN$$module$node_modules$rambda$dist$rambda_mjs(a,h,c))}}\nfunction _arity$1$$module$node_modules$rambda$dist$rambda_mjs(a,b){switch(a){case 0:return function(){return b.apply(this,arguments)};case 1:return function(c){return b.apply(this,arguments)};case 2:return function(c,d){return b.apply(this,arguments)};case 3:return function(c,d,e){return b.apply(this,arguments)};case 4:return function(c,d,e,f){return b.apply(this,arguments)};case 5:return function(c,d,e,f,g){return b.apply(this,arguments)};case 6:return function(c,d,e,f,g,h){return b.apply(this,arguments)};\ncase 7:return function(c,d,e,f,g,h,k){return b.apply(this,arguments)};case 8:return function(c,d,e,f,g,h,k,l){return b.apply(this,arguments)};case 9:return function(c,d,e,f,g,h,k,l,m){return b.apply(this,arguments)};default:return function(c,d,e,f,g,h,k,l,m,n){return b.apply(this,arguments)}}}\nfunction curryN$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>curryN$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(10<a)throw Error("First argument to _arity must be a non-negative integer no greater than ten");return _arity$1$$module$node_modules$rambda$dist$rambda_mjs(a,_curryN$$module$node_modules$rambda$dist$rambda_mjs(a,[],b))}\nfunction bind$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>bind$$module$node_modules$rambda$dist$rambda_mjs(a,c):curryN$$module$node_modules$rambda$dist$rambda_mjs(a.length,(...c)=>a.apply(b,c))}function both$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>both$$module$node_modules$rambda$dist$rambda_mjs(a,c):(...c)=>a(...c)&&b(...c)}\nfunction chain$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>chain$$module$node_modules$rambda$dist$rambda_mjs(a,c):[].concat(...b.map(a))}function clampFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(a>b)throw Error("min must not be greater than max in clamp(min, max, value)");if(c>=a&&c<=b)return c;if(c>b)return b;if(c<a)return a}const clamp$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(clampFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction clone$$module$node_modules$rambda$dist$rambda_mjs(a){const b=isArray$$module$node_modules$rambda$dist$rambda_mjs(a)?Array(a.length):{};if(a&&a.getTime)return new Date(a.getTime());for(const c in a){const d=a[c];b[c]="object"===typeof d&&null!==d?d.getTime?new Date(d.getTime()):clone$$module$node_modules$rambda$dist$rambda_mjs(d):d}return b}function complement$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>!a(...b)}\nclass ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs{constructor(a){this.value=a}}function reduceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(c))throw new TypeError("reduce: list must be array or iterable");let d=0;const e=c.length;for(;d<e;){b=a(b,c[d],d,c);if(b instanceof ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs)return b.value;d++}return b}\nconst reduce$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(reduceFn$$module$node_modules$rambda$dist$rambda_mjs),reduceStopper$$module$node_modules$rambda$dist$rambda_mjs=a=>new ReduceStopper$$module$node_modules$rambda$dist$rambda_mjs(a);\nfunction _arity$$module$node_modules$rambda$dist$rambda_mjs(a,b){switch(a){case 0:return function(){return b.apply(this,arguments)};case 1:return function(c){return b.apply(this,arguments)};case 2:return function(c,d){return b.apply(this,arguments)};case 3:return function(c,d,e){return b.apply(this,arguments)};case 4:return function(c,d,e,f){return b.apply(this,arguments)};case 5:return function(c,d,e,f,g){return b.apply(this,arguments)};case 6:return function(c,d,e,f,g,h){return b.apply(this,arguments)};\ncase 7:return function(c,d,e,f,g,h,k){return b.apply(this,arguments)};case 8:return function(c,d,e,f,g,h,k,l){return b.apply(this,arguments)};case 9:return function(c,d,e,f,g,h,k,l,m){return b.apply(this,arguments)};case 10:return function(c,d,e,f,g,h,k,l,m,n){return b.apply(this,arguments)};default:throw Error("First argument to _arity must be a non-negative integer no greater than ten");}}\nfunction _pipe$$module$node_modules$rambda$dist$rambda_mjs(a,b){return function(){return b.call(this,a.apply(this,arguments))}}\nfunction pipe$$module$node_modules$rambda$dist$rambda_mjs(){if(0===arguments.length)throw Error("pipe requires at least one argument");return _arity$$module$node_modules$rambda$dist$rambda_mjs(arguments[0].length,reduceFn$$module$node_modules$rambda$dist$rambda_mjs(_pipe$$module$node_modules$rambda$dist$rambda_mjs,arguments[0],Array.prototype.slice.call(arguments,1,Infinity)))}\nfunction compose$$module$node_modules$rambda$dist$rambda_mjs(){if(0===arguments.length)throw Error("compose requires at least one argument");return pipe$$module$node_modules$rambda$dist$rambda_mjs.apply(this,Array.prototype.slice.call(arguments,0).reverse())}function concat$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>concat$$module$node_modules$rambda$dist$rambda_mjs(a,c):"string"===typeof a?`${a}${b}`:[...a,...b]}\nfunction cond$$module$node_modules$rambda$dist$rambda_mjs(a){return b=>{let c=!1,d;a.forEach(([e,f])=>{!c&&e(b)&&(c=!0,d=f(b))});return d}}const {keys:keys$1$$module$node_modules$rambda$dist$rambda_mjs}=Object;function mapArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){let d=0;const e=Array(b.length);for(;d<b.length;)e[d]=c?a(b[d],d):a(b[d]),d++;return e}\nfunction mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,g);let c=0;const d=keys$1$$module$node_modules$rambda$dist$rambda_mjs(b),e=d.length,f={};for(;c<e;){const g=d[c];f[g]=a(b[g],g,b);c++}return f}const mapObjIndexed$$module$node_modules$rambda$dist$rambda_mjs=mapObject$$module$node_modules$rambda$dist$rambda_mjs;\nfunction map$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>map$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!b)throw Error(INCORRECT_ITERABLE_INPUT);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?mapArray$$module$node_modules$rambda$dist$rambda_mjs(a,b):mapObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}\nfunction max$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>max$$module$node_modules$rambda$dist$rambda_mjs(a,c):b>a?b:a}\nfunction converge$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>converge$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=reduce$$module$node_modules$rambda$dist$rambda_mjs((d,e)=>max$$module$node_modules$rambda$dist$rambda_mjs(d,e.length),0,b);return curryN$$module$node_modules$rambda$dist$rambda_mjs(c,function(){return a.apply(this,map$$module$node_modules$rambda$dist$rambda_mjs(d=>d.apply(this,arguments),b))})}\nfunction count$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>count$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?b.filter(c=>a(c)).length:0}function countBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>countBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c={};b.forEach(d=>{d=a(d);c[d]?c[d]++:c[d]=1});return c}\nconst dec$$module$node_modules$rambda$dist$rambda_mjs=a=>a-1;function isFalsy$$module$node_modules$rambda$dist$rambda_mjs(a){return void 0===a||null===a||!0===Number.isNaN(a)}function defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,c):isFalsy$$module$node_modules$rambda$dist$rambda_mjs(b)?a:b}\nfunction type$$module$node_modules$rambda$dist$rambda_mjs(a){if(null===a)return"Null";if(void 0===a)return"Undefined";if(Number.isNaN(a))return"NaN";a=Object.prototype.toString.call(a).slice(8,-1);return"AsyncFunction"===a?"Promise":a}\nfunction _lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`Cannot read property \'indexOf\' of ${b}`);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(!["Object","Array","NaN","RegExp"].includes(c))return b.lastIndexOf(a);({length:c}=b);let d=-1;for(;-1<--c&&-1===d;)equals$$module$node_modules$rambda$dist$rambda_mjs(b[c],a)&&(d=c);return d}\nfunction _indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`Cannot read property \'indexOf\' of ${b}`);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(!["Object","Array","NaN","RegExp"].includes(c))return b.indexOf(a);let d=c=-1;const {length:e}=b;for(;++c<e&&-1===d;)equals$$module$node_modules$rambda$dist$rambda_mjs(b[c],a)&&(d=c);return d}\nfunction _arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(a){const b=[];let c;for(;!(c=a.next()).done;)b.push(c.value);return b}function _equalsSets$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(a.size!==b.size)return!1;a=_arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(a.values());const c=_arrayFromIterator$$module$node_modules$rambda$dist$rambda_mjs(b.values());return 0===a.filter(d=>-1===_indexOf$$module$node_modules$rambda$dist$rambda_mjs(d,c)).length}\nfunction parseError$$module$node_modules$rambda$dist$rambda_mjs(a){const b=a.__proto__.toString();return["Error","TypeError"].includes(b)?[b,a.message]:[]}function parseDate$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toDateString?[!0,a.getTime()]:[!1]}function parseRegex$$module$node_modules$rambda$dist$rambda_mjs(a){return a.constructor!==RegExp?[!1]:[!0,a.toString()]}\nfunction equals$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>equals$$module$node_modules$rambda$dist$rambda_mjs(a,f);var c=type$$module$node_modules$rambda$dist$rambda_mjs(a);if(c!==type$$module$node_modules$rambda$dist$rambda_mjs(b))return!1;if("Function"===c)return void 0===a.name?!1:a.name===b.name;if(["NaN","Undefined","Null"].includes(c))return!0;if("Number"===c)return Object.is(-0,a)!==Object.is(-0,b)?!1:a.toString()===b.toString();if(["String","Boolean"].includes(c))return a.toString()===\nb.toString();if("Array"===c){c=Array.from(a);const f=Array.from(b);if(c.toString()!==f.toString())return!1;let g=!0;c.forEach((h,k)=>{g&&(h===f[k]||equals$$module$node_modules$rambda$dist$rambda_mjs(h,f[k])||(g=!1))});return g}var d=parseRegex$$module$node_modules$rambda$dist$rambda_mjs(a),e=parseRegex$$module$node_modules$rambda$dist$rambda_mjs(b);if(d[0])return e[0]?d[1]===e[1]:!1;if(e[0])return!1;d=parseDate$$module$node_modules$rambda$dist$rambda_mjs(a);e=parseDate$$module$node_modules$rambda$dist$rambda_mjs(b);\nif(d[0])return e[0]?d[1]===e[1]:!1;if(e[0])return!1;d=parseError$$module$node_modules$rambda$dist$rambda_mjs(a);e=parseError$$module$node_modules$rambda$dist$rambda_mjs(b);if(d[0])return e[0]?d[0]===e[0]&&d[1]===e[1]:!1;if("Set"===c)return _equalsSets$$module$node_modules$rambda$dist$rambda_mjs(a,b);if("Object"===c){c=Object.keys(a);if(c.length!==Object.keys(b).length)return!1;let f=!0;c.forEach(g=>{if(f){const h=a[g];g=b[g];h===g||equals$$module$node_modules$rambda$dist$rambda_mjs(h,g)||(f=!1)}});\nreturn f}return!1}function includes$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>includes$$module$node_modules$rambda$dist$rambda_mjs(a,c);if("string"===typeof b)return b.includes(a);if(!b)throw new TypeError(`Cannot read property \\\'indexOf\\\' of ${b}`);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?-1<_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b):!1}\nclass _Set$$module$node_modules$rambda$dist$rambda_mjs{constructor(){this.set=new Set;this.items={}}checkUniqueness(a){var b=type$$module$node_modules$rambda$dist$rambda_mjs(a);return["Null","Undefined","NaN"].includes(b)?b in this.items?!1:this.items[b]=!0:["Object","Array"].includes(b)?b in this.items?-1===_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,this.items[b])?(this.items[b].push(a),!0):!1:(this.items[b]=[a],!0):(b=this.set.size,this.set.add(a),this.set.size!==b)}}\nfunction uniq$$module$node_modules$rambda$dist$rambda_mjs(a){const b=new _Set$$module$node_modules$rambda$dist$rambda_mjs,c=[];a.forEach(d=>{b.checkUniqueness(d)&&c.push(d)});return c}function difference$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>difference$$module$node_modules$rambda$dist$rambda_mjs(a,c):uniq$$module$node_modules$rambda$dist$rambda_mjs(a).filter(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,b))}\nfunction dissoc$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>dissoc$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(null===b||void 0===b)return{};const c={};for(const d in b)c[d]=b[d];delete c[a];return c}function divide$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>divide$$module$node_modules$rambda$dist$rambda_mjs(a,c):a/b}\nfunction drop$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>drop$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.slice(0<a?a:0)}function dropLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>dropLast$$module$node_modules$rambda$dist$rambda_mjs(a,c):0<a?b.slice(0,-a):b.slice()}\nfunction dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);if(0===b.length)return b;const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if("function"!==typeof a)throw Error(`\'predicate\' is from wrong type ${typeof a}`);if(!c&&"string"!==typeof b)throw Error(`\'iterable\' is from wrong type ${typeof b}`);let d=!1;const e=[];let f=b.length;for(;0<f;)f--,d||!1!==a(b[f])?d&&e.push(b[f]):\n(d=!0,e.push(b[f]));return c?e.reverse():e.reverse().join("")}function dropRepeats$$module$node_modules$rambda$dist$rambda_mjs(a){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error(`${a} is not a list`);const b=[];a.reduce((c,d)=>{equals$$module$node_modules$rambda$dist$rambda_mjs(c,d)||b.push(d);return d},void 0);return b}\nfunction dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw Error(`${b} is not a list`);const c=[];b.reduce((d,e)=>{if(void 0===d)return c.push(e),e;a(d,e)||c.push(e);return e},void 0);return c}\nfunction dropWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>dropWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if(!c&&"string"!==typeof b)throw Error("`iterable` is neither list nor a string");let d=!1;const e=[];let f=-1;for(;f++<b.length-1;)d?e.push(b[f]):a(b[f])||(d||(d=!0),e.push(b[f]));return c?e:e.join("")}\nfunction either$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>either$$module$node_modules$rambda$dist$rambda_mjs(a,c):(...c)=>!(!a(...c)&&!b(...c))}\nfunction endsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>endsWith$$module$node_modules$rambda$dist$rambda_mjs(a,e);if("string"===typeof b)return b.endsWith(a);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))return!1;const c=b.length-a.length;let d=!0;return a.filter((e,f)=>{if(!d)return!1;(e=equals$$module$node_modules$rambda$dist$rambda_mjs(e,b[f+c]))||(d=!1);return e}).length===a.length}\nfunction prop$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>prop$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(b)return b[a]}function eqPropsFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return equals$$module$node_modules$rambda$dist$rambda_mjs(prop$$module$node_modules$rambda$dist$rambda_mjs(a,b),prop$$module$node_modules$rambda$dist$rambda_mjs(a,c))}const eqProps$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(eqPropsFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction evolveArray$$module$node_modules$rambda$dist$rambda_mjs(a,b){return mapArray$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?a[d](c):c,b,!0)}\nfunction evolveObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return mapObject$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>{if("Object"===type$$module$node_modules$rambda$dist$rambda_mjs(c)){const e=type$$module$node_modules$rambda$dist$rambda_mjs(a[d]);return"Function"===e?a[d](c):"Object"===e?evolve$$module$node_modules$rambda$dist$rambda_mjs(a[d],c):c}return"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?a[d](c):c},b)}\nfunction evolve$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>evolve$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=type$$module$node_modules$rambda$dist$rambda_mjs(a),d=type$$module$node_modules$rambda$dist$rambda_mjs(b);if(d!==c)throw Error("iterableType !== rulesType");if(!["Object","Array"].includes(c))throw Error(`\'iterable\' and \'rules\' are from wrong type ${c}`);return"Object"===d?evolveObject$$module$node_modules$rambda$dist$rambda_mjs(a,b):evolveArray$$module$node_modules$rambda$dist$rambda_mjs(a,\nb)}function F$$module$node_modules$rambda$dist$rambda_mjs(){return!1}function filterObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={};for(const d in b)a(b[d],d,b)&&(c[d]=b[d]);return c}function filterArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){let d=0;const e=b.length,f=[];for(;d<e;)(c?a(b[d],d):a(b[d]))&&f.push(b[d]),d++;return f}\nfunction filter$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>filter$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!b)throw Error("Incorrect iterable input");return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?filterArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,!1):filterObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}\nfunction find$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>find$$module$node_modules$rambda$dist$rambda_mjs(a,e);let c=0;const d=b.length;for(;c<d;){const e=b[c];if(a(e))return e;c++}}function findIndex$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>findIndex$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=b.length;let d=-1;for(;++d<c;)if(a(b[d]))return d;return-1}\nfunction findLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>findLast$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=b.length;for(;0<=--c;)if(a(b[c]))return b[c]}function findLastIndex$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>findLastIndex$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=b.length;for(;0<=--c;)if(a(b[c]))return c;return-1}\nfunction flatten$$module$node_modules$rambda$dist$rambda_mjs(a,b){b=void 0===b?[]:b;for(let c=0;c<a.length;c++)isArray$$module$node_modules$rambda$dist$rambda_mjs(a[c])?flatten$$module$node_modules$rambda$dist$rambda_mjs(a[c],b):b.push(a[c]);return b}\nfunction flipFn$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>{if(1===b.length)return c=>a(c,b[0]);if(2===b.length)return a(b[1],b[0]);if(3===b.length)return a(b[1],b[0],b[2]);if(4===b.length)return a(b[1],b[0],b[2],b[3]);throw Error("R.flip doesn\'t work with arity > 4");}}function flip$$module$node_modules$rambda$dist$rambda_mjs(a){return flipFn$$module$node_modules$rambda$dist$rambda_mjs(a)}\nfunction forEach$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>forEach$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(void 0!==b){if(isArray$$module$node_modules$rambda$dist$rambda_mjs(b))for(var c=0,d=b.length;c<d;)a(b[c]),c++;else{c=0;d=keys$1$$module$node_modules$rambda$dist$rambda_mjs(b);const e=d.length;for(;c<e;){const f=d[c];a(b[f],f,b);c++}}return b}}\nfunction fromPairs$$module$node_modules$rambda$dist$rambda_mjs(a){const b={};a.forEach(([c,d])=>b[c]=d);return b}function groupBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>groupBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c={};for(let d=0;d<b.length;d++){const e=b[d],f=a(e);c[f]||(c[f]=[]);c[f].push(e)}return c}\nfunction groupWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b))throw new TypeError("list.reduce is not a function");const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(b);if(1===b.length)return[c];const d=[];let e=[];c.reduce((f,g,h)=>{if(0===h)return g;const k=a(f,g),l=0===e.length;h=h===b.length-1;if(k)return l&&e.push(f),e.push(g),h&&d.push(e),g;if(l)return d.push([f]),h&&d.push([g]),g;d.push(e);h&&d.push([g]);e=[];return g},\nvoid 0);return d}function has$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>has$$module$node_modules$rambda$dist$rambda_mjs(a,c):b?b.hasOwnProperty(a):!1}function createPath$$module$node_modules$rambda$dist$rambda_mjs(a,b="."){return"string"===typeof a?a.split(b):a}\nfunction path$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>path$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=b,d=0,e=createPath$$module$node_modules$rambda$dist$rambda_mjs(a);d<e.length;){if(null===c||void 0===c||null===c[e[d]])return;c=c[e[d]];d++}return c}}\nfunction hasPath$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>hasPath$$module$node_modules$rambda$dist$rambda_mjs(a,c):void 0!==path$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function head$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a[0]||"":a[0]}function _objectIs$$module$node_modules$rambda$dist$rambda_mjs(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b}const objectIs$$module$node_modules$rambda$dist$rambda_mjs=Object.is||_objectIs$$module$node_modules$rambda$dist$rambda_mjs;\nfunction identical$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>identical$$module$node_modules$rambda$dist$rambda_mjs(a,c):objectIs$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function identity$$module$node_modules$rambda$dist$rambda_mjs(a){return a}function ifElseFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return(...d)=>!0===("boolean"===typeof a?a:a(...d))?b(...d):c(...d)}\nconst ifElse$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(ifElseFn$$module$node_modules$rambda$dist$rambda_mjs),inc$$module$node_modules$rambda$dist$rambda_mjs=a=>a+1;function indexByPath$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={};for(let d=0;d<b.length;d++){const e=b[d];c[path$$module$node_modules$rambda$dist$rambda_mjs(a,e)]=e}return c}\nfunction indexBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>indexBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof a)return indexByPath$$module$node_modules$rambda$dist$rambda_mjs(a,b);const c={};for(let d=0;d<b.length;d++){const e=b[d];c[a(e)]=e}return c}\nfunction indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):_indexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function baseSlice$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){let d=-1,{length:e}=a;c=c>e?e:c;0>c&&(c+=e);e=b>c?0:c-b>>>0;b>>>=0;for(c=Array(e);++d<e;)c[d]=a[d+b];return c}\nfunction init$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a.slice(0,-1):a.length?baseSlice$$module$node_modules$rambda$dist$rambda_mjs(a,0,-1):[]}function intersection$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>intersection$$module$node_modules$rambda$dist$rambda_mjs(a,c):filter$$module$node_modules$rambda$dist$rambda_mjs(c=>includes$$module$node_modules$rambda$dist$rambda_mjs(c,a),b)}\nfunction intersperse$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>intersperse$$module$node_modules$rambda$dist$rambda_mjs(a,f);let c=-1;const d=b.length,e=[];for(;++c<d;)c===d-1?e.push(b[c]):e.push(b[c],a);return e}function is$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>is$$module$node_modules$rambda$dist$rambda_mjs(a,c):null!=b&&b.constructor===a||b instanceof a}\nfunction isEmpty$$module$node_modules$rambda$dist$rambda_mjs(a){const b=type$$module$node_modules$rambda$dist$rambda_mjs(a);return["Undefined","NaN","Number","Null"].includes(b)?!1:a?"Object"===b?0===Object.keys(a).length:"Array"===b?0===a.length:!1:!0}function isNil$$module$node_modules$rambda$dist$rambda_mjs(a){return void 0===a||null===a}\nfunction join$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>join$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.join(a)}function juxt$$module$node_modules$rambda$dist$rambda_mjs(a){return(...b)=>a.map(c=>c(...b))}function keys$$module$node_modules$rambda$dist$rambda_mjs(a){return Object.keys(a)}function last$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a[a.length-1]||"":a[a.length-1]}\nfunction lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function length$$module$node_modules$rambda$dist$rambda_mjs(a){return isArray$$module$node_modules$rambda$dist$rambda_mjs(a)||"string"===typeof a?a.length:NaN}\nfunction lens$$module$node_modules$rambda$dist$rambda_mjs(a,b){return function(c){return function(d){return c(a(d)).map(e=>b(e,d))}}}function nth$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>nth$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=0>a?b.length+a:a;return"[object String]"===Object.prototype.toString.call(b)?b.charAt(c):b[c]}\nfunction updateFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);return-1===a?c.fill(b,a):c.fill(b,a,a+1)}const update$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(updateFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction lensIndex$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(nth$$module$node_modules$rambda$dist$rambda_mjs(a),update$$module$node_modules$rambda$dist$rambda_mjs(a))}function lensPath$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(path$$module$node_modules$rambda$dist$rambda_mjs(a),assocPath$$module$node_modules$rambda$dist$rambda_mjs(a))}\nfunction lensProp$$module$node_modules$rambda$dist$rambda_mjs(a){return lens$$module$node_modules$rambda$dist$rambda_mjs(prop$$module$node_modules$rambda$dist$rambda_mjs(a),assoc$$module$node_modules$rambda$dist$rambda_mjs(a))}function match$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>match$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=b.match(a);return null===c?[]:c}\nfunction mathMod$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mathMod$$module$node_modules$rambda$dist$rambda_mjs(a,c):!isInteger$$module$node_modules$rambda$dist$rambda_mjs(a)||!isInteger$$module$node_modules$rambda$dist$rambda_mjs(b)||1>b?NaN:(a%b+b)%b}function maxByFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)>a(b)?c:b}const maxBy$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(maxByFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction sum$$module$node_modules$rambda$dist$rambda_mjs(a){return a.reduce((b,c)=>b+c,0)}function mean$$module$node_modules$rambda$dist$rambda_mjs(a){return sum$$module$node_modules$rambda$dist$rambda_mjs(a)/a.length}function median$$module$node_modules$rambda$dist$rambda_mjs(a){var b=a.length;if(0===b)return NaN;const c=2-b%2;b=(b-c)/2;return mean$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(a,0).sort((d,e)=>d===e?0:d<e?-1:1).slice(b,b+c))}\nfunction mergeRight$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mergeRight$$module$node_modules$rambda$dist$rambda_mjs(a,c):Object.assign({},a||{},b||{})}function mergeAll$$module$node_modules$rambda$dist$rambda_mjs(a){let b={};map$$module$node_modules$rambda$dist$rambda_mjs(c=>{b=mergeRight$$module$node_modules$rambda$dist$rambda_mjs(b,c)},a);return b}\nfunction mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=clone$$module$node_modules$rambda$dist$rambda_mjs(a);Object.keys(b).forEach(d=>{"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(b[d])?"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(a[d])?c[d]=mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(a[d],b[d]):c[d]=b[d]:c[d]=b[d]});return c}\nfunction mergeLeft$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>mergeLeft$$module$node_modules$rambda$dist$rambda_mjs(a,c):mergeRight$$module$node_modules$rambda$dist$rambda_mjs(b,a)}function mergeWithFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){const d={};Object.keys(b).forEach(e=>{d[e]=void 0===c[e]?b[e]:a(b[e],c[e])});Object.keys(c).forEach(e=>{void 0===d[e]&&(d[e]=void 0===b[e]?c[e]:a(b[e],c[e]))});return d}\nconst mergeWith$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(mergeWithFn$$module$node_modules$rambda$dist$rambda_mjs);function min$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>min$$module$node_modules$rambda$dist$rambda_mjs(a,c):b<a?b:a}function minByFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)<a(b)?c:b}const minBy$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(minByFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction ownKeys$$module$node_modules$rambda$dist$rambda_mjs(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}));c.push.apply(c,d)}return c}\nfunction _objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{};b%2?ownKeys$$module$node_modules$rambda$dist$rambda_mjs(Object(c),!0).forEach(function(d){_defineProperty$$module$node_modules$rambda$dist$rambda_mjs(a,d,c[d])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(c)):ownKeys$$module$node_modules$rambda$dist$rambda_mjs(Object(c)).forEach(function(d){Object.defineProperty(a,\nd,Object.getOwnPropertyDescriptor(c,d))})}return a}function _defineProperty$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c;return a}function isIterable$$module$node_modules$rambda$dist$rambda_mjs(a){return Array.isArray(a)||"Object"===type$$module$node_modules$rambda$dist$rambda_mjs(a)}\nfunction modifyFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return isIterable$$module$node_modules$rambda$dist$rambda_mjs(c)&&void 0!==c[a]?isArray$$module$node_modules$rambda$dist$rambda_mjs(c)?updateFn$$module$node_modules$rambda$dist$rambda_mjs(a,b(c[a]),c):_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},c),{},{[a]:b(c[a])}):c}const modify$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(modifyFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){a=createPath$$module$node_modules$rambda$dist$rambda_mjs(a);if(1===a.length)return _objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},c),{},{[a[0]]:b(c[a[0]])});if(void 0===path$$module$node_modules$rambda$dist$rambda_mjs(a,c))return c;b=modifyPath$$module$node_modules$rambda$dist$rambda_mjs(Array.prototype.slice.call(a,1),b,c[a[0]]);return b===c[a[0]]?c:assoc$$module$node_modules$rambda$dist$rambda_mjs(a[0],\nb,c)}const modifyPath$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs);function modulo$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>modulo$$module$node_modules$rambda$dist$rambda_mjs(a,c):a%b}\nfunction moveFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){if(0>a||0>b)throw Error("Rambda.move does not support negative indexes");if(a>c.length-1||b>c.length-1)return c;const d=cloneList$$module$node_modules$rambda$dist$rambda_mjs(c);d[a]=c[b];d[b]=c[a];return d}const move$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(moveFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction multiply$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>multiply$$module$node_modules$rambda$dist$rambda_mjs(a,c):a*b}function negate$$module$node_modules$rambda$dist$rambda_mjs(a){return-a}function none$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>none$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(let c=0;c<b.length;c++)if(a(b[c]))return!1;return!0}\nfunction not$$module$node_modules$rambda$dist$rambda_mjs(a){return!a}function objOf$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>objOf$$module$node_modules$rambda$dist$rambda_mjs(a,c):{[a]:b}}function of$$module$node_modules$rambda$dist$rambda_mjs(a){return[a]}\nfunction omit$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>omit$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(null!==b&&void 0!==b){var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={};for(const e in b)c.includes(e)||(d[e]=b[e]);return d}}\nfunction on$$module$node_modules$rambda$dist$rambda_mjs(a,b,c,d){return 3===arguments.length?e=>on$$module$node_modules$rambda$dist$rambda_mjs(a,b,c,e):2===arguments.length?(e,f)=>on$$module$node_modules$rambda$dist$rambda_mjs(a,b,e,f):a(b(c),b(d))}function onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b){let c;return function(){a&&(c=a.apply(b||this,arguments),a=null);return c}}\nfunction once$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length){const c=onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b);return curry$$module$node_modules$rambda$dist$rambda_mjs(c)}return onceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b)}function or$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>or$$module$node_modules$rambda$dist$rambda_mjs(a,c):a||b}const Identity$$module$node_modules$rambda$dist$rambda_mjs=a=>({x:a,map:b=>Identity$$module$node_modules$rambda$dist$rambda_mjs(b(a))});\nfunction overFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(d=>Identity$$module$node_modules$rambda$dist$rambda_mjs(b(d)))(c).x}const over$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(overFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction partial$$module$node_modules$rambda$dist$rambda_mjs(a,...b){const c=a.length;return(...d)=>b.length+d.length>=c?a(...b,...d):partial$$module$node_modules$rambda$dist$rambda_mjs(a,...[...b,...d])}function partialObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return c=>a(mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs(c,b))}\nfunction partitionObject$$module$node_modules$rambda$dist$rambda_mjs(a,b){const c={},d={};Object.entries(b).forEach(([e,f])=>{a(f,e)?c[e]=f:d[e]=f});return[c,d]}function partitionArray$$module$node_modules$rambda$dist$rambda_mjs(a,b,c=!1){const d=[],e=[];let f=-1;for(;f++<b.length-1;)(c?a(b[f],f):a(b[f]))?d.push(b[f]):e.push(b[f]);return[d,e]}\nfunction partition$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>partition$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?partitionArray$$module$node_modules$rambda$dist$rambda_mjs(a,b):partitionObject$$module$node_modules$rambda$dist$rambda_mjs(a,b)}\nfunction pathEqFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return equals$$module$node_modules$rambda$dist$rambda_mjs(path$$module$node_modules$rambda$dist$rambda_mjs(a,c),b)}const pathEq$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(pathEqFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction pathOrFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,path$$module$node_modules$rambda$dist$rambda_mjs(b,c))}const pathOr$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(pathOrFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction paths$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>paths$$module$node_modules$rambda$dist$rambda_mjs(a,c):a.map(c=>path$$module$node_modules$rambda$dist$rambda_mjs(c,b))}\nfunction pick$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>pick$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={},e=0;e<c.length;)c[e]in b&&(d[c[e]]=b[c[e]]),e++;return d}}\nfunction pickAll$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>pickAll$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(null!==b&&void 0!==b){for(var c=createPath$$module$node_modules$rambda$dist$rambda_mjs(a,","),d={},e=0;e<c.length;)d[c[e]]=c[e]in b?b[c[e]]:void 0,e++;return d}}\nfunction pluck$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>pluck$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=[];map$$module$node_modules$rambda$dist$rambda_mjs(d=>{void 0!==d[a]&&c.push(d[a])},b);return c}function prepend$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>prepend$$module$node_modules$rambda$dist$rambda_mjs(a,c):"string"===typeof b?[a].concat(b.split("")):[a].concat(b)}\nconst product$$module$node_modules$rambda$dist$rambda_mjs=reduce$$module$node_modules$rambda$dist$rambda_mjs(multiply$$module$node_modules$rambda$dist$rambda_mjs,1);function propEqFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c?equals$$module$node_modules$rambda$dist$rambda_mjs(b,prop$$module$node_modules$rambda$dist$rambda_mjs(a,c)):!1}const propEq$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propEqFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction propIsFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return is$$module$node_modules$rambda$dist$rambda_mjs(a,c[b])}const propIs$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propIsFn$$module$node_modules$rambda$dist$rambda_mjs);function propOrFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c?defaultTo$$module$node_modules$rambda$dist$rambda_mjs(a,c[b]):a}const propOr$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propOrFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction props$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>props$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error("propsToPick is not a list");return mapArray$$module$node_modules$rambda$dist$rambda_mjs(c=>b[c],a)}function propSatisfiesFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(prop$$module$node_modules$rambda$dist$rambda_mjs(b,c))}\nconst propSatisfies$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(propSatisfiesFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction range$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>range$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(Number.isNaN(Number(a))||Number.isNaN(Number(b)))throw new TypeError("Both arguments to range must be numbers");if(b<a)return[];const c=b-a,d=Array(c);for(let e=0;e<c;e++)d[e]=a+e;return d}\nfunction reject$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>reject$$module$node_modules$rambda$dist$rambda_mjs(a,c):filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!a(c),b)}function repeat$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>repeat$$module$node_modules$rambda$dist$rambda_mjs(a,c):Array(b).fill(a)}function replaceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c.replace(a,b)}\nconst replace$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(replaceFn$$module$node_modules$rambda$dist$rambda_mjs);function reverse$$module$node_modules$rambda$dist$rambda_mjs(a){return"string"===typeof a?a.split("").reverse().join(""):a.slice().reverse()}function setFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return over$$module$node_modules$rambda$dist$rambda_mjs(a,always$$module$node_modules$rambda$dist$rambda_mjs(b),c)}\nconst set$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(setFn$$module$node_modules$rambda$dist$rambda_mjs);function sliceFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return c.slice(a,b)}const slice$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(sliceFn$$module$node_modules$rambda$dist$rambda_mjs);\nfunction sort$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>sort$$module$node_modules$rambda$dist$rambda_mjs(a,c):cloneList$$module$node_modules$rambda$dist$rambda_mjs(b).sort(a)}function sortBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>sortBy$$module$node_modules$rambda$dist$rambda_mjs(a,c):cloneList$$module$node_modules$rambda$dist$rambda_mjs(b).sort((c,d)=>{c=a(c);d=a(d);return c===d?0:c<d?-1:1})}\nfunction split$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>split$$module$node_modules$rambda$dist$rambda_mjs(a,c):b.split(a)}function maybe$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){b=a&&"Function"===type$$module$node_modules$rambda$dist$rambda_mjs(b)?b():b;c=a||"Function"!==type$$module$node_modules$rambda$dist$rambda_mjs(c)?c:c();return a?b:c}\nfunction take$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>take$$module$node_modules$rambda$dist$rambda_mjs(a,c):0>a?b.slice():"string"===typeof b?b.slice(0,a):baseSlice$$module$node_modules$rambda$dist$rambda_mjs(b,0,a)}\nfunction splitAt$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>splitAt$$module$node_modules$rambda$dist$rambda_mjs(a,d);if(!b)throw new TypeError(`Cannot read property \'slice\' of ${b}`);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(b)&&"string"!==typeof b)return[[],[]];const c=maybe$$module$node_modules$rambda$dist$rambda_mjs(0>a,0>b.length+a?0:b.length+a,a);return[take$$module$node_modules$rambda$dist$rambda_mjs(c,b),drop$$module$node_modules$rambda$dist$rambda_mjs(c,\nb)]}function splitEvery$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>splitEvery$$module$node_modules$rambda$dist$rambda_mjs(a,e);if(1>a)throw Error("First argument to splitEvery must be a positive integer");const c=[];let d=0;for(;d<b.length;)c.push(b.slice(d,d+=a));return c}\nfunction splitWhen$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>splitWhen$$module$node_modules$rambda$dist$rambda_mjs(a,g);if(!b)throw new TypeError(`Cannot read property \'length\' of ${b}`);const c=[],d=[];let e=!1,f=-1;for(;f++<b.length-1;)e?d.push(b[f]):a(b[f])?(d.push(b[f]),e=!0):c.push(b[f]);return[c,d]}\nfunction startsWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>startsWith$$module$node_modules$rambda$dist$rambda_mjs(a,d);if("string"===typeof b)return b.startsWith(a);if(!isArray$$module$node_modules$rambda$dist$rambda_mjs(a))return!1;let c=!0;return a.filter((d,e)=>{if(!c)return!1;(d=equals$$module$node_modules$rambda$dist$rambda_mjs(d,b[e]))||(c=!1);return d}).length===a.length}\nfunction subtract$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>subtract$$module$node_modules$rambda$dist$rambda_mjs(a,c):a-b}\nfunction symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs(a,c):concat$$module$node_modules$rambda$dist$rambda_mjs(filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,b),a),filter$$module$node_modules$rambda$dist$rambda_mjs(c=>!includes$$module$node_modules$rambda$dist$rambda_mjs(c,a),b))}\nfunction T$$module$node_modules$rambda$dist$rambda_mjs(){return!0}function tail$$module$node_modules$rambda$dist$rambda_mjs(a){return drop$$module$node_modules$rambda$dist$rambda_mjs(1,a)}\nfunction takeLast$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>takeLast$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=b.length;if(0>a)return b.slice();let d=a>c?c:a;return"string"===typeof b?b.slice(c-d):baseSlice$$module$node_modules$rambda$dist$rambda_mjs(b,c-d,c)}\nfunction takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return f=>takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs(a,f);if(0===b.length)return b;let c=!1;const d=[];let e=b.length;for(;!c||0===e;)e--,!1===a(b[e])?c=!0:c||d.push(b[e]);return isArray$$module$node_modules$rambda$dist$rambda_mjs(b)?d.reverse():d.reverse().join("")}\nfunction takeWhile$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return g=>takeWhile$$module$node_modules$rambda$dist$rambda_mjs(a,g);const c=isArray$$module$node_modules$rambda$dist$rambda_mjs(b);if(!c&&"string"!==typeof b)throw Error("`iterable` is neither list nor a string");let d=!0;const e=[];let f=-1;for(;f++<b.length-1;)a(b[f])?d&&e.push(b[f]):d&&(d=!1);return c?e:e.join("")}\nfunction tap$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>tap$$module$node_modules$rambda$dist$rambda_mjs(a,c);a(b);return b}function test$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>test$$module$node_modules$rambda$dist$rambda_mjs(a,c);if("string"===typeof a)throw new TypeError(`\\u2018test\\u2019 requires a value of type RegExp as its first argument; received "${a}"`);return-1!==b.search(a)}\nfunction times$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return c=>times$$module$node_modules$rambda$dist$rambda_mjs(a,c);if(!isInteger$$module$node_modules$rambda$dist$rambda_mjs(b)||0>b)throw new RangeError("n must be an integer");return map$$module$node_modules$rambda$dist$rambda_mjs(a,range$$module$node_modules$rambda$dist$rambda_mjs(0,b))}function toLower$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toLowerCase()}\nfunction toPairs$$module$node_modules$rambda$dist$rambda_mjs(a){return Object.entries(a)}function toString$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toString()}function toUpper$$module$node_modules$rambda$dist$rambda_mjs(a){return a.toUpperCase()}function transpose$$module$node_modules$rambda$dist$rambda_mjs(a){return a.reduce((b,c)=>{c.forEach((d,e)=>isArray$$module$node_modules$rambda$dist$rambda_mjs(b[e])?b[e].push(d):b.push([d]));return b},[])}\nfunction trim$$module$node_modules$rambda$dist$rambda_mjs(a){return a.trim()}const isFunction$$module$node_modules$rambda$dist$rambda_mjs=a=>["Promise","Function"].includes(type$$module$node_modules$rambda$dist$rambda_mjs(a));\nfunction tryCatch$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(!isFunction$$module$node_modules$rambda$dist$rambda_mjs(a))throw Error(`R.tryCatch | fn \'${a}\'`);const c=isFunction$$module$node_modules$rambda$dist$rambda_mjs(b);return(...d)=>{try{return a(...d)}catch(e){return c?b(e,...d):b}}}function unapply$$module$node_modules$rambda$dist$rambda_mjs(a){return function(...b){return a.call(this,b)}}\nfunction union$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>union$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=cloneList$$module$node_modules$rambda$dist$rambda_mjs(a);b.forEach(d=>{includes$$module$node_modules$rambda$dist$rambda_mjs(d,a)||c.push(d)});return c}\nfunction uniqBy$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>uniqBy$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=new Set;return b.filter(d=>{if(c.has(a(d)))return!1;c.add(a(d));return!0})}function includesWith$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){let d=!1,e=-1;for(;++e<c.length&&!d;)a(b,c[e])&&(d=!0);return d}\nfunction uniqWith$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>uniqWith$$module$node_modules$rambda$dist$rambda_mjs(a,e);let c=-1;const d=[];for(;++c<b.length;){const e=b[c];includesWith$$module$node_modules$rambda$dist$rambda_mjs(a,e,d)||d.push(e)}return d}function unless$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>unless$$module$node_modules$rambda$dist$rambda_mjs(a,c):c=>a(c)?c:b(c)}\nfunction unwind$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>unwind$$module$node_modules$rambda$dist$rambda_mjs(a,c):isArray$$module$node_modules$rambda$dist$rambda_mjs(b[a])?mapArray$$module$node_modules$rambda$dist$rambda_mjs(c=>_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs(_objectSpread2$$module$node_modules$rambda$dist$rambda_mjs({},b),{},{[a]:c}),b[a]):[b]}\nfunction values$$module$node_modules$rambda$dist$rambda_mjs(a){return"Object"!==type$$module$node_modules$rambda$dist$rambda_mjs(a)?[]:Object.values(a)}const Const$$module$node_modules$rambda$dist$rambda_mjs=a=>({x:a,map:b=>Const$$module$node_modules$rambda$dist$rambda_mjs(a)});function view$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>view$$module$node_modules$rambda$dist$rambda_mjs(a,c):a(Const$$module$node_modules$rambda$dist$rambda_mjs)(b).x}\nfunction whenFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return a(c)?b(c):c}const when$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(whenFn$$module$node_modules$rambda$dist$rambda_mjs);function where$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(void 0===b)return d=>where$$module$node_modules$rambda$dist$rambda_mjs(a,d);let c=!0;for(const d in a){if(!c)continue;const e=a[d](b[d]);c&&!1===e&&(c=!1)}return c}\nfunction whereAny$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(void 0===b)return c=>whereAny$$module$node_modules$rambda$dist$rambda_mjs(a,c);for(const c in a)if(a[c](b[c]))return!0;return!1}\nfunction whereEq$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return d=>whereEq$$module$node_modules$rambda$dist$rambda_mjs(a,d);const c=filter$$module$node_modules$rambda$dist$rambda_mjs((d,e)=>equals$$module$node_modules$rambda$dist$rambda_mjs(d,b[e]),a);return Object.keys(c).length===Object.keys(a).length}\nfunction without$$module$node_modules$rambda$dist$rambda_mjs(a,b){return void 0===b?c=>without$$module$node_modules$rambda$dist$rambda_mjs(a,c):reduce$$module$node_modules$rambda$dist$rambda_mjs((c,d)=>-1<_indexOf$$module$node_modules$rambda$dist$rambda_mjs(d,a)?c:c.concat(d),[],b)}function xor$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>xor$$module$node_modules$rambda$dist$rambda_mjs(a,c):!!a&&!b||!!b&&!a}\nfunction zip$$module$node_modules$rambda$dist$rambda_mjs(a,b){if(1===arguments.length)return e=>zip$$module$node_modules$rambda$dist$rambda_mjs(a,e);const c=[],d=Math.min(a.length,b.length);for(let e=0;e<d;e++)c[e]=[a[e],b[e]];return c}function zipObj$$module$node_modules$rambda$dist$rambda_mjs(a,b){return 1===arguments.length?c=>zipObj$$module$node_modules$rambda$dist$rambda_mjs(a,c):take$$module$node_modules$rambda$dist$rambda_mjs(b.length,a).reduce((c,d,e)=>{c[d]=b[e];return c},{})}\nfunction zipWithFn$$module$node_modules$rambda$dist$rambda_mjs(a,b,c){return take$$module$node_modules$rambda$dist$rambda_mjs(b.length>c.length?c.length:b.length,b).map((d,e)=>a(d,c[e]))}const zipWith$$module$node_modules$rambda$dist$rambda_mjs=curry$$module$node_modules$rambda$dist$rambda_mjs(zipWithFn$$module$node_modules$rambda$dist$rambda_mjs);var module$node_modules$rambda$dist$rambda_mjs={};module$node_modules$rambda$dist$rambda_mjs.F=F$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.T=T$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.__findHighestArity=__findHighestArity$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._arity=_arity$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._indexOf=_indexOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs._lastIndexOf=_lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs._pipe=_pipe$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.add=add$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.adjust=adjust$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.all=all$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.allPass=allPass$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.always=always$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.and=and$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.any=any$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.anyPass=anyPass$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.append=append$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.apply=apply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.applySpec=applySpec$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.assoc=assoc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.assocPath=assocPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.bind=bind$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.both=both$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.chain=chain$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.clamp=clamp$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.clone=clone$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.complement=complement$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.compose=compose$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.concat=concat$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.cond=cond$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.converge=converge$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.count=count$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.countBy=countBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.curry=curry$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.curryN=curryN$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dec=dec$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.defaultTo=defaultTo$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.difference=difference$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dissoc=dissoc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.divide=divide$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.drop=drop$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropLast=dropLast$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.dropLastWhile=dropLastWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropRepeats=dropRepeats$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropRepeatsWith=dropRepeatsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.dropWhile=dropWhile$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.either=either$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.endsWith=endsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.eqProps=eqProps$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.equals=equals$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.evolve=evolve$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.evolveArray=evolveArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.evolveObject=evolveObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filter=filter$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filterArray=filterArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.filterObject=filterObject$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.find=find$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findIndex=findIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findLast=findLast$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.findLastIndex=findLastIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.flatten=flatten$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.flip=flip$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.forEach=forEach$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.fromPairs=fromPairs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.groupBy=groupBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.groupWith=groupWith$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.has=has$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.hasPath=hasPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.head=head$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.identical=identical$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.identity=identity$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.ifElse=ifElse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.inc=inc$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.includes=includes$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.indexBy=indexBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.indexOf=indexOf$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.init=init$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.intersection=intersection$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.intersperse=intersperse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.is=is$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.isEmpty=isEmpty$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.isNil=isNil$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.join=join$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.juxt=juxt$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.keys=keys$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.last=last$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.lastIndexOf=lastIndexOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.length=length$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lens=lens$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lensIndex=lensIndex$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.lensPath=lensPath$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.lensProp=lensProp$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.map=map$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapArray=mapArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapObjIndexed=mapObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mapObject=mapObject$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.match=match$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mathMod=mathMod$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.max=max$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.maxBy=maxBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.maxByFn=maxByFn$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.mean=mean$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.median=median$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.merge=mergeRight$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeAll=mergeAll$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeDeepRight=mergeDeepRight$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.mergeLeft=mergeLeft$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeRight=mergeRight$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.mergeWith=mergeWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.min=min$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.minBy=minBy$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.minByFn=minByFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modify=modify$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modifyPath=modifyPath$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modifyPathFn=modifyPathFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.modulo=modulo$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.move=move$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.multiply=multiply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.negate=negate$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.none=none$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.not=not$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.nth=nth$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.objOf=objOf$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.of=of$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.omit=omit$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.on=on$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.once=once$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.or=or$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.over=over$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partial=partial$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partialObject=partialObject$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.partition=partition$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partitionArray=partitionArray$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.partitionObject=partitionObject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.path=path$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pathEq=pathEq$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.pathOr=pathOr$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.paths=paths$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pick=pick$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pickAll=pickAll$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.pipe=pipe$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.pluck=pluck$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.prepend=prepend$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.product=product$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.prop=prop$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propEq=propEq$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.propIs=propIs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propOr=propOr$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.propSatisfies=propSatisfies$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.props=props$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.range=range$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.reduce=reduce$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reduceFn=reduceFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reduceStopper=reduceStopper$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reject=reject$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.repeat=repeat$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.replace=replace$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.reverse=reverse$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.set=set$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.slice=slice$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.sort=sort$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.sortBy=sortBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.split=split$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitAt=splitAt$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitEvery=splitEvery$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.splitWhen=splitWhen$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.startsWith=startsWith$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.subtract=subtract$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.sum=sum$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.symmetricDifference=symmetricDifference$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tail=tail$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.take=take$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeLast=takeLast$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeLastWhile=takeLastWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.takeWhile=takeWhile$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tap=tap$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.test=test$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.times=times$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toLower=toLower$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toPairs=toPairs$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.toString=toString$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.toUpper=toUpper$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.transpose=transpose$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.trim=trim$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.tryCatch=tryCatch$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.type=type$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.unapply=unapply$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.union=union$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniq=uniq$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniqBy=uniqBy$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.uniqWith=uniqWith$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.unless=unless$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.unwind=unwind$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.update=update$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.updateFn=updateFn$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.values=values$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.view=view$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.when=when$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.where=where$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.whereAny=whereAny$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.whereEq=whereEq$$module$node_modules$rambda$dist$rambda_mjs;\nmodule$node_modules$rambda$dist$rambda_mjs.without=without$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.xor=xor$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zip=zip$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zipObj=zipObj$$module$node_modules$rambda$dist$rambda_mjs;module$node_modules$rambda$dist$rambda_mjs.zipWith=zipWith$$module$node_modules$rambda$dist$rambda_mjs;let startPromize$$module$src$workers$old_spn_worker;\nconst getAudioContext$$module$src$workers$old_spn_worker=a=>window[a]||window.parent[`__csound_wasm_iframe_parent_${a}`]||newAudioContext$$module$src$utils$new_audio_context(),closeAndDeleteContext$$module$src$workers$old_spn_worker=async a=>{const b=window[a],c=window.parent[`__csound_wasm_iframe_parent_${a}`];if(b){if("closed"!==b.state)try{await b.close()}catch(d){}delete window[a]}if(c){if(b!==c&&"closed"!==c.state)try{await c.close()}catch(d){}delete window.parent[`__csound_wasm_iframe_parent_${a}`]}},getAudioNode$$module$src$workers$old_spn_worker=\na=>window[a+"Node"]||window.parent[`__csound_wasm_iframe_parent_${a}Node`],setAudioNode$$module$src$workers$old_spn_worker=(a,b)=>{window[a]?window[`${a}Node`]=b:window.parent[`__csound_wasm_iframe_parent_${a}Node`]=b},disconnectAudioNode$$module$src$workers$old_spn_worker=a=>{(a=getAudioNode$$module$src$workers$old_spn_worker(a))&&a.disconnect()},deleteAudioNode$$module$src$workers$old_spn_worker=a=>{window[a+"Node"]&&delete window[a+"Node"];window.parent[`__csound_wasm_iframe_parent_${a}Node`]&&\ndelete window.parent[`__csound_wasm_iframe_parent_${a}Node`]},PERIODS$$module$src$workers$old_spn_worker=4,spnInstances$$module$src$workers$old_spn_worker=new Map;\nclass CsoundScriptNodeProcessor$$module$src$workers$old_spn_worker{constructor({audioContext:a,contextUid:b,hardwareBufferSize:c,softwareBufferSize:d,inputsCount:e,outputsCount:f,sampleRate:g,audioContextIsProvided:h,autoConnect:k}){this.autoConnect=k;this.audioContextIsProvided=h;this.hardwareBufferSize=c;this.softwareBufferSize=d;this.inputsCount=e;this.outputsCount=f;this.sampleRate=g;this.vanillaOutputChannels=[];this.vanillaInputChannels=[];this.pendingFrames=this.vanillaAvailableFrames=this.vanillaInputReadIndex=\nthis.vanillaOutputReadIndex=0;this.vanillaFirstTransferDone=this.vanillaInitialized=!1;this.vanillaInputChannels=instantiateAudioPacket$$module$src$workers$common_utils(e,c);this.vanillaOutputChannels=instantiateAudioPacket$$module$src$workers$common_utils(f,c);this.audioContext=a;this.contextUid=b;this.scriptNode=this.audioContext.createScriptProcessor(this.softwareBufferSize,e,f);this.process=this.process.bind(this);a=this.process.bind(this);this.scriptNode.onaudioprocess=a;this.autoConnect?setAudioNode$$module$src$workers$old_spn_worker(b,\nthis.scriptNode.connect(this.audioContext.destination)):setAudioNode$$module$src$workers$old_spn_worker(b,this.scriptNode.context.destination);this.updateVanillaFrames=this.updateVanillaFrames.bind(this);this.initCallbacks=this.initCallbacks.bind(this)}async initCallbacks({workerMessagePort:a,transferInputFrames:b,requestPort:c}){this.workerMessagePort=a;this.transferInputFrames=b;this.requestPort=c;if("suspended"===this.audioContext.state){for(a=0;100>a;)if(await new Promise(d=>setTimeout(d,100)),\n"suspended"===this.audioContext.state)a+=1;else return;this.workerMessagePort.broadcastPlayState("realtimePerformancePaused")}}updateVanillaFrames({audioPacket:a,numFrames:b,readIndex:c}){this.pendingFrames-=b;if(a){for(let d=0;d<this.outputsCount;++d){let e=!1,f=b;(c+b)%this.hardwareBufferSize<c&&(e=!0,f=this.hardwareBufferSize-c);this.vanillaOutputChannels[d].set(a[d].subarray(0,f),c);e&&this.vanillaOutputChannels[d].set(a[d].subarray(f))}this.vanillaAvailableFrames+=b}this.vanillaFirstTransferDone||\n(this.vanillaFirstTransferDone=!0,startPromize$$module$src$workers$old_spn_worker&&startPromize$$module$src$workers$old_spn_worker())}process({inputBuffer:a,outputBuffer:b}){if("realtimePerformanceEnded"===this.workerMessagePort.vanillaWorkerState)return setPlayState$$module$src$workers$old_spn_worker({contextUid:this.contextUid,newPlayState:"realtimePerformanceEnded"}),!0;if(!this.vanillaInitialized){var c=this.softwareBufferSize*PERIODS$$module$src$workers$old_spn_worker;this.requestPort.postMessage({readIndex:0,\nnumFrames:c});this.pendingFrames+=c;return this.vanillaInitialized=!0}if(!this.vanillaFirstTransferDone)return!0;c=range$$module$node_modules$rambda$dist$rambda_mjs(0,this.inputsCount).map(h=>a.getChannelData(h));const d=range$$module$node_modules$rambda$dist$rambda_mjs(0,this.outputsCount).map(h=>b.getChannelData(h));var e=0<c.length;const f=(this.vanillaOutputReadIndex+d[0].length)%this.hardwareBufferSize,g=e?(this.vanillaInputReadIndex+c[0].length)%this.hardwareBufferSize:0;if("realtimePerformanceStarted"!==\nthis.workerMessagePort.vanillaWorkerState&&"realtimePerformanceResumed"!==this.workerMessagePort.vanillaWorkerState)return d.forEach(h=>{h.fill(0)}),!0;if(this.vanillaAvailableFrames>=d[0].length){d.forEach((h,k)=>{h.set(this.vanillaOutputChannels[k].subarray(this.vanillaOutputReadIndex,f<this.vanillaOutputReadIndex?this.hardwareBufferSize:f))});if(0<this.inputsCount&&e&&0<c[0].length&&(e=this.softwareBufferSize*PERIODS$$module$src$workers$old_spn_worker,c.forEach((h,k)=>{this.vanillaInputChannels[k].set(h,\nthis.vanillaInputReadIndex)}),0===g%e)){const h=[],k=(0===g?this.hardwareBufferSize:g)-e,l=0===g?this.hardwareBufferSize:g;this.vanillaInputChannels.forEach(m=>{h.push(m.subarray(k,l))});this.transferInputFrames(h)}this.vanillaOutputReadIndex=f;this.vanillaInputReadIndex=g;this.vanillaAvailableFrames-=d[0].length;this.bufferUnderrunCount=0}else 1<this.bufferUnderrunCount&&12>this.bufferUnderrunCount&&(this.workerMessagePort.post("Buffer underrun"),this.bufferUnderrunCount+=1),100===this.bufferUnderrunCount&&\n(this.workerMessagePort.post("FATAL: 100 buffers failed in a row"),this.workerMessagePort.broadcastPlayState("realtimePerformanceEnded"));this.vanillaAvailableFrames<this.softwareBufferSize*PERIODS$$module$src$workers$old_spn_worker&&this.pendingFrames<this.softwareBufferSize*PERIODS$$module$src$workers$old_spn_worker&&(this.requestPort.postMessage({readIndex:(this.vanillaAvailableFrames+f+this.pendingFrames)%this.hardwareBufferSize,numFrames:this.softwareBufferSize*PERIODS$$module$src$workers$old_spn_worker}),\nthis.pendingFrames+=this.softwareBufferSize*PERIODS$$module$src$workers$old_spn_worker);return!0}}\nconst initAudioInputPort$$module$src$workers$old_spn_worker=({audioInputPort:a})=>b=>a.postMessage(b),initMessagePort$$module$src$workers$old_spn_worker=({port:a})=>{const b=new $jscompDefaultExport$$module$src$utils$message_port_state;b.post=c=>a.postMessage({log:c});b.broadcastPlayState=c=>{"realtimePerformanceStarted"===b.vanillaWorkerState&&"realtimePerformanceStarted"===c||a.postMessage({playStateChange:c})};b.ready=!0;return b},initRequestPort$$module$src$workers$old_spn_worker=({requestPort:a,\nspnClassInstance:b})=>{a.addEventListener("message",c=>{const {audioPacket:d,readIndex:e,numFrames:f}=c.data;b.updateVanillaFrames({audioPacket:d,numFrames:f,readIndex:e})});a.start();return a},setPlayState$$module$src$workers$old_spn_worker=async({contextUid:a,newPlayState:b})=>{const c=spnInstances$$module$src$workers$old_spn_worker.get(a);c&&("resume"===b?("suspended"===c.audioContext.state&&c.audioContext.resume(),"running"===c.audioContext.state&&c.workerMessagePort.broadcastPlayState("realtimePerformanceResumed")):\nc.workerMessagePort&&("realtimePerformanceEnded"===b&&"realtimePerformanceEnded"!==c.workerMessagePort.vanillaWorkerState?(c.workerMessagePort.broadcastPlayState("realtimePerformanceEnded"),c.autoConnect&&disconnectAudioNode$$module$src$workers$old_spn_worker(a),deleteAudioNode$$module$src$workers$old_spn_worker(a),spnInstances$$module$src$workers$old_spn_worker.delete(a),c.autoConnect&&!c.audioContextIsProvided&&closeAndDeleteContext$$module$src$workers$old_spn_worker(a)):"realtimePerformanceResumed"===\nb&&"suspended"===c.audioContext.state&&c.audioContext.resume(),c.workerMessagePort.vanillaWorkerState=b))},initialize$$module$src$workers$old_spn_worker=async({contextUid:a,hardwareBufferSize:b,softwareBufferSize:c,inputsCount:d,outputsCount:e,sampleRate:f,audioInputPort:g,messagePort:h,requestPort:k,audioContextIsProvided:l,autoConnect:m,initialPlayState:n})=>{logOldSpnWorker$$module$src$logger("initializing old-spn worker in iframe")();startPromize$$module$src$workers$old_spn_worker=void 0;const p=\ngetAudioContext$$module$src$workers$old_spn_worker(a);b=new CsoundScriptNodeProcessor$$module$src$workers$old_spn_worker({audioContext:p,contextUid:a,hardwareBufferSize:b,softwareBufferSize:c,inputsCount:d,outputsCount:e,sampleRate:f,audioContextIsProvided:l,autoConnect:m});h=initMessagePort$$module$src$workers$old_spn_worker({port:h});g=initAudioInputPort$$module$src$workers$old_spn_worker({audioInputPort:g,spnClassInstance:b});initRequestPort$$module$src$workers$old_spn_worker({requestPort:k,spnClassInstance:b});\nb.initCallbacks({workerMessagePort:h,transferInputFrames:g,requestPort:k});spnInstances$$module$src$workers$old_spn_worker.set(a,b);if("realtimePerformanceStarted"===n)return await new Promise((q,r)=>{startPromize$$module$src$workers$old_spn_worker=q;setTimeout(()=>{if("function"===typeof startPromize$$module$src$workers$old_spn_worker)return r(Error("a call to start() timed out")),startPromize$$module$src$workers$old_spn_worker=void 0,-1},6E5)})};\nexpose$$module$node_modules$comlink$dist$esm$comlink_mjs({initialize:initialize$$module$src$workers$old_spn_worker,setPlayState:setPlayState$$module$src$workers$old_spn_worker},windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs(window.parent));var module$src$workers$old_spn_worker={};}).call(this);\n//# sourceMappingURL=__compiled.old-spn.worker.js.map\n'])),
module$dist$__compiled_old_spn_worker_inline={};module$dist$__compiled_old_spn_worker_inline.default=$jscompDefaultExport$$module$dist$__compiled_old_spn_worker_inline;let spnWorker$$module$src$mains$old_spn_main,proxyPort$$module$src$mains$old_spn_main,UID$$module$src$mains$old_spn_main=0;
class ScriptProcessorNodeMainThread$$module$src$mains$old_spn_main{constructor({audioContext:a,audioContextIsProvided:b,autoConnect:c}){this.autoConnect=c;this.audioContextIsProvided=b;this.audioContext=a;this.softwareBufferSize=this.hardwareBufferSize=this.outputsCount=this.inputsCount=this.sampleRate=this.csoundWorkerMain=this.currentPlayState=void 0;this.scriptProcessorNode=!0;logOldSpnMain$$module$src$logger("ScriptProcessorNodeMainThread was constructed")()}async terminateInstance(){window[`__csound_wasm_iframe_parent_${this.contextUid}Node`]&&
(window[`__csound_wasm_iframe_parent_${this.contextUid}Node`].disconnect(),delete window[`__csound_wasm_iframe_parent_${this.contextUid}Node`]);if(this.audioContext){if("closed"!==this.audioContext.state)try{await this.audioContext.close()}catch(a){}delete this.audioContext}proxyPort$$module$src$mains$old_spn_main&&(proxyPort$$module$src$mains$old_spn_main[releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs](),proxyPort$$module$src$mains$old_spn_main=void 0);this.iFrameElement&&this.iFrameElement.remove();
spnWorker$$module$src$mains$old_spn_main=void 0;UID$$module$src$mains$old_spn_main=0}async onPlayStateChange(a){if(this.currentPlayState!==a){switch(a){case "realtimePerformanceStarted":logOldSpnMain$$module$src$logger("event received: realtimePerformanceStarted")();this.currentPlayState=a;await this.initialize();await this.csoundWorkerMain.eventPromises.releaseStartPromise();this.publicEvents.triggerRealtimePerformanceStarted(this.csoundWorkerMain);break;case "realtimePerformanceEnded":logOldSpnMain$$module$src$logger("event received: realtimePerformanceEnded")();
window[`__csound_wasm_iframe_parent_${this.contextUid}Node`]&&(window[`__csound_wasm_iframe_parent_${this.contextUid}Node`].disconnect(),delete window[`__csound_wasm_iframe_parent_${this.contextUid}Node`]);break;case "realtimePerformancePaused":this.csoundWorkerMain&&this.csoundWorkerMain.eventPromises&&(this.csoundWorkerMain.publicEvents&&this.csoundWorkerMain.publicEvents.triggerRealtimePerformancePaused(this),await this.csoundWorkerMain.eventPromises.releasePausePromise());break;case "realtimePerformanceResumed":this.csoundWorkerMain&&
this.csoundWorkerMain.eventPromises&&(this.csoundWorkerMain.publicEvents&&this.csoundWorkerMain.publicEvents.triggerRealtimePerformanceResumed(this),await this.csoundWorkerMain.eventPromises.releaseResumePromise())}this.currentPlayState=a;!proxyPort$$module$src$mains$old_spn_main||"realtimePerformanceStarted"===a&&"renderStarted"===a||await proxyPort$$module$src$mains$old_spn_main.setPlayState({contextUid:this.contextUid,newPlayState:a})}}async initIframe(){if(void 0===window||void 0===window.document)throw new TypeError("Can only run SPN in Browser scope");
const a=window.document;var b=['<!doctype html>\n<html lang="en">\n<head>\n<meta charset="UTF-8">\n</head>\n<body>',`<script type="text/javascript" src="${$jscompDefaultExport$$module$dist$__compiled_old_spn_worker_inline()}"></script>`,"</body>"].join("\n");b=new Blob([b],{type:"text/html"});this.iFrameElement=document.createElement("iframe");this.iFrameElement.src=URL.createObjectURL(b);this.iFrameElement.sandbox.add("allow-scripts","allow-same-origin");this.iFrameElement.style.cssText="position:absolute;left:0;top:-999px;width:1px;height:1px;";
b=new Promise(c=>{this.iFrameElement.onload=()=>{c()}});a.body.append(this.iFrameElement);try{await b}catch(c){console.error(c)}spnWorker$$module$src$mains$old_spn_main=this.iFrameElement.contentWindow}async initialize(){if(!spnWorker$$module$src$mains$old_spn_main&&(await this.initIframe(),!spnWorker$$module$src$mains$old_spn_main)){console.error("SPN FATAL: Couldn't create iFrame");return}var a=`audioWorklet${UID$$module$src$mains$old_spn_main}`;this.contextUid=a;UID$$module$src$mains$old_spn_main+=
1;proxyPort$$module$src$mains$old_spn_main||(proxyPort$$module$src$mains$old_spn_main=wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(windowEndpoint$$module$node_modules$comlink$dist$esm$comlink_mjs(spnWorker$$module$src$mains$old_spn_main)));this.audioContext||(this.audioContextIsProvided&&console.error("fatal: the provided AudioContext was undefined"),this.audioContext=new (WebkitAudioContext$$module$src$utils())({sampleRate:this.sampleRate}));"closed"===this.audioContext.state&&(this.audioContextIsProvided&&
console.error("fatal: the provided AudioContext was closed, falling back new AudioContext"),this.audioContext=new (WebkitAudioContext$$module$src$utils())({sampleRate:this.sampleRate}));this.audioContextIsProvided||this.sampleRate===this.audioContext.sampleRate||(this.audioContext=new (WebkitAudioContext$$module$src$utils())({sampleRate:this.sampleRate}));spnWorker$$module$src$mains$old_spn_main[a]=this.audioContext;window[`__csound_wasm_iframe_parent_${a}`]=this.audioContext;let b;this.isRequestingInput&&
await new Promise(c=>{requestMicrophoneNode$$module$src$mains$io_utils(d=>{d&&(b=this.audioContext.createMediaStreamSource(d));c()})});logOldSpnMain$$module$src$logger("initializing proxyPort")();await proxyPort$$module$src$mains$old_spn_main.initialize(transfer$$module$node_modules$comlink$dist$esm$comlink_mjs({contextUid:a,hardwareBufferSize:32768,softwareBufferSize:2048,inputsCount:this.inputsCount,outputsCount:this.outputsCount,sampleRate:this.sampleRate,audioInputPort:this.ipcMessagePorts.audioWorkerAudioInputPort,
messagePort:this.ipcMessagePorts.workerMessagePort2,requestPort:this.ipcMessagePorts.audioWorkerFrameRequestPort,audioContextIsProvided:this.audioContextIsProvided,autoConnect:this.autoConnect,initialPlayState:this.currentPlayState},[this.ipcMessagePorts.audioWorkerAudioInputPort,this.ipcMessagePorts.workerMessagePort2,this.ipcMessagePorts.audioWorkerFrameRequestPort]));logOldSpnMain$$module$src$logger("done initializing proxyPort")();(a=spnWorker$$module$src$mains$old_spn_main[`${a}Node`]||window[`__csound_wasm_iframe_parent_${a}Node`])&&
b&&b.connect(a);this.publicEvents.triggerOnAudioNodeCreated(a);this.isRequestingMidi&&this.csoundWorkerMain&&this.csoundWorkerMain.handleMidiInput&&(logOldSpnMain$$module$src$logger("requesting for web-midi connection")(),requestMidi$$module$src$utils$request_midi({onMidiMessage:this.csoundWorkerMain.handleMidiInput.bind(this.csoundWorkerMain)}))}}var $jscompDefaultExport$$module$src$mains$old_spn_main=ScriptProcessorNodeMainThread$$module$src$mains$old_spn_main,module$src$mains$old_spn_main={};
module$src$mains$old_spn_main.default=$jscompDefaultExport$$module$src$mains$old_spn_main;const dlinit$$module$src$dlinit=(a,b,c,d)=>{if(b.exports.csoundModuleInit){var e=new WebAssembly.Global({value:"i32",mutable:!0},0),f=new WebAssembly.Global({value:"i32",mutable:!0},0),g=new WebAssembly.Global({value:"i32",mutable:!0},0);const h=new WebAssembly.Global({value:"i32",mutable:!0},0);let k=c.length;"function"===typeof b.exports.csoundModuleCreate&&(c.grow(1),e.value=k,c.set(k,b.exports.csoundModuleCreate),k+=1);"function"===typeof b.exports.csoundModuleInit&&(c.grow(1),f.value=k,c.set(k,
b.exports.csoundModuleInit),k+=1);"function"===typeof b.exports.csoundModuleDestroy&&(c.grow(1),g.value=k,c.set(k,b.exports.csoundModuleDestroy),k+=1);"function"===typeof b.exports.csoundModuleErrorCodeToString&&(c.grow(1),h.value=k,c.set(k,b.exports.csoundModuleErrorCodeToString));a.exports.csoundWasiLoadPlugin(d,e,f,g,h)}else b.exports.csound_opcode_init||b.exports.csound_fgen_init?(e=new WebAssembly.Global({value:"i32",mutable:!0},0),f=new WebAssembly.Global({value:"i32",mutable:!0},0),g=c.length,
"function"===typeof b.exports.csound_opcode_init&&(e.value=g,c.grow(1),c.set(g,b.exports.csound_opcode_init),g+=1),"function"===typeof b.exports.csound_fgen_init&&(f.value=g,c.grow(1),c.set(g,b.exports.csound_fgen_init)),a.exports.csoundWasiLoadOpcodeLibrary(d,f,e)):console.error("Plugin doesn't export nececcary functions to quality as csound plugin.")};var module$src$dlinit={};module$src$dlinit.dlinit=dlinit$$module$src$dlinit;void 0!==goog.global&&(goog.global={});goog.global.BigInt||(goog.global.BigInt=void 0===BigInt?Number:BigInt);
const WASI_ESUCCESS$$module$src$filesystem$constants=0,WASI_E2BIG$$module$src$filesystem$constants=1,WASI_EACCES$$module$src$filesystem$constants=2,WASI_EADDRINUSE$$module$src$filesystem$constants=3,WASI_EADDRNOTAVAIL$$module$src$filesystem$constants=4,WASI_EAFNOSUPPORT$$module$src$filesystem$constants=5,WASI_EAGAIN$$module$src$filesystem$constants=6,WASI_EALREADY$$module$src$filesystem$constants=7,WASI_EBADF$$module$src$filesystem$constants=8,WASI_EBADMSG$$module$src$filesystem$constants=9,WASI_EBUSY$$module$src$filesystem$constants=
10,WASI_ECANCELED$$module$src$filesystem$constants=11,WASI_ECHILD$$module$src$filesystem$constants=12,WASI_ECONNABORTED$$module$src$filesystem$constants=13,WASI_ECONNREFUSED$$module$src$filesystem$constants=14,WASI_ECONNRESET$$module$src$filesystem$constants=15,WASI_EDEADLK$$module$src$filesystem$constants=16,WASI_EDESTADDRREQ$$module$src$filesystem$constants=17,WASI_EDOM$$module$src$filesystem$constants=18,WASI_EDQUOT$$module$src$filesystem$constants=19,WASI_EEXIST$$module$src$filesystem$constants=
20,WASI_EFAULT$$module$src$filesystem$constants=21,WASI_EFBIG$$module$src$filesystem$constants=22,WASI_EHOSTUNREACH$$module$src$filesystem$constants=23,WASI_EIDRM$$module$src$filesystem$constants=24,WASI_EILSEQ$$module$src$filesystem$constants=25,WASI_EINPROGRESS$$module$src$filesystem$constants=26,WASI_EINTR$$module$src$filesystem$constants=27,WASI_EINVAL$$module$src$filesystem$constants=28,WASI_EIO$$module$src$filesystem$constants=29,WASI_EISCONN$$module$src$filesystem$constants=30,WASI_EISDIR$$module$src$filesystem$constants=
31,WASI_ELOOP$$module$src$filesystem$constants=32,WASI_EMFILE$$module$src$filesystem$constants=33,WASI_EMLINK$$module$src$filesystem$constants=34,WASI_EMSGSIZE$$module$src$filesystem$constants=35,WASI_EMULTIHOP$$module$src$filesystem$constants=36,WASI_ENAMETOOLONG$$module$src$filesystem$constants=37,WASI_ENETDOWN$$module$src$filesystem$constants=38,WASI_ENETRESET$$module$src$filesystem$constants=39,WASI_ENETUNREACH$$module$src$filesystem$constants=40,WASI_ENFILE$$module$src$filesystem$constants=41,
WASI_ENOBUFS$$module$src$filesystem$constants=42,WASI_ENODEV$$module$src$filesystem$constants=43,WASI_ENOENT$$module$src$filesystem$constants=44,WASI_ENOEXEC$$module$src$filesystem$constants=45,WASI_ENOLCK$$module$src$filesystem$constants=46,WASI_ENOLINK$$module$src$filesystem$constants=47,WASI_ENOMEM$$module$src$filesystem$constants=48,WASI_ENOMSG$$module$src$filesystem$constants=49,WASI_ENOPROTOOPT$$module$src$filesystem$constants=50,WASI_ENOSPC$$module$src$filesystem$constants=51,WASI_ENOSYS$$module$src$filesystem$constants=
52,WASI_ENOTCONN$$module$src$filesystem$constants=53,WASI_ENOTDIR$$module$src$filesystem$constants=54,WASI_ENOTEMPTY$$module$src$filesystem$constants=55,WASI_ENOTRECOVERABLE$$module$src$filesystem$constants=56,WASI_ENOTSOCK$$module$src$filesystem$constants=57,WASI_ENOTSUP$$module$src$filesystem$constants=58,WASI_ENOTTY$$module$src$filesystem$constants=59,WASI_ENXIO$$module$src$filesystem$constants=60,WASI_EOVERFLOW$$module$src$filesystem$constants=61,WASI_EOWNERDEAD$$module$src$filesystem$constants=
62,WASI_EPERM$$module$src$filesystem$constants=63,WASI_EPIPE$$module$src$filesystem$constants=64,WASI_EPROTO$$module$src$filesystem$constants=65,WASI_EPROTONOSUPPORT$$module$src$filesystem$constants=66,WASI_EPROTOTYPE$$module$src$filesystem$constants=67,WASI_ERANGE$$module$src$filesystem$constants=68,WASI_EROFS$$module$src$filesystem$constants=69,WASI_ESPIPE$$module$src$filesystem$constants=70,WASI_ESRCH$$module$src$filesystem$constants=71,WASI_ESTALE$$module$src$filesystem$constants=72,WASI_ETIMEDOUT$$module$src$filesystem$constants=
73,WASI_ETXTBSY$$module$src$filesystem$constants=74,WASI_EXDEV$$module$src$filesystem$constants=75,WASI_ENOTCAPABLE$$module$src$filesystem$constants=76,WASI_SIGABRT$$module$src$filesystem$constants=0,WASI_SIGALRM$$module$src$filesystem$constants=1,WASI_SIGBUS$$module$src$filesystem$constants=2,WASI_SIGCHLD$$module$src$filesystem$constants=3,WASI_SIGCONT$$module$src$filesystem$constants=4,WASI_SIGFPE$$module$src$filesystem$constants=5,WASI_SIGHUP$$module$src$filesystem$constants=6,WASI_SIGILL$$module$src$filesystem$constants=
7,WASI_SIGINT$$module$src$filesystem$constants=8,WASI_SIGKILL$$module$src$filesystem$constants=9,WASI_SIGPIPE$$module$src$filesystem$constants=10,WASI_SIGQUIT$$module$src$filesystem$constants=11,WASI_SIGSEGV$$module$src$filesystem$constants=12,WASI_SIGSTOP$$module$src$filesystem$constants=13,WASI_SIGTERM$$module$src$filesystem$constants=14,WASI_SIGTRAP$$module$src$filesystem$constants=15,WASI_SIGTSTP$$module$src$filesystem$constants=16,WASI_SIGTTIN$$module$src$filesystem$constants=17,WASI_SIGTTOU$$module$src$filesystem$constants=
18,WASI_SIGURG$$module$src$filesystem$constants=19,WASI_SIGUSR1$$module$src$filesystem$constants=20,WASI_SIGUSR2$$module$src$filesystem$constants=21,WASI_SIGVTALRM$$module$src$filesystem$constants=22,WASI_SIGXCPU$$module$src$filesystem$constants=23,WASI_SIGXFSZ$$module$src$filesystem$constants=24,WASI_FILETYPE_UNKNOWN$$module$src$filesystem$constants=0,WASI_FILETYPE_BLOCK_DEVICE$$module$src$filesystem$constants=1,WASI_FILETYPE_CHARACTER_DEVICE$$module$src$filesystem$constants=2,WASI_FILETYPE_DIRECTORY$$module$src$filesystem$constants=
3,WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants=4,WASI_FILETYPE_SOCKET_DGRAM$$module$src$filesystem$constants=5,WASI_FILETYPE_SOCKET_STREAM$$module$src$filesystem$constants=6,WASI_FILETYPE_SYMBOLIC_LINK$$module$src$filesystem$constants=7,WASI_FDFLAG_APPEND$$module$src$filesystem$constants=1,WASI_FDFLAG_DSYNC$$module$src$filesystem$constants=2,WASI_FDFLAG_NONBLOCK$$module$src$filesystem$constants=4,WASI_FDFLAG_RSYNC$$module$src$filesystem$constants=8,WASI_FDFLAG_SYNC$$module$src$filesystem$constants=
16,WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants=goog.global.BigInt(1),WASI_RIGHT_FD_READ$$module$src$filesystem$constants=goog.global.BigInt(2),WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants=goog.global.BigInt(4),WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants=goog.global.BigInt(8),WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants=goog.global.BigInt(16),WASI_RIGHT_FD_TELL$$module$src$filesystem$constants=goog.global.BigInt(32),WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants=
goog.global.BigInt(64),WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants=goog.global.BigInt(128),WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants=goog.global.BigInt(256),WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants=goog.global.BigInt(512),WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants=goog.global.BigInt(1024),WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants=goog.global.BigInt(2048),WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants=
goog.global.BigInt(4096),WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants=goog.global.BigInt(8192),WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants=goog.global.BigInt(16384),WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants=goog.global.BigInt(32768),WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants=goog.global.BigInt(65536),WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants=goog.global.BigInt(131072),WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants=
goog.global.BigInt(262144),WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants=goog.global.BigInt(524288),WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants=goog.global.BigInt(1048576),WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants=goog.global.BigInt(2097152),WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants=goog.global.BigInt(4194304),WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants=goog.global.BigInt(8388608),WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants=
goog.global.BigInt(16777216),WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants=goog.global.BigInt(33554432),WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants=goog.global.BigInt(67108864),WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants=goog.global.BigInt(134217728),WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants=goog.global.BigInt(268435456),RIGHTS_ALL$$module$src$filesystem$constants=WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_READ$$module$src$filesystem$constants|
WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_TELL$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants|WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants|WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants|WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants|
WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants|WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants|WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants|WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants|
WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants|WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants|WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants|WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants|
WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants,RIGHTS_BLOCK_DEVICE_BASE$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_BLOCK_DEVICE_INHERITING$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_CHARACTER_DEVICE_BASE$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_CHARACTER_DEVICE_INHERITING$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants=
WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_TELL$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants|WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|
WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants,RIGHTS_REGULAR_FILE_INHERITING$$module$src$filesystem$constants=goog.global.BigInt(0),RIGHTS_DIRECTORY_BASE$$module$src$filesystem$constants=WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants|WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants|
WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants|WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants|WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants|WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants|WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants|WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants|WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants|
WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants|WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants|WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants|WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants|WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants|
WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants,RIGHTS_DIRECTORY_INHERITING$$module$src$filesystem$constants=RIGHTS_DIRECTORY_BASE$$module$src$filesystem$constants|RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants,RIGHTS_SOCKET_BASE$$module$src$filesystem$constants=WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|
WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants|WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants,RIGHTS_SOCKET_INHERITING$$module$src$filesystem$constants=RIGHTS_ALL$$module$src$filesystem$constants,RIGHTS_TTY_BASE$$module$src$filesystem$constants=WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants|WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants|WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants|WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants,
RIGHTS_TTY_INHERITING$$module$src$filesystem$constants=goog.global.BigInt(0),WASI_CLOCK_REALTIME$$module$src$filesystem$constants=0,WASI_CLOCK_MONOTONIC$$module$src$filesystem$constants=1,WASI_CLOCK_PROCESS_CPUTIME_ID$$module$src$filesystem$constants=2,WASI_CLOCK_THREAD_CPUTIME_ID$$module$src$filesystem$constants=3,WASI_EVENTTYPE_CLOCK$$module$src$filesystem$constants=0,WASI_EVENTTYPE_FD_READ$$module$src$filesystem$constants=1,WASI_EVENTTYPE_FD_WRITE$$module$src$filesystem$constants=2,WASI_FILESTAT_SET_ATIM$$module$src$filesystem$constants=
1,WASI_FILESTAT_SET_ATIM_NOW$$module$src$filesystem$constants=2,WASI_FILESTAT_SET_MTIM$$module$src$filesystem$constants=4,WASI_FILESTAT_SET_MTIM_NOW$$module$src$filesystem$constants=8,WASI_O_CREAT$$module$src$filesystem$constants=1,WASI_O_DIRECTORY$$module$src$filesystem$constants=2,WASI_O_EXCL$$module$src$filesystem$constants=4,WASI_O_TRUNC$$module$src$filesystem$constants=8,WASI_PREOPENTYPE_DIR$$module$src$filesystem$constants=0,WASI_DIRCOOKIE_START$$module$src$filesystem$constants=0,WASI_STDIN_FILENO$$module$src$filesystem$constants=
0,WASI_STDOUT_FILENO$$module$src$filesystem$constants=1,WASI_STDERR_FILENO$$module$src$filesystem$constants=2,WASI_WHENCE_SET$$module$src$filesystem$constants=0,WASI_WHENCE_CUR$$module$src$filesystem$constants=1,WASI_WHENCE_END$$module$src$filesystem$constants=2;var module$src$filesystem$constants={};module$src$filesystem$constants.RIGHTS_ALL=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_BLOCK_DEVICE_BASE=RIGHTS_ALL$$module$src$filesystem$constants;
module$src$filesystem$constants.RIGHTS_BLOCK_DEVICE_INHERITING=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_CHARACTER_DEVICE_BASE=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_CHARACTER_DEVICE_INHERITING=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_DIRECTORY_BASE=RIGHTS_DIRECTORY_BASE$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_DIRECTORY_INHERITING=RIGHTS_DIRECTORY_INHERITING$$module$src$filesystem$constants;
module$src$filesystem$constants.RIGHTS_REGULAR_FILE_BASE=RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_REGULAR_FILE_INHERITING=RIGHTS_REGULAR_FILE_INHERITING$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_SOCKET_BASE=RIGHTS_SOCKET_BASE$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_SOCKET_INHERITING=RIGHTS_ALL$$module$src$filesystem$constants;module$src$filesystem$constants.RIGHTS_TTY_BASE=RIGHTS_TTY_BASE$$module$src$filesystem$constants;
module$src$filesystem$constants.RIGHTS_TTY_INHERITING=RIGHTS_TTY_INHERITING$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_CLOCK_MONOTONIC=WASI_CLOCK_MONOTONIC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_CLOCK_PROCESS_CPUTIME_ID=WASI_CLOCK_PROCESS_CPUTIME_ID$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_CLOCK_REALTIME=WASI_CLOCK_REALTIME$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_CLOCK_THREAD_CPUTIME_ID=WASI_CLOCK_THREAD_CPUTIME_ID$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_DIRCOOKIE_START=WASI_DIRCOOKIE_START$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_E2BIG=WASI_E2BIG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EACCES=WASI_EACCES$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EADDRINUSE=WASI_EADDRINUSE$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_EADDRNOTAVAIL=WASI_EADDRNOTAVAIL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EAFNOSUPPORT=WASI_EAFNOSUPPORT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EAGAIN=WASI_EAGAIN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EALREADY=WASI_EALREADY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EBADF=WASI_EBADF$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_EBADMSG=WASI_EBADMSG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EBUSY=WASI_EBUSY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECANCELED=WASI_ECANCELED$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECHILD=WASI_ECHILD$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECONNABORTED=WASI_ECONNABORTED$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_ECONNREFUSED=WASI_ECONNREFUSED$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ECONNRESET=WASI_ECONNRESET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EDEADLK=WASI_EDEADLK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EDESTADDRREQ=WASI_EDESTADDRREQ$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EDOM=WASI_EDOM$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_EDQUOT=WASI_EDQUOT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EEXIST=WASI_EEXIST$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EFAULT=WASI_EFAULT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EFBIG=WASI_EFBIG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EHOSTUNREACH=WASI_EHOSTUNREACH$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EIDRM=WASI_EIDRM$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_EILSEQ=WASI_EILSEQ$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EINPROGRESS=WASI_EINPROGRESS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EINTR=WASI_EINTR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EINVAL=WASI_EINVAL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EIO=WASI_EIO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EISCONN=WASI_EISCONN$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_EISDIR=WASI_EISDIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ELOOP=WASI_ELOOP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMFILE=WASI_EMFILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMLINK=WASI_EMLINK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMSGSIZE=WASI_EMSGSIZE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EMULTIHOP=WASI_EMULTIHOP$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_ENAMETOOLONG=WASI_ENAMETOOLONG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENETDOWN=WASI_ENETDOWN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENETRESET=WASI_ENETRESET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENETUNREACH=WASI_ENETUNREACH$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENFILE=WASI_ENFILE$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_ENOBUFS=WASI_ENOBUFS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENODEV=WASI_ENODEV$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOENT=WASI_ENOENT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOEXEC=WASI_ENOEXEC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOLCK=WASI_ENOLCK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOLINK=WASI_ENOLINK$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_ENOMEM=WASI_ENOMEM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOMSG=WASI_ENOMSG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOPROTOOPT=WASI_ENOPROTOOPT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOSPC=WASI_ENOSPC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOSYS=WASI_ENOSYS$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_ENOTCAPABLE=WASI_ENOTCAPABLE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTCONN=WASI_ENOTCONN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTDIR=WASI_ENOTDIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTEMPTY=WASI_ENOTEMPTY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTRECOVERABLE=WASI_ENOTRECOVERABLE$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_ENOTSOCK=WASI_ENOTSOCK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTSUP=WASI_ENOTSUP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENOTTY=WASI_ENOTTY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ENXIO=WASI_ENXIO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EOVERFLOW=WASI_EOVERFLOW$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_EOWNERDEAD=WASI_EOWNERDEAD$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPERM=WASI_EPERM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPIPE=WASI_EPIPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPROTO=WASI_EPROTO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EPROTONOSUPPORT=WASI_EPROTONOSUPPORT$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_EPROTOTYPE=WASI_EPROTOTYPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ERANGE=WASI_ERANGE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EROFS=WASI_EROFS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ESPIPE=WASI_ESPIPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ESRCH=WASI_ESRCH$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ESTALE=WASI_ESTALE$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_ESUCCESS=WASI_ESUCCESS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ETIMEDOUT=WASI_ETIMEDOUT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_ETXTBSY=WASI_ETXTBSY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EVENTTYPE_CLOCK=WASI_EVENTTYPE_CLOCK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EVENTTYPE_FD_READ=WASI_EVENTTYPE_FD_READ$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_EVENTTYPE_FD_WRITE=WASI_EVENTTYPE_FD_WRITE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_EXDEV=WASI_EXDEV$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_APPEND=WASI_FDFLAG_APPEND$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_DSYNC=WASI_FDFLAG_DSYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_NONBLOCK=WASI_FDFLAG_NONBLOCK$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_FDFLAG_RSYNC=WASI_FDFLAG_RSYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FDFLAG_SYNC=WASI_FDFLAG_SYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILESTAT_SET_ATIM=WASI_FILESTAT_SET_ATIM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILESTAT_SET_ATIM_NOW=WASI_FILESTAT_SET_ATIM_NOW$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILESTAT_SET_MTIM=WASI_FILESTAT_SET_MTIM$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_FILESTAT_SET_MTIM_NOW=WASI_FILESTAT_SET_MTIM_NOW$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_BLOCK_DEVICE=WASI_FILETYPE_BLOCK_DEVICE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_CHARACTER_DEVICE=WASI_FILETYPE_CHARACTER_DEVICE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_DIRECTORY=WASI_FILETYPE_DIRECTORY$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_FILETYPE_REGULAR_FILE=WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_SOCKET_DGRAM=WASI_FILETYPE_SOCKET_DGRAM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_SOCKET_STREAM=WASI_FILETYPE_SOCKET_STREAM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_FILETYPE_SYMBOLIC_LINK=WASI_FILETYPE_SYMBOLIC_LINK$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_FILETYPE_UNKNOWN=WASI_FILETYPE_UNKNOWN$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_CREAT=WASI_O_CREAT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_DIRECTORY=WASI_O_DIRECTORY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_EXCL=WASI_O_EXCL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_O_TRUNC=WASI_O_TRUNC$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_PREOPENTYPE_DIR=WASI_PREOPENTYPE_DIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_ADVISE=WASI_RIGHT_FD_ADVISE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_ALLOCATE=WASI_RIGHT_FD_ALLOCATE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_DATASYNC=WASI_RIGHT_FD_DATASYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=WASI_RIGHT_FD_FDSTAT_SET_FLAGS$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_RIGHT_FD_FILESTAT_GET=WASI_RIGHT_FD_FILESTAT_GET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_FILESTAT_SET_SIZE=WASI_RIGHT_FD_FILESTAT_SET_SIZE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_FILESTAT_SET_TIMES=WASI_RIGHT_FD_FILESTAT_SET_TIMES$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_READ=WASI_RIGHT_FD_READ$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_RIGHT_FD_READDIR=WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_SEEK=WASI_RIGHT_FD_SEEK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_SYNC=WASI_RIGHT_FD_SYNC$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_TELL=WASI_RIGHT_FD_TELL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_FD_WRITE=WASI_RIGHT_FD_WRITE$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_RIGHT_PATH_CREATE_DIRECTORY=WASI_RIGHT_PATH_CREATE_DIRECTORY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_CREATE_FILE=WASI_RIGHT_PATH_CREATE_FILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_FILESTAT_GET=WASI_RIGHT_PATH_FILESTAT_GET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=WASI_RIGHT_PATH_FILESTAT_SET_SIZE$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=WASI_RIGHT_PATH_FILESTAT_SET_TIMES$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_LINK_SOURCE=WASI_RIGHT_PATH_LINK_SOURCE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_LINK_TARGET=WASI_RIGHT_PATH_LINK_TARGET$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_OPEN=WASI_RIGHT_PATH_OPEN$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_RIGHT_PATH_READLINK=WASI_RIGHT_PATH_READLINK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_REMOVE_DIRECTORY=WASI_RIGHT_PATH_REMOVE_DIRECTORY$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_RENAME_SOURCE=WASI_RIGHT_PATH_RENAME_SOURCE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_RENAME_TARGET=WASI_RIGHT_PATH_RENAME_TARGET$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_RIGHT_PATH_SYMLINK=WASI_RIGHT_PATH_SYMLINK$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_PATH_UNLINK_FILE=WASI_RIGHT_PATH_UNLINK_FILE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_POLL_FD_READWRITE=WASI_RIGHT_POLL_FD_READWRITE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_RIGHT_SOCK_SHUTDOWN=WASI_RIGHT_SOCK_SHUTDOWN$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_SIGABRT=WASI_SIGABRT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGALRM=WASI_SIGALRM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGBUS=WASI_SIGBUS$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGCHLD=WASI_SIGCHLD$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGCONT=WASI_SIGCONT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGFPE=WASI_SIGFPE$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_SIGHUP=WASI_SIGHUP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGILL=WASI_SIGILL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGINT=WASI_SIGINT$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGKILL=WASI_SIGKILL$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGPIPE=WASI_SIGPIPE$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGQUIT=WASI_SIGQUIT$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_SIGSEGV=WASI_SIGSEGV$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGSTOP=WASI_SIGSTOP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTERM=WASI_SIGTERM$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTRAP=WASI_SIGTRAP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTSTP=WASI_SIGTSTP$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGTTIN=WASI_SIGTTIN$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_SIGTTOU=WASI_SIGTTOU$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGURG=WASI_SIGURG$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGUSR1=WASI_SIGUSR1$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGUSR2=WASI_SIGUSR2$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGVTALRM=WASI_SIGVTALRM$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_SIGXCPU=WASI_SIGXCPU$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_SIGXFSZ=WASI_SIGXFSZ$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_STDERR_FILENO=WASI_STDERR_FILENO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_STDIN_FILENO=WASI_STDIN_FILENO$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_STDOUT_FILENO=WASI_STDOUT_FILENO$$module$src$filesystem$constants;
module$src$filesystem$constants.WASI_WHENCE_CUR=WASI_WHENCE_CUR$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_WHENCE_END=WASI_WHENCE_END$$module$src$filesystem$constants;module$src$filesystem$constants.WASI_WHENCE_SET=WASI_WHENCE_SET$$module$src$filesystem$constants;goog.debug={};function module$contents$goog$debug$Error_DebugError(a,b){if(Error.captureStackTrace)Error.captureStackTrace(this,module$contents$goog$debug$Error_DebugError);else{const c=Error().stack;c&&(this.stack=c)}a&&(this.message=String(a));void 0!==b&&(this.cause=b);this.reportErrorToServer=!0}goog.inherits(module$contents$goog$debug$Error_DebugError,Error);module$contents$goog$debug$Error_DebugError.prototype.name="CustomError";goog.debug.Error=module$contents$goog$debug$Error_DebugError;goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;function module$contents$goog$asserts_AssertionError(a,b){module$contents$goog$debug$Error_DebugError.call(this,module$contents$goog$asserts_subs(a,b));this.messagePattern=a}goog.inherits(module$contents$goog$asserts_AssertionError,module$contents$goog$debug$Error_DebugError);goog.asserts.AssertionError=module$contents$goog$asserts_AssertionError;module$contents$goog$asserts_AssertionError.prototype.name="AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};let module$contents$goog$asserts_errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;function module$contents$goog$asserts_subs(a,b){a=a.split("%s");let c="";const d=a.length-1;for(let e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");return c+a[d]}
function module$contents$goog$asserts_doAssertFailure(a,b,c,d){let e="Assertion failed",f;c?(e+=": "+c,f=d):a&&(e+=": "+a,f=b);a=new module$contents$goog$asserts_AssertionError(""+e,f||[]);module$contents$goog$asserts_errorHandler_(a)}goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(module$contents$goog$asserts_errorHandler_=a)};
goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&module$contents$goog$asserts_doAssertFailure("",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertExists=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&null==a&&module$contents$goog$asserts_doAssertFailure("Expected to exist: %s.",[a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&module$contents$goog$asserts_errorHandler_(new module$contents$goog$asserts_AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"number"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"string"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"function"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&module$contents$goog$asserts_doAssertFailure("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!Array.isArray(a)&&module$contents$goog$asserts_doAssertFailure("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"boolean"!==typeof a&&module$contents$goog$asserts_doAssertFailure("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||module$contents$goog$asserts_doAssertFailure("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||module$contents$goog$asserts_doAssertFailure("Expected instanceof %s but got %s.",[module$contents$goog$asserts_getType(b),module$contents$goog$asserts_getType(a)],c,Array.prototype.slice.call(arguments,3));return a};
goog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||"number"==typeof a&&isFinite(a)||module$contents$goog$asserts_doAssertFailure("Expected %s to be a finite number but it is not.",[a],b,Array.prototype.slice.call(arguments,2));return a};
function module$contents$goog$asserts_getType(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;const module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR;goog.array.ASSUME_NATIVE_FUNCTIONS=module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS;function module$contents$goog$array_peek(a){return a[a.length-1]}goog.array.peek=module$contents$goog$array_peek;goog.array.last=module$contents$goog$array_peek;
const module$contents$goog$array_indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.indexOf(b,c);for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};goog.array.indexOf=module$contents$goog$array_indexOf;
const module$contents$goog$array_lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.lastIndexOf(b,c);for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};
goog.array.lastIndexOf=module$contents$goog$array_lastIndexOf;const module$contents$goog$array_forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEach=module$contents$goog$array_forEach;
function module$contents$goog$array_forEachRight(a,b,c){var d=a.length;const e="string"===typeof a?a.split(""):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a)}goog.array.forEachRight=module$contents$goog$array_forEachRight;
const module$contents$goog$array_filter=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){const d=a.length,e=[];let f=0;const g="string"===typeof a?a.split(""):a;for(let h=0;h<d;h++)if(h in g){const k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};goog.array.filter=module$contents$goog$array_filter;
const module$contents$goog$array_map=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){const d=a.length,e=Array(d),f="string"===typeof a?a.split(""):a;for(let g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};goog.array.map=module$contents$goog$array_map;
const module$contents$goog$array_reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){let e=c;module$contents$goog$array_forEach(a,function(f,g){e=b.call(d,e,f,g,a)});return e};goog.array.reduce=module$contents$goog$array_reduce;
const module$contents$goog$array_reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){let e=c;module$contents$goog$array_forEachRight(a,function(f,g){e=b.call(d,e,f,g,a)});return e};goog.array.reduceRight=module$contents$goog$array_reduceRight;
const module$contents$goog$array_some=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};goog.array.some=module$contents$goog$array_some;
const module$contents$goog$array_every=goog.NATIVE_ARRAY_PROTOTYPES&&(module$contents$goog$array_ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.every=module$contents$goog$array_every;
function module$contents$goog$array_count(a,b,c){let d=0;module$contents$goog$array_forEach(a,function(e,f,g){b.call(c,e,f,g)&&++d},c);return d}goog.array.count=module$contents$goog$array_count;function module$contents$goog$array_find(a,b,c){b=module$contents$goog$array_findIndex(a,b,c);return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}goog.array.find=module$contents$goog$array_find;
function module$contents$goog$array_findIndex(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1}goog.array.findIndex=module$contents$goog$array_findIndex;function module$contents$goog$array_findRight(a,b,c){b=module$contents$goog$array_findIndexRight(a,b,c);return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}goog.array.findRight=module$contents$goog$array_findRight;
function module$contents$goog$array_findIndexRight(a,b,c){var d=a.length;const e="string"===typeof a?a.split(""):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1}goog.array.findIndexRight=module$contents$goog$array_findIndexRight;function module$contents$goog$array_contains(a,b){return 0<=module$contents$goog$array_indexOf(a,b)}goog.array.contains=module$contents$goog$array_contains;function module$contents$goog$array_isEmpty(a){return 0==a.length}goog.array.isEmpty=module$contents$goog$array_isEmpty;
function module$contents$goog$array_clear(a){if(!Array.isArray(a))for(let b=a.length-1;0<=b;b--)delete a[b];a.length=0}goog.array.clear=module$contents$goog$array_clear;function module$contents$goog$array_insert(a,b){module$contents$goog$array_contains(a,b)||a.push(b)}goog.array.insert=module$contents$goog$array_insert;function module$contents$goog$array_insertAt(a,b,c){module$contents$goog$array_splice(a,c,0,b)}goog.array.insertAt=module$contents$goog$array_insertAt;
function module$contents$goog$array_insertArrayAt(a,b,c){goog.partial(module$contents$goog$array_splice,a,c,0).apply(null,b)}goog.array.insertArrayAt=module$contents$goog$array_insertArrayAt;function module$contents$goog$array_insertBefore(a,b,c){let d;2==arguments.length||0>(d=module$contents$goog$array_indexOf(a,c))?a.push(b):module$contents$goog$array_insertAt(a,b,d)}goog.array.insertBefore=module$contents$goog$array_insertBefore;
function module$contents$goog$array_remove(a,b){b=module$contents$goog$array_indexOf(a,b);let c;(c=0<=b)&&module$contents$goog$array_removeAt(a,b);return c}goog.array.remove=module$contents$goog$array_remove;function module$contents$goog$array_removeLast(a,b){b=module$contents$goog$array_lastIndexOf(a,b);return 0<=b?(module$contents$goog$array_removeAt(a,b),!0):!1}goog.array.removeLast=module$contents$goog$array_removeLast;
function module$contents$goog$array_removeAt(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length}goog.array.removeAt=module$contents$goog$array_removeAt;function module$contents$goog$array_removeIf(a,b,c){b=module$contents$goog$array_findIndex(a,b,c);return 0<=b?(module$contents$goog$array_removeAt(a,b),!0):!1}goog.array.removeIf=module$contents$goog$array_removeIf;
function module$contents$goog$array_removeAllIf(a,b,c){let d=0;module$contents$goog$array_forEachRight(a,function(e,f){b.call(c,e,f,a)&&module$contents$goog$array_removeAt(a,f)&&d++});return d}goog.array.removeAllIf=module$contents$goog$array_removeAllIf;function module$contents$goog$array_concat(a){return Array.prototype.concat.apply([],arguments)}goog.array.concat=module$contents$goog$array_concat;function module$contents$goog$array_join(a){return Array.prototype.concat.apply([],arguments)}
goog.array.join=module$contents$goog$array_join;function module$contents$goog$array_toArray(a){const b=a.length;if(0<b){const c=Array(b);for(let d=0;d<b;d++)c[d]=a[d];return c}return[]}const module$contents$goog$array_clone=goog.array.toArray=module$contents$goog$array_toArray;goog.array.clone=module$contents$goog$array_toArray;
function module$contents$goog$array_extend(a,b){for(let c=1;c<arguments.length;c++){const d=arguments[c];if(goog.isArrayLike(d)){const e=a.length||0,f=d.length||0;a.length=e+f;for(let g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}}goog.array.extend=module$contents$goog$array_extend;function module$contents$goog$array_splice(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,module$contents$goog$array_slice(arguments,1))}goog.array.splice=module$contents$goog$array_splice;
function module$contents$goog$array_slice(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)}goog.array.slice=module$contents$goog$array_slice;
function module$contents$goog$array_removeDuplicates(a,b,c){b=b||a;var d=function(g){return goog.isObject(g)?"o"+goog.getUid(g):(typeof g).charAt(0)+g};c=c||d;let e=d=0;const f={};for(;e<a.length;){const g=a[e++],h=c(g);Object.prototype.hasOwnProperty.call(f,h)||(f[h]=!0,b[d++]=g)}b.length=d}goog.array.removeDuplicates=module$contents$goog$array_removeDuplicates;
function module$contents$goog$array_binarySearch(a,b,c){return module$contents$goog$array_binarySearch_(a,c||module$contents$goog$array_defaultCompare,!1,b)}goog.array.binarySearch=module$contents$goog$array_binarySearch;function module$contents$goog$array_binarySelect(a,b,c){return module$contents$goog$array_binarySearch_(a,b,!0,void 0,c)}goog.array.binarySelect=module$contents$goog$array_binarySelect;
function module$contents$goog$array_binarySearch_(a,b,c,d,e){let f=0,g=a.length,h;for(;f<g;){const k=f+(g-f>>>1);let m;m=c?b.call(e,a[k],k,a):b(d,a[k]);0<m?f=k+1:(g=k,h=!m)}return h?f:-f-1}function module$contents$goog$array_sort(a,b){a.sort(b||module$contents$goog$array_defaultCompare)}goog.array.sort=module$contents$goog$array_sort;
function module$contents$goog$array_stableSort(a,b){const c=Array(a.length);for(let e=0;e<a.length;e++)c[e]={index:e,value:a[e]};const d=b||module$contents$goog$array_defaultCompare;module$contents$goog$array_sort(c,function(e,f){return d(e.value,f.value)||e.index-f.index});for(b=0;b<a.length;b++)a[b]=c[b].value}goog.array.stableSort=module$contents$goog$array_stableSort;
function module$contents$goog$array_sortByKey(a,b,c){const d=c||module$contents$goog$array_defaultCompare;module$contents$goog$array_sort(a,function(e,f){return d(b(e),b(f))})}goog.array.sortByKey=module$contents$goog$array_sortByKey;function module$contents$goog$array_sortObjectsByKey(a,b,c){module$contents$goog$array_sortByKey(a,function(d){return d[b]},c)}goog.array.sortObjectsByKey=module$contents$goog$array_sortObjectsByKey;
function module$contents$goog$array_isSorted(a,b,c){b=b||module$contents$goog$array_defaultCompare;for(let d=1;d<a.length;d++){const e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0}goog.array.isSorted=module$contents$goog$array_isSorted;function module$contents$goog$array_equals(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;const d=a.length;c=c||module$contents$goog$array_defaultCompareEquality;for(let e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0}
goog.array.equals=module$contents$goog$array_equals;function module$contents$goog$array_compare3(a,b,c){c=c||module$contents$goog$array_defaultCompare;const d=Math.min(a.length,b.length);for(let e=0;e<d;e++){const f=c(a[e],b[e]);if(0!=f)return f}return module$contents$goog$array_defaultCompare(a.length,b.length)}goog.array.compare3=module$contents$goog$array_compare3;function module$contents$goog$array_defaultCompare(a,b){return a>b?1:a<b?-1:0}goog.array.defaultCompare=module$contents$goog$array_defaultCompare;
function module$contents$goog$array_inverseDefaultCompare(a,b){return-module$contents$goog$array_defaultCompare(a,b)}goog.array.inverseDefaultCompare=module$contents$goog$array_inverseDefaultCompare;function module$contents$goog$array_defaultCompareEquality(a,b){return a===b}goog.array.defaultCompareEquality=module$contents$goog$array_defaultCompareEquality;
function module$contents$goog$array_binaryInsert(a,b,c){c=module$contents$goog$array_binarySearch(a,b,c);return 0>c?(module$contents$goog$array_insertAt(a,b,-(c+1)),!0):!1}goog.array.binaryInsert=module$contents$goog$array_binaryInsert;function module$contents$goog$array_binaryRemove(a,b,c){b=module$contents$goog$array_binarySearch(a,b,c);return 0<=b?module$contents$goog$array_removeAt(a,b):!1}goog.array.binaryRemove=module$contents$goog$array_binaryRemove;
function module$contents$goog$array_bucket(a,b,c){const d={};for(let e=0;e<a.length;e++){const f=a[e],g=b.call(c,f,e,a);void 0!==g&&(d[g]||(d[g]=[])).push(f)}return d}goog.array.bucket=module$contents$goog$array_bucket;function module$contents$goog$array_bucketToMap(a,b){const c=new Map;for(let d=0;d<a.length;d++){const e=a[d],f=b(e,d,a);if(void 0!==f){let g=c.get(f);g||(g=[],c.set(f,g));g.push(e)}}return c}goog.array.bucketToMap=module$contents$goog$array_bucketToMap;
function module$contents$goog$array_toObject(a,b,c){const d={};module$contents$goog$array_forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d}goog.array.toObject=module$contents$goog$array_toObject;function module$contents$goog$array_toMap(a,b){const c=new Map;for(let d=0;d<a.length;d++){const e=a[d];c.set(b(e,d,a),e)}return c}goog.array.toMap=module$contents$goog$array_toMap;
function module$contents$goog$array_range(a,b,c){const d=[];let e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d}goog.array.range=module$contents$goog$array_range;function module$contents$goog$array_repeat(a,b){const c=[];for(let d=0;d<b;d++)c[d]=a;return c}goog.array.repeat=module$contents$goog$array_repeat;
function module$contents$goog$array_flatten(a){const b=[];for(let d=0;d<arguments.length;d++){const e=arguments[d];if(Array.isArray(e))for(let f=0;f<e.length;f+=8192){var c=module$contents$goog$array_slice(e,f,f+8192);c=module$contents$goog$array_flatten.apply(null,c);for(let g=0;g<c.length;g++)b.push(c[g])}else b.push(e)}return b}goog.array.flatten=module$contents$goog$array_flatten;
function module$contents$goog$array_rotate(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a}goog.array.rotate=module$contents$goog$array_rotate;function module$contents$goog$array_moveItem(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])}goog.array.moveItem=module$contents$goog$array_moveItem;
function module$contents$goog$array_zip(a){if(!arguments.length)return[];const b=[];let c=arguments[0].length;for(var d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){const e=[];for(let f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b}goog.array.zip=module$contents$goog$array_zip;function module$contents$goog$array_shuffle(a,b){b=b||Math.random;for(let c=a.length-1;0<c;c--){const d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e}}
goog.array.shuffle=module$contents$goog$array_shuffle;function module$contents$goog$array_copyByIndex(a,b){const c=[];module$contents$goog$array_forEach(b,function(d){c.push(a[d])});return c}goog.array.copyByIndex=module$contents$goog$array_copyByIndex;function module$contents$goog$array_concatMap(a,b,c){return module$contents$goog$array_concat.apply([],module$contents$goog$array_map(a,b,c))}goog.array.concatMap=module$contents$goog$array_concatMap;goog.dom.asserts={};goog.dom.asserts.assertIsLocation=function(a){if(goog.asserts.ENABLE_ASSERTS){var b=goog.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s",goog.dom.asserts.debugStringForType_(a))}return a};
goog.dom.asserts.assertIsElementType_=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=goog.dom.asserts.getWindow_(a);c&&"undefined"!=typeof c[b]&&(a&&(a instanceof c[b]||!(a instanceof c.Location||a instanceof c.Element))||goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s",b,goog.dom.asserts.debugStringForType_(a)))}return a};goog.dom.asserts.assertIsHTMLAnchorElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAnchorElement")};
goog.dom.asserts.assertIsHTMLButtonElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLButtonElement")};goog.dom.asserts.assertIsHTMLLinkElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLLinkElement")};goog.dom.asserts.assertIsHTMLImageElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLImageElement")};goog.dom.asserts.assertIsHTMLAudioElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAudioElement")};
goog.dom.asserts.assertIsHTMLVideoElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLVideoElement")};goog.dom.asserts.assertIsHTMLInputElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLInputElement")};goog.dom.asserts.assertIsHTMLTextAreaElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLTextAreaElement")};goog.dom.asserts.assertIsHTMLCanvasElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLCanvasElement")};
goog.dom.asserts.assertIsHTMLEmbedElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLEmbedElement")};goog.dom.asserts.assertIsHTMLFormElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFormElement")};goog.dom.asserts.assertIsHTMLFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFrameElement")};goog.dom.asserts.assertIsHTMLIFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLIFrameElement")};
goog.dom.asserts.assertIsHTMLObjectElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLObjectElement")};goog.dom.asserts.assertIsHTMLScriptElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLScriptElement")};
goog.dom.asserts.debugStringForType_=function(a){if(goog.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return"<object could not be stringified>"}else return void 0===a?"undefined":null===a?"null":typeof a};goog.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,c=b&&(b.defaultView||b.parentWindow);c=c||goog.global;if(c.Element&&c.Location)return c}catch(d){}return null};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=function(){return!1};goog.functions.TRUE=function(){return!0};goog.functions.NULL=function(){return null};goog.functions.UNDEFINED=function(){};goog.functions.EMPTY=goog.functions.UNDEFINED;goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};
goog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){const c=Array.prototype.slice.call(arguments,1);return function(){let d=this;d===goog.global&&(d=void 0);const e=Array.prototype.slice.call(arguments);e.push.apply(e,c);return a.apply(d,e)}};
goog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};goog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){const c=arguments,d=c.length;return function(){let e;d&&(e=c[d-1].apply(this,arguments));for(let f=d-2;0<=f;f--)e=c[f].call(this,e);return e}};
goog.functions.sequence=function(a){const b=arguments,c=b.length;return function(){let d;for(let e=0;e<c;e++)d=b[e].apply(this,arguments);return d}};goog.functions.and=function(a){const b=arguments,c=b.length;return function(){for(let d=0;d<c;d++)if(!b[d].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){const b=arguments,c=b.length;return function(){for(let d=0;d<c;d++)if(b[d].apply(this,arguments))return!0;return!1}};
goog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};goog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){let b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){let b=a;return function(){if(b){const c=b;b=null;c()}}};
goog.functions.debounce=function(a,b,c){let d=0;return function(e){goog.global.clearTimeout(d);const f=arguments;d=goog.global.setTimeout(function(){a.apply(c,f)},b)}};goog.functions.throttle=function(a,b,c){let d=0,e=!1,f=[];const g=function(){d=0;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);let k=f;f=[];a.apply(c,k)};return function(k){f=arguments;d?e=!0:h()}};
goog.functions.rateLimit=function(a,b,c){let d=0;const e=function(){d=0};return function(f){d||(d=goog.global.setTimeout(e,b),a.apply(c,arguments))}};goog.functions.isFunction=a=>"function"===typeof a;goog.string={};goog.string.TypedString=function(){};goog.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||"";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};
goog.DEBUG&&(goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"});goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail("expected object of type Const, got '"+a+"'");return"type_error:Const"};
goog.string.Const.from=function(a){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.Const.EMPTY=goog.string.Const.from("");goog.html={};goog.html.trustedtypes={};goog.html.trustedtypes.POLICY_NAME=goog.TRUSTED_TYPES_POLICY_NAME?goog.TRUSTED_TYPES_POLICY_NAME+"#html":"";goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse=function(){if(!goog.html.trustedtypes.POLICY_NAME)return null;void 0===goog.html.trustedtypes.cachedPolicy_&&(goog.html.trustedtypes.cachedPolicy_=goog.createTrustedTypesPolicy(goog.html.trustedtypes.POLICY_NAME));return goog.html.trustedtypes.cachedPolicy_};const module$contents$goog$html$SafeScript_CONSTRUCTOR_TOKEN_PRIVATE={};
class module$contents$goog$html$SafeScript_SafeScript{constructor(a,b){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=b===module$contents$goog$html$SafeScript_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}toString(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()}static fromConstant(a){a=goog.string.Const.unwrap(a);return 0===a.length?module$contents$goog$html$SafeScript_SafeScript.EMPTY:module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)}static fromJson(a){return module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(module$contents$goog$html$SafeScript_SafeScript.stringify_(a))}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()}static unwrap(a){return module$contents$goog$html$SafeScript_SafeScript.unwrapTrustedScript(a).toString()}static unwrapTrustedScript(a){if(a instanceof
module$contents$goog$html$SafeScript_SafeScript&&a.constructor===module$contents$goog$html$SafeScript_SafeScript)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;(0,goog.asserts.fail)("expected object of type SafeScript, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeScript"}static stringify_(a){return JSON.stringify(a).replace(/</g,"\\x3c")}static createSafeScriptSecurityPrivateDoNotAccessOrElse(a){const b=goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScript(a):
a;return new module$contents$goog$html$SafeScript_SafeScript(a,module$contents$goog$html$SafeScript_CONSTRUCTOR_TOKEN_PRIVATE)}}module$contents$goog$html$SafeScript_SafeScript.EMPTY=function(){return module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("")}();goog.html.SafeScript=module$contents$goog$html$SafeScript_SafeScript;goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.UrlObject_=function(){};goog.fs.url.UrlObject_.prototype.createObjectURL=function(a){};goog.fs.url.UrlObject_.prototype.revokeObjectURL=function(a){};
goog.fs.url.getUrlObject_=function(){const a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error("This browser doesn't seem to support blob URLs");};goog.fs.url.findUrlObject_=function(){return void 0!==goog.global.URL&&void 0!==goog.global.URL.createObjectURL?goog.global.URL:void 0!==goog.global.createObjectURL?goog.global:null};goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.fs.blob={};goog.fs.blob.getBlob=function(a){var b=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==b){b=new b;for(let c=0;c<arguments.length;c++)b.append(arguments[c]);return b.getBlob()}return goog.fs.blob.getBlobWithProperties(Array.prototype.slice.call(arguments))};
goog.fs.blob.getBlobWithProperties=function(a,b,c){var d=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==d){d=new d;for(let e=0;e<a.length;e++)d.append(a[e],c);return d.getBlob(b)}if(void 0!==goog.global.Blob)return d={},b&&(d.type=b),c&&(d.endings=c),new Blob(a,d);throw Error("This browser doesn't seem to support creating Blobs");};goog.html.TrustedResourceUrl=class{constructor(a,b){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=b===goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:""}toString(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+""}};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};
goog.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var c=goog.html.TrustedResourceUrl.unwrap(this);c=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);var d=c[3]||"";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1]+goog.html.TrustedResourceUrl.stringifyParams_("?",c[2]||"",a)+goog.html.TrustedResourceUrl.stringifyParams_("#",d,b))};goog.html.TrustedResourceUrl.unwrap=function(a){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};
goog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail("expected object of type TrustedResourceUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:TrustedResourceUrl"};
goog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(d,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));d=b[e];return d instanceof goog.string.Const?goog.string.Const.unwrap(d):
encodeURIComponent(String(d))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\w+)}/g;goog.html.TrustedResourceUrl.BASE_URL_=RegExp("^((https:)?//[0-9a-z.:[\\]-]+/|/[^/\\\\]|[^:/\\\\%]+/|[^:/\\\\%]*[?#]|about:blank#)","i");goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;
goog.html.TrustedResourceUrl.formatWithParams=function(a,b,c,d){return goog.html.TrustedResourceUrl.format(a,b).cloneWithParams(c,d)};goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b="",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.TrustedResourceUrl.fromSafeScript=function(a){a=goog.fs.blob.getBlobWithProperties([module$contents$goog$html$SafeScript_SafeScript.unwrap(a)],"text/javascript");a=goog.fs.url.createObjectUrl(a);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){const b=goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScriptURL(a):a;return new goog.html.TrustedResourceUrl(a,goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};
goog.html.TrustedResourceUrl.stringifyParams_=function(a,b,c){if(null==c)return b;if("string"===typeof c)return c?a+encodeURIComponent(c):"";for(var d in c)if(Object.prototype.hasOwnProperty.call(c,d)){var e=c[d];e=Array.isArray(e)?e:[e];for(var f=0;f<e.length;f++){var g=e[f];null!=g&&(b||(b=a),b+=(b.length>a.length?"&":"")+encodeURIComponent(d)+"="+encodeURIComponent(String(g)))}}return b};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){const c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.slice(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.slice(a.length-b.length))};
goog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\s\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};
goog.string.internal.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>")};
goog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.internal.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.internal.LT_RE_,
"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.internal.GT_RE_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.internal.QUOT_RE_,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(goog.string.internal.NULL_RE_,"&#0;"))}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/"/g;goog.string.internal.SINGLE_QUOTE_RE_=/'/g;
goog.string.internal.NULL_RE_=/\x00/g;goog.string.internal.ALL_RE_=/[\x00&<>"']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g," &#160;"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};
goog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(".");b=goog.string.internal.trim(String(b)).split(".");const d=Math.max(a.length,b.length);for(let g=0;0==c&&g<d;g++){var e=a[g]||"",f=b[g]||"";do{e=/(\d*)(\D*)(.*)/.exec(e)||["","","",""];f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];if(0==e[0].length&&0==f[0].length)break;c=0==e[1].length?0:parseInt(e[1],10);const h=0==f[1].length?0:parseInt(f[1],10);c=goog.string.internal.compareElements_(c,h)||
goog.string.internal.compareElements_(0==e[2].length,0==f[2].length)||goog.string.internal.compareElements_(e[2],f[2]);e=e[3];f=f[3]}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.html.SafeUrl=class{constructor(a,b){this.privateDoNotAccessOrElseSafeUrlWrappedValue_=b===goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:""}toString(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()}};goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};
goog.html.SafeUrl.unwrap=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;goog.asserts.fail("expected object of type SafeUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeUrl"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};
goog.html.SAFE_MIME_TYPE_PATTERN_=RegExp('^(?:audio/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font/\\w+|image/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon|heic|heif)|video/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\\w+=(?:\\w+|"[\\w;,= ]+"))*$',"i");goog.html.SafeUrl.isSafeMimeType=function(a){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a)};
goog.html.SafeUrl.fromBlob=function(a){a=goog.html.SafeUrl.isSafeMimeType(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.revokeObjectUrl=function(a){a=a.getTypedStringValue();a!==goog.html.SafeUrl.INNOCUOUS_STRING&&goog.fs.url.revokeObjectUrl(a)};
goog.html.SafeUrl.fromMediaSource=function(a){goog.asserts.assert("MediaSource"in goog.global,"No support for MediaSource");a=a instanceof MediaSource?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.DATA_URL_PATTERN_=/^data:(.*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.tryFromDataUrl=function(a){a=String(a);a=a.replace(/(%0A|%0D)/g,"");return a.match(goog.html.DATA_URL_PATTERN_)?goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):null};goog.html.SafeUrl.fromDataUrl=function(a){return goog.html.SafeUrl.tryFromDataUrl(a)||goog.html.SafeUrl.INNOCUOUS_URL};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"tel:")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SIP_URL_PATTERN_=RegExp("^sip[s]?:[+a-z0-9_.!$%&'*\\/=^`{|}~-]+@([a-z0-9-]+\\.)+[a-z0-9]{2,63}$","i");goog.html.SafeUrl.fromSipUrl=function(a){goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromFacebookMessengerUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"fb-messenger://share")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.fromWhatsAppUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"whatsapp://send")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromSmsUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"sms:")&&goog.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf("#");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(c){return!1}return/^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(a)};goog.html.SafeUrl.fromSshUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"ssh://")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//,a,b)};
goog.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,c){(a=a.exec(b))?(a=a[1],-1==(c instanceof goog.string.Const?[goog.string.Const.unwrap(c)]:c.map(function(d){return goog.string.Const.unwrap(d)})).indexOf(a)&&(b=goog.html.SafeUrl.INNOCUOUS_STRING)):b=goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeUrl.fromTrustedResourceUrl=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a))};
goog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_;goog.html.SafeUrl.trySanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SAFE_URL_PATTERN_.test(a)?goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):goog.html.SafeUrl.tryFromDataUrl(a)};
goog.html.SafeUrl.sanitize=function(a){return goog.html.SafeUrl.trySanitize(a)||goog.html.SafeUrl.INNOCUOUS_URL};
goog.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=goog.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a),"%s does not match the safe URL pattern",a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){return new goog.html.SafeUrl(a,goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};goog.html.SafeUrl.INNOCUOUS_URL=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.SafeUrl.INNOCUOUS_STRING);goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");const module$contents$goog$html$SafeStyle_CONSTRUCTOR_TOKEN_PRIVATE={};
class module$contents$goog$html$SafeStyle_SafeStyle{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=b===module$contents$goog$html$SafeStyle_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}static fromConstant(a){a=goog.string.Const.unwrap(a);if(0===a.length)return module$contents$goog$html$SafeStyle_SafeStyle.EMPTY;(0,goog.asserts.assert)((0,goog.string.internal.endsWith)(a,";"),`Last character of style string is not ';': ${a}`);(0,goog.asserts.assert)((0,goog.string.internal.contains)(a,
":"),"Style string must contain at least one ':', to specify a \"name: value\" pair: "+a);return module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_}toString(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_.toString()}static unwrap(a){if(a instanceof module$contents$goog$html$SafeStyle_SafeStyle&&a.constructor===module$contents$goog$html$SafeStyle_SafeStyle)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;
(0,goog.asserts.fail)(`expected object of type SafeStyle, got '${a}`+"' of type "+goog.typeOf(a));return"type_error:SafeStyle"}static createSafeStyleSecurityPrivateDoNotAccessOrElse(a){return new module$contents$goog$html$SafeStyle_SafeStyle(a,module$contents$goog$html$SafeStyle_CONSTRUCTOR_TOKEN_PRIVATE)}static create(a){let b="";for(let c in a)if(Object.prototype.hasOwnProperty.call(a,c)){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error(`Name allows only [-_a-zA-Z0-9], got: ${c}`);let d=a[c];null!=d&&
(d=Array.isArray(d)?d.map(module$contents$goog$html$SafeStyle_sanitizePropertyValue).join(" "):module$contents$goog$html$SafeStyle_sanitizePropertyValue(d),b+=`${c}:${d};`)}return b?module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):module$contents$goog$html$SafeStyle_SafeStyle.EMPTY}static concat(a){let b="";const c=d=>{Array.isArray(d)?d.forEach(c):b+=module$contents$goog$html$SafeStyle_SafeStyle.unwrap(d)};Array.prototype.forEach.call(arguments,c);
return b?module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):module$contents$goog$html$SafeStyle_SafeStyle.EMPTY}}module$contents$goog$html$SafeStyle_SafeStyle.EMPTY=module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING="zClosurez";
function module$contents$goog$html$SafeStyle_sanitizePropertyValue(a){if(a instanceof goog.html.SafeUrl)return'url("'+goog.html.SafeUrl.unwrap(a).replace(/</g,"%3c").replace(/[\\"]/g,"\\$&")+'")';a=a instanceof goog.string.Const?goog.string.Const.unwrap(a):module$contents$goog$html$SafeStyle_sanitizePropertyValueString(String(a));if(/[{;}]/.test(a))throw new module$contents$goog$asserts_AssertionError("Value does not allow [{;}], got: %s.",[a]);return a}
function module$contents$goog$html$SafeStyle_sanitizePropertyValueString(a){const b=a.replace(module$contents$goog$html$SafeStyle_FUNCTIONS_RE,"$1").replace(module$contents$goog$html$SafeStyle_FUNCTIONS_RE,"$1").replace(module$contents$goog$html$SafeStyle_URL_RE,"url");if(module$contents$goog$html$SafeStyle_VALUE_RE.test(b)){if(module$contents$goog$html$SafeStyle_COMMENT_RE.test(a))return(0,goog.asserts.fail)(`String value disallows comments, got: ${a}`),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING;
if(!module$contents$goog$html$SafeStyle_hasBalancedQuotes(a))return(0,goog.asserts.fail)(`String value requires balanced quotes, got: ${a}`),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING;if(!module$contents$goog$html$SafeStyle_hasBalancedSquareBrackets(a))return(0,goog.asserts.fail)("String value requires balanced square brackets and one identifier per pair of brackets, got: "+a),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING}else return(0,goog.asserts.fail)(`String value allows only ${module$contents$goog$html$SafeStyle_VALUE_ALLOWED_CHARS}`+
" and simple functions, got: "+a),module$contents$goog$html$SafeStyle_SafeStyle.INNOCUOUS_STRING;return module$contents$goog$html$SafeStyle_sanitizeUrl(a)}function module$contents$goog$html$SafeStyle_hasBalancedQuotes(a){let b=!0,c=!0;for(let d=0;d<a.length;d++){const e=a.charAt(d);"'"==e&&c?b=!b:'"'==e&&b&&(c=!c)}return b&&c}
function module$contents$goog$html$SafeStyle_hasBalancedSquareBrackets(a){let b=!0;const c=/^[-_a-zA-Z0-9]$/;for(let d=0;d<a.length;d++){const e=a.charAt(d);if("]"==e){if(b)return!1;b=!0}else if("["==e){if(!b)return!1;b=!1}else if(!b&&!c.test(e))return!1}return b}
const module$contents$goog$html$SafeStyle_VALUE_ALLOWED_CHARS="[-,.\"'%_!#/ a-zA-Z0-9\\[\\]]",module$contents$goog$html$SafeStyle_VALUE_RE=new RegExp(`^${module$contents$goog$html$SafeStyle_VALUE_ALLOWED_CHARS}+\$`),module$contents$goog$html$SafeStyle_URL_RE=RegExp("\\b(url\\([ \t\n]*)('[ -&(-\\[\\]-~]*'|\"[ !#-\\[\\]-~]*\"|[!#-&*-\\[\\]-~]*)([ \t\n]*\\))","g"),module$contents$goog$html$SafeStyle_ALLOWED_FUNCTIONS="calc cubic-bezier fit-content hsl hsla linear-gradient matrix minmax radial-gradient repeat rgb rgba (rotate|scale|translate)(X|Y|Z|3d)? steps var".split(" "),
module$contents$goog$html$SafeStyle_FUNCTIONS_RE=new RegExp("\\b("+module$contents$goog$html$SafeStyle_ALLOWED_FUNCTIONS.join("|")+")\\([-+*/0-9a-zA-Z.%#\\[\\], ]+\\)","g"),module$contents$goog$html$SafeStyle_COMMENT_RE=/\/\*/;function module$contents$goog$html$SafeStyle_sanitizeUrl(a){return a.replace(module$contents$goog$html$SafeStyle_URL_RE,(b,c,d,e)=>{let f="";d=d.replace(/^(['"])(.*)\1$/,(g,h,k)=>{f=h;return k});b=goog.html.SafeUrl.sanitize(d).getTypedStringValue();return c+f+b+f+e})}
goog.html.SafeStyle=module$contents$goog$html$SafeStyle_SafeStyle;goog.object={};function module$contents$goog$object_forEach(a,b,c){for(const d in a)b.call(c,a[d],d,a)}function module$contents$goog$object_filter(a,b,c){const d={};for(const e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d}function module$contents$goog$object_map(a,b,c){const d={};for(const e in a)d[e]=b.call(c,a[e],e,a);return d}function module$contents$goog$object_some(a,b,c){for(const d in a)if(b.call(c,a[d],d,a))return!0;return!1}
function module$contents$goog$object_every(a,b,c){for(const d in a)if(!b.call(c,a[d],d,a))return!1;return!0}function module$contents$goog$object_getCount(a){let b=0;for(const c in a)b++;return b}function module$contents$goog$object_getAnyKey(a){for(const b in a)return b}function module$contents$goog$object_getAnyValue(a){for(const b in a)return a[b]}function module$contents$goog$object_contains(a,b){return module$contents$goog$object_containsValue(a,b)}
function module$contents$goog$object_getValues(a){const b=[];let c=0;for(const d in a)b[c++]=a[d];return b}function module$contents$goog$object_getKeys(a){const b=[];let c=0;for(const d in a)b[c++]=d;return b}function module$contents$goog$object_getValueByKeys(a,b){var c=goog.isArrayLike(b);const d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]]}return a}function module$contents$goog$object_containsKey(a,b){return null!==a&&b in a}
function module$contents$goog$object_containsValue(a,b){for(const c in a)if(a[c]==b)return!0;return!1}function module$contents$goog$object_findKey(a,b,c){for(const d in a)if(b.call(c,a[d],d,a))return d}function module$contents$goog$object_findValue(a,b,c){return(b=module$contents$goog$object_findKey(a,b,c))&&a[b]}function module$contents$goog$object_isEmpty(a){for(const b in a)return!1;return!0}function module$contents$goog$object_clear(a){for(const b in a)delete a[b]}
function module$contents$goog$object_remove(a,b){let c;(c=b in a)&&delete a[b];return c}function module$contents$goog$object_add(a,b,c){if(null!==a&&b in a)throw Error(`The object already contains the key "${b}"`);module$contents$goog$object_set(a,b,c)}function module$contents$goog$object_get(a,b,c){return null!==a&&b in a?a[b]:c}function module$contents$goog$object_set(a,b,c){a[b]=c}function module$contents$goog$object_setIfUndefined(a,b,c){return b in a?a[b]:a[b]=c}
function module$contents$goog$object_setWithReturnValueIfNotSet(a,b,c){if(b in a)return a[b];c=c();return a[b]=c}function module$contents$goog$object_equals(a,b){for(const c in a)if(!(c in b)||a[c]!==b[c])return!1;for(const c in b)if(!(c in a))return!1;return!0}function module$contents$goog$object_clone(a){const b={};for(const c in a)b[c]=a[c];return b}
function module$contents$goog$object_unsafeClone(a){if(!a||"object"!==typeof a)return a;if("function"===typeof a.clone)return a.clone();if("undefined"!==typeof Map&&a instanceof Map)return new Map(a);if("undefined"!==typeof Set&&a instanceof Set)return new Set(a);if(a instanceof Date)return new Date(a.getTime());const b=Array.isArray(a)?[]:"function"!==typeof ArrayBuffer||"function"!==typeof ArrayBuffer.isView||!ArrayBuffer.isView(a)||a instanceof DataView?{}:new a.constructor(a.length);for(const c in a)b[c]=
module$contents$goog$object_unsafeClone(a[c]);return b}function module$contents$goog$object_transpose(a){const b={};for(const c in a)b[a[c]]=c;return b}const module$contents$goog$object_PROTOTYPE_FIELDS="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function module$contents$goog$object_extend(a,b){let c,d;for(let e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(let f=0;f<module$contents$goog$object_PROTOTYPE_FIELDS.length;f++)c=module$contents$goog$object_PROTOTYPE_FIELDS[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}}
function module$contents$goog$object_create(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return module$contents$goog$object_create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");const c={};for(let d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c}
function module$contents$goog$object_createSet(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return module$contents$goog$object_createSet.apply(null,arguments[0]);const c={};for(let d=0;d<b;d++)c[arguments[d]]=!0;return c}function module$contents$goog$object_createImmutableView(a){let b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b}function module$contents$goog$object_isImmutableView(a){return!!Object.isFrozen&&Object.isFrozen(a)}
function module$contents$goog$object_getAllPropertyNames(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return module$contents$goog$object_getKeys(a);const d={};for(;a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){const e=Object.getOwnPropertyNames(a);for(let f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a)}return module$contents$goog$object_getKeys(d)}
function module$contents$goog$object_getSuperClass(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor}goog.object.add=module$contents$goog$object_add;goog.object.clear=module$contents$goog$object_clear;goog.object.clone=module$contents$goog$object_clone;goog.object.contains=module$contents$goog$object_contains;goog.object.containsKey=module$contents$goog$object_containsKey;goog.object.containsValue=module$contents$goog$object_containsValue;goog.object.create=module$contents$goog$object_create;
goog.object.createImmutableView=module$contents$goog$object_createImmutableView;goog.object.createSet=module$contents$goog$object_createSet;goog.object.equals=module$contents$goog$object_equals;goog.object.every=module$contents$goog$object_every;goog.object.extend=module$contents$goog$object_extend;goog.object.filter=module$contents$goog$object_filter;goog.object.findKey=module$contents$goog$object_findKey;goog.object.findValue=module$contents$goog$object_findValue;goog.object.forEach=module$contents$goog$object_forEach;
goog.object.get=module$contents$goog$object_get;goog.object.getAllPropertyNames=module$contents$goog$object_getAllPropertyNames;goog.object.getAnyKey=module$contents$goog$object_getAnyKey;goog.object.getAnyValue=module$contents$goog$object_getAnyValue;goog.object.getCount=module$contents$goog$object_getCount;goog.object.getKeys=module$contents$goog$object_getKeys;goog.object.getSuperClass=module$contents$goog$object_getSuperClass;goog.object.getValueByKeys=module$contents$goog$object_getValueByKeys;
goog.object.getValues=module$contents$goog$object_getValues;goog.object.isEmpty=module$contents$goog$object_isEmpty;goog.object.isImmutableView=module$contents$goog$object_isImmutableView;goog.object.map=module$contents$goog$object_map;goog.object.remove=module$contents$goog$object_remove;goog.object.set=module$contents$goog$object_set;goog.object.setIfUndefined=module$contents$goog$object_setIfUndefined;goog.object.setWithReturnValueIfNotSet=module$contents$goog$object_setWithReturnValueIfNotSet;
goog.object.some=module$contents$goog$object_some;goog.object.transpose=module$contents$goog$object_transpose;goog.object.unsafeClone=module$contents$goog$object_unsafeClone;const module$contents$goog$html$SafeStyleSheet_CONSTRUCTOR_TOKEN_PRIVATE={};
class module$contents$goog$html$SafeStyleSheet_SafeStyleSheet{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=b===module$contents$goog$html$SafeStyleSheet_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}toString(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_.toString()}static createRule(a,b){if((0,goog.string.internal.contains)(a,"<"))throw Error(`Selector does not allow '<', got: ${a}`);const c=a.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g,
"");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(c))throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: "+a);if(!module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.hasBalancedBrackets_(c))throw Error("() and [] in selector must be balanced, got: "+a);b instanceof module$contents$goog$html$SafeStyle_SafeStyle||(b=module$contents$goog$html$SafeStyle_SafeStyle.create(b));a=`${a}{`+module$contents$goog$html$SafeStyle_SafeStyle.unwrap(b).replace(/</g,"\\3C ")+"}";
return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}static hasBalancedBrackets_(a){const b={"(":")","[":"]"},c=[];for(let d=0;d<a.length;d++){const e=a[d];if(b[e])c.push(b[e]);else if(module$contents$goog$object_contains(b,e)&&c.pop()!=e)return!1}return 0==c.length}static concat(a){let b="";const c=d=>{Array.isArray(d)?d.forEach(c):b+=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.unwrap(d)};Array.prototype.forEach.call(arguments,
c);return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)}static fromConstant(a){a=goog.string.Const.unwrap(a);if(0===a.length)return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.EMPTY;(0,goog.asserts.assert)(!(0,goog.string.internal.contains)(a,"<"),`Forbidden '<' character in style sheet string: ${a}`);return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_}static unwrap(a){if(a instanceof
module$contents$goog$html$SafeStyleSheet_SafeStyleSheet&&a.constructor===module$contents$goog$html$SafeStyleSheet_SafeStyleSheet)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;(0,goog.asserts.fail)("expected object of type SafeStyleSheet, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyleSheet"}static createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a){return new module$contents$goog$html$SafeStyleSheet_SafeStyleSheet(a,module$contents$goog$html$SafeStyleSheet_CONSTRUCTOR_TOKEN_PRIVATE)}}
module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.EMPTY=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");goog.html.SafeStyleSheet=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet;goog.dom.HtmlElement=function(){};goog.dom.TagName=class{static cast(a,b){return a}constructor(){}toString(){}};goog.dom.TagName.A="A";goog.dom.TagName.ABBR="ABBR";goog.dom.TagName.ACRONYM="ACRONYM";goog.dom.TagName.ADDRESS="ADDRESS";goog.dom.TagName.APPLET="APPLET";goog.dom.TagName.AREA="AREA";goog.dom.TagName.ARTICLE="ARTICLE";goog.dom.TagName.ASIDE="ASIDE";goog.dom.TagName.AUDIO="AUDIO";goog.dom.TagName.B="B";goog.dom.TagName.BASE="BASE";goog.dom.TagName.BASEFONT="BASEFONT";goog.dom.TagName.BDI="BDI";goog.dom.TagName.BDO="BDO";
goog.dom.TagName.BIG="BIG";goog.dom.TagName.BLOCKQUOTE="BLOCKQUOTE";goog.dom.TagName.BODY="BODY";goog.dom.TagName.BR="BR";goog.dom.TagName.BUTTON="BUTTON";goog.dom.TagName.CANVAS="CANVAS";goog.dom.TagName.CAPTION="CAPTION";goog.dom.TagName.CENTER="CENTER";goog.dom.TagName.CITE="CITE";goog.dom.TagName.CODE="CODE";goog.dom.TagName.COL="COL";goog.dom.TagName.COLGROUP="COLGROUP";goog.dom.TagName.COMMAND="COMMAND";goog.dom.TagName.DATA="DATA";goog.dom.TagName.DATALIST="DATALIST";goog.dom.TagName.DD="DD";
goog.dom.TagName.DEL="DEL";goog.dom.TagName.DETAILS="DETAILS";goog.dom.TagName.DFN="DFN";goog.dom.TagName.DIALOG="DIALOG";goog.dom.TagName.DIR="DIR";goog.dom.TagName.DIV="DIV";goog.dom.TagName.DL="DL";goog.dom.TagName.DT="DT";goog.dom.TagName.EM="EM";goog.dom.TagName.EMBED="EMBED";goog.dom.TagName.FIELDSET="FIELDSET";goog.dom.TagName.FIGCAPTION="FIGCAPTION";goog.dom.TagName.FIGURE="FIGURE";goog.dom.TagName.FONT="FONT";goog.dom.TagName.FOOTER="FOOTER";goog.dom.TagName.FORM="FORM";
goog.dom.TagName.FRAME="FRAME";goog.dom.TagName.FRAMESET="FRAMESET";goog.dom.TagName.H1="H1";goog.dom.TagName.H2="H2";goog.dom.TagName.H3="H3";goog.dom.TagName.H4="H4";goog.dom.TagName.H5="H5";goog.dom.TagName.H6="H6";goog.dom.TagName.HEAD="HEAD";goog.dom.TagName.HEADER="HEADER";goog.dom.TagName.HGROUP="HGROUP";goog.dom.TagName.HR="HR";goog.dom.TagName.HTML="HTML";goog.dom.TagName.I="I";goog.dom.TagName.IFRAME="IFRAME";goog.dom.TagName.IMG="IMG";goog.dom.TagName.INPUT="INPUT";
goog.dom.TagName.INS="INS";goog.dom.TagName.ISINDEX="ISINDEX";goog.dom.TagName.KBD="KBD";goog.dom.TagName.KEYGEN="KEYGEN";goog.dom.TagName.LABEL="LABEL";goog.dom.TagName.LEGEND="LEGEND";goog.dom.TagName.LI="LI";goog.dom.TagName.LINK="LINK";goog.dom.TagName.MAIN="MAIN";goog.dom.TagName.MAP="MAP";goog.dom.TagName.MARK="MARK";goog.dom.TagName.MATH="MATH";goog.dom.TagName.MENU="MENU";goog.dom.TagName.MENUITEM="MENUITEM";goog.dom.TagName.META="META";goog.dom.TagName.METER="METER";
goog.dom.TagName.NAV="NAV";goog.dom.TagName.NOFRAMES="NOFRAMES";goog.dom.TagName.NOSCRIPT="NOSCRIPT";goog.dom.TagName.OBJECT="OBJECT";goog.dom.TagName.OL="OL";goog.dom.TagName.OPTGROUP="OPTGROUP";goog.dom.TagName.OPTION="OPTION";goog.dom.TagName.OUTPUT="OUTPUT";goog.dom.TagName.P="P";goog.dom.TagName.PARAM="PARAM";goog.dom.TagName.PICTURE="PICTURE";goog.dom.TagName.PRE="PRE";goog.dom.TagName.PROGRESS="PROGRESS";goog.dom.TagName.Q="Q";goog.dom.TagName.RP="RP";goog.dom.TagName.RT="RT";
goog.dom.TagName.RTC="RTC";goog.dom.TagName.RUBY="RUBY";goog.dom.TagName.S="S";goog.dom.TagName.SAMP="SAMP";goog.dom.TagName.SCRIPT="SCRIPT";goog.dom.TagName.SECTION="SECTION";goog.dom.TagName.SELECT="SELECT";goog.dom.TagName.SMALL="SMALL";goog.dom.TagName.SOURCE="SOURCE";goog.dom.TagName.SPAN="SPAN";goog.dom.TagName.STRIKE="STRIKE";goog.dom.TagName.STRONG="STRONG";goog.dom.TagName.STYLE="STYLE";goog.dom.TagName.SUB="SUB";goog.dom.TagName.SUMMARY="SUMMARY";goog.dom.TagName.SUP="SUP";
goog.dom.TagName.SVG="SVG";goog.dom.TagName.TABLE="TABLE";goog.dom.TagName.TBODY="TBODY";goog.dom.TagName.TD="TD";goog.dom.TagName.TEMPLATE="TEMPLATE";goog.dom.TagName.TEXTAREA="TEXTAREA";goog.dom.TagName.TFOOT="TFOOT";goog.dom.TagName.TH="TH";goog.dom.TagName.THEAD="THEAD";goog.dom.TagName.TIME="TIME";goog.dom.TagName.TITLE="TITLE";goog.dom.TagName.TR="TR";goog.dom.TagName.TRACK="TRACK";goog.dom.TagName.TT="TT";goog.dom.TagName.U="U";goog.dom.TagName.UL="UL";goog.dom.TagName.VAR="VAR";
goog.dom.TagName.VIDEO="VIDEO";goog.dom.TagName.WBR="WBR";goog.labs={};goog.labs.userAgent={};const module$contents$goog$labs$userAgent_USE_CLIENT_HINTS_OVERRIDE="",module$contents$goog$labs$userAgent_USE_CLIENT_HINTS=!1;let module$contents$goog$labs$userAgent_forceClientHintsInTests=!1;goog.labs.userAgent.setUseClientHintsForTesting=a=>{module$contents$goog$labs$userAgent_forceClientHintsInTests=a};
const module$contents$goog$labs$userAgent_useClientHintsRuntimeOverride=module$contents$goog$labs$userAgent_USE_CLIENT_HINTS_OVERRIDE?!!goog.getObjectByName(module$contents$goog$labs$userAgent_USE_CLIENT_HINTS_OVERRIDE):!1;goog.labs.userAgent.useClientHints=()=>module$contents$goog$labs$userAgent_USE_CLIENT_HINTS||module$contents$goog$labs$userAgent_useClientHintsRuntimeOverride||module$contents$goog$labs$userAgent_forceClientHintsInTests;goog.labs.userAgent.util={};const module$contents$goog$labs$userAgent$util_ASSUME_CLIENT_HINTS_SUPPORT=!1;function module$contents$goog$labs$userAgent$util_getNativeUserAgentString(){var a=module$contents$goog$labs$userAgent$util_getNavigator();return a&&(a=a.userAgent)?a:""}function module$contents$goog$labs$userAgent$util_getNativeUserAgentData(){const a=module$contents$goog$labs$userAgent$util_getNavigator();return a?a.userAgentData||null:null}
function module$contents$goog$labs$userAgent$util_getNavigator(){return goog.global.navigator}let module$contents$goog$labs$userAgent$util_userAgentInternal=null,module$contents$goog$labs$userAgent$util_userAgentDataInternal=module$contents$goog$labs$userAgent$util_getNativeUserAgentData();
function module$contents$goog$labs$userAgent$util_setUserAgent(a){module$contents$goog$labs$userAgent$util_userAgentInternal="string"===typeof a?a:module$contents$goog$labs$userAgent$util_getNativeUserAgentString()}function module$contents$goog$labs$userAgent$util_getUserAgent(){return null==module$contents$goog$labs$userAgent$util_userAgentInternal?module$contents$goog$labs$userAgent$util_getNativeUserAgentString():module$contents$goog$labs$userAgent$util_userAgentInternal}
function module$contents$goog$labs$userAgent$util_setUserAgentData(a){module$contents$goog$labs$userAgent$util_userAgentDataInternal=a}function module$contents$goog$labs$userAgent$util_resetUserAgentData(){module$contents$goog$labs$userAgent$util_userAgentDataInternal=module$contents$goog$labs$userAgent$util_getNativeUserAgentData()}function module$contents$goog$labs$userAgent$util_getUserAgentData(){return module$contents$goog$labs$userAgent$util_userAgentDataInternal}
function module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(a){if(!(0,goog.labs.userAgent.useClientHints)())return!1;const b=module$contents$goog$labs$userAgent$util_getUserAgentData();return b?b.brands.some(({brand:c})=>c&&(0,goog.string.internal.contains)(c,a)):!1}function module$contents$goog$labs$userAgent$util_matchUserAgent(a){const b=module$contents$goog$labs$userAgent$util_getUserAgent();return(0,goog.string.internal.contains)(b,a)}
function module$contents$goog$labs$userAgent$util_matchUserAgentIgnoreCase(a){const b=module$contents$goog$labs$userAgent$util_getUserAgent();return(0,goog.string.internal.caseInsensitiveContains)(b,a)}function module$contents$goog$labs$userAgent$util_extractVersionTuples(a){const b=RegExp("([A-Z][\\w ]+)/([^\\s]+)\\s*(?:\\((.*?)\\))?","g"),c=[];let d;for(;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c}goog.labs.userAgent.util.ASSUME_CLIENT_HINTS_SUPPORT=module$contents$goog$labs$userAgent$util_ASSUME_CLIENT_HINTS_SUPPORT;
goog.labs.userAgent.util.extractVersionTuples=module$contents$goog$labs$userAgent$util_extractVersionTuples;goog.labs.userAgent.util.getNativeUserAgentString=module$contents$goog$labs$userAgent$util_getNativeUserAgentString;goog.labs.userAgent.util.getUserAgent=module$contents$goog$labs$userAgent$util_getUserAgent;goog.labs.userAgent.util.getUserAgentData=module$contents$goog$labs$userAgent$util_getUserAgentData;goog.labs.userAgent.util.matchUserAgent=module$contents$goog$labs$userAgent$util_matchUserAgent;
goog.labs.userAgent.util.matchUserAgentDataBrand=module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand;goog.labs.userAgent.util.matchUserAgentIgnoreCase=module$contents$goog$labs$userAgent$util_matchUserAgentIgnoreCase;goog.labs.userAgent.util.resetUserAgentData=module$contents$goog$labs$userAgent$util_resetUserAgentData;goog.labs.userAgent.util.setUserAgent=module$contents$goog$labs$userAgent$util_setUserAgent;goog.labs.userAgent.util.setUserAgentData=module$contents$goog$labs$userAgent$util_setUserAgentData;var module$exports$goog$labs$userAgent$highEntropy$highEntropyValue={AsyncValue:class{getIfLoaded(){}load(){}},HighEntropyValue:class{constructor(a){this.key_=a;this.promise_=this.value_=void 0;this.pending_=!1}getIfLoaded(){if(module$contents$goog$labs$userAgent$util_getUserAgentData())return this.value_}async load(){const a=module$contents$goog$labs$userAgent$util_getUserAgentData();if(a)return this.promise_||(this.pending_=!0,this.promise_=(async()=>{try{return this.value_=(await a.getHighEntropyValues([this.key_]))[this.key_]}finally{this.pending_=
!1}})()),await this.promise_}resetForTesting(){if(this.pending_)throw Error("Unsafe call to resetForTesting");this.value_=this.promise_=void 0;this.pending_=!1}},Version:class{constructor(a){this.versionString_=a}toVersionStringForLogging(){return this.versionString_}isAtLeast(a){return 0<=(0,goog.string.internal.compareVersions)(this.versionString_,a)}}};var module$exports$goog$labs$userAgent$highEntropy$highEntropyData={};module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList=new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.HighEntropyValue("fullVersionList");module$exports$goog$labs$userAgent$highEntropy$highEntropyData.platformVersion=new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.HighEntropyValue("platformVersion");goog.labs.userAgent.browser={};const module$contents$goog$labs$userAgent$browser_Brand={ANDROID_BROWSER:"Android Browser",CHROMIUM:"Chromium",EDGE:"Microsoft Edge",FIREFOX:"Firefox",IE:"Internet Explorer",OPERA:"Opera",SAFARI:"Safari",SILK:"Silk"};goog.labs.userAgent.browser.Brand=module$contents$goog$labs$userAgent$browser_Brand;
function module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(a=!1){if(module$contents$goog$labs$userAgent$util_ASSUME_CLIENT_HINTS_SUPPORT)return!0;if(!a&&!(0,goog.labs.userAgent.useClientHints)())return!1;a=module$contents$goog$labs$userAgent$util_getUserAgentData();return!!a&&0<a.brands.length}
function module$contents$goog$labs$userAgent$browser_hasFullVersionList(){return module$contents$goog$labs$userAgent$browser_isAtLeast(module$contents$goog$labs$userAgent$browser_Brand.CHROMIUM,98)}function module$contents$goog$labs$userAgent$browser_matchOpera(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Opera")}
function module$contents$goog$labs$userAgent$browser_matchIE(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Trident")||module$contents$goog$labs$userAgent$util_matchUserAgent("MSIE")}function module$contents$goog$labs$userAgent$browser_matchEdgeHtml(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Edge")}
function module$contents$goog$labs$userAgent$browser_matchEdgeChromium(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(module$contents$goog$labs$userAgent$browser_Brand.EDGE):module$contents$goog$labs$userAgent$util_matchUserAgent("Edg/")}
function module$contents$goog$labs$userAgent$browser_matchOperaChromium(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(module$contents$goog$labs$userAgent$browser_Brand.OPERA):module$contents$goog$labs$userAgent$util_matchUserAgent("OPR")}
function module$contents$goog$labs$userAgent$browser_matchFirefox(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Firefox")||module$contents$goog$labs$userAgent$util_matchUserAgent("FxiOS")}
function module$contents$goog$labs$userAgent$browser_matchSafari(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Safari")&&!(module$contents$goog$labs$userAgent$browser_matchChrome()||module$contents$goog$labs$userAgent$browser_matchCoast()||module$contents$goog$labs$userAgent$browser_matchOpera()||module$contents$goog$labs$userAgent$browser_matchEdgeHtml()||module$contents$goog$labs$userAgent$browser_matchEdgeChromium()||module$contents$goog$labs$userAgent$browser_matchOperaChromium()||
module$contents$goog$labs$userAgent$browser_matchFirefox()||module$contents$goog$labs$userAgent$browser_isSilk()||module$contents$goog$labs$userAgent$util_matchUserAgent("Android"))}function module$contents$goog$labs$userAgent$browser_matchCoast(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?!1:module$contents$goog$labs$userAgent$util_matchUserAgent("Coast")}
function module$contents$goog$labs$userAgent$browser_matchIosWebview(){return(module$contents$goog$labs$userAgent$util_matchUserAgent("iPad")||module$contents$goog$labs$userAgent$util_matchUserAgent("iPhone"))&&!module$contents$goog$labs$userAgent$browser_matchSafari()&&!module$contents$goog$labs$userAgent$browser_matchChrome()&&!module$contents$goog$labs$userAgent$browser_matchCoast()&&!module$contents$goog$labs$userAgent$browser_matchFirefox()&&module$contents$goog$labs$userAgent$util_matchUserAgent("AppleWebKit")}
function module$contents$goog$labs$userAgent$browser_matchChrome(){return module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()?module$contents$goog$labs$userAgent$util_matchUserAgentDataBrand(module$contents$goog$labs$userAgent$browser_Brand.CHROMIUM):(module$contents$goog$labs$userAgent$util_matchUserAgent("Chrome")||module$contents$goog$labs$userAgent$util_matchUserAgent("CriOS"))&&!module$contents$goog$labs$userAgent$browser_matchEdgeHtml()||module$contents$goog$labs$userAgent$browser_isSilk()}
function module$contents$goog$labs$userAgent$browser_matchAndroidBrowser(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Android")&&!(module$contents$goog$labs$userAgent$browser_matchChrome()||module$contents$goog$labs$userAgent$browser_matchFirefox()||module$contents$goog$labs$userAgent$browser_matchOpera()||module$contents$goog$labs$userAgent$browser_isSilk())}const module$contents$goog$labs$userAgent$browser_isOpera=module$contents$goog$labs$userAgent$browser_matchOpera;
goog.labs.userAgent.browser.isOpera=module$contents$goog$labs$userAgent$browser_matchOpera;const module$contents$goog$labs$userAgent$browser_isIE=module$contents$goog$labs$userAgent$browser_matchIE;goog.labs.userAgent.browser.isIE=module$contents$goog$labs$userAgent$browser_matchIE;const module$contents$goog$labs$userAgent$browser_isEdge=module$contents$goog$labs$userAgent$browser_matchEdgeHtml;goog.labs.userAgent.browser.isEdge=module$contents$goog$labs$userAgent$browser_matchEdgeHtml;
const module$contents$goog$labs$userAgent$browser_isEdgeChromium=module$contents$goog$labs$userAgent$browser_matchEdgeChromium;goog.labs.userAgent.browser.isEdgeChromium=module$contents$goog$labs$userAgent$browser_matchEdgeChromium;const module$contents$goog$labs$userAgent$browser_isOperaChromium=module$contents$goog$labs$userAgent$browser_matchOperaChromium;goog.labs.userAgent.browser.isOperaChromium=module$contents$goog$labs$userAgent$browser_matchOperaChromium;
const module$contents$goog$labs$userAgent$browser_isFirefox=module$contents$goog$labs$userAgent$browser_matchFirefox;goog.labs.userAgent.browser.isFirefox=module$contents$goog$labs$userAgent$browser_matchFirefox;const module$contents$goog$labs$userAgent$browser_isSafari=module$contents$goog$labs$userAgent$browser_matchSafari;goog.labs.userAgent.browser.isSafari=module$contents$goog$labs$userAgent$browser_matchSafari;const module$contents$goog$labs$userAgent$browser_isCoast=module$contents$goog$labs$userAgent$browser_matchCoast;
goog.labs.userAgent.browser.isCoast=module$contents$goog$labs$userAgent$browser_matchCoast;const module$contents$goog$labs$userAgent$browser_isIosWebview=module$contents$goog$labs$userAgent$browser_matchIosWebview;goog.labs.userAgent.browser.isIosWebview=module$contents$goog$labs$userAgent$browser_matchIosWebview;const module$contents$goog$labs$userAgent$browser_isChrome=module$contents$goog$labs$userAgent$browser_matchChrome;goog.labs.userAgent.browser.isChrome=module$contents$goog$labs$userAgent$browser_matchChrome;
const module$contents$goog$labs$userAgent$browser_isAndroidBrowser=module$contents$goog$labs$userAgent$browser_matchAndroidBrowser;goog.labs.userAgent.browser.isAndroidBrowser=module$contents$goog$labs$userAgent$browser_matchAndroidBrowser;function module$contents$goog$labs$userAgent$browser_isSilk(){return module$contents$goog$labs$userAgent$util_matchUserAgent("Silk")}goog.labs.userAgent.browser.isSilk=module$contents$goog$labs$userAgent$browser_isSilk;
function module$contents$goog$labs$userAgent$browser_createVersionMap(a){const b={};a.forEach(c=>{b[c[0]]=c[1]});return c=>b[c.find(d=>d in b)]||""}
function module$contents$goog$labs$userAgent$browser_getVersion(){var a=module$contents$goog$labs$userAgent$util_getUserAgent();if(module$contents$goog$labs$userAgent$browser_matchIE())return module$contents$goog$labs$userAgent$browser_getIEVersion(a);a=module$contents$goog$labs$userAgent$util_extractVersionTuples(a);const b=module$contents$goog$labs$userAgent$browser_createVersionMap(a);return module$contents$goog$labs$userAgent$browser_matchOpera()?b(["Version","Opera"]):module$contents$goog$labs$userAgent$browser_matchEdgeHtml()?
b(["Edge"]):module$contents$goog$labs$userAgent$browser_matchEdgeChromium()?b(["Edg"]):module$contents$goog$labs$userAgent$browser_isSilk()?b(["Silk"]):module$contents$goog$labs$userAgent$browser_matchChrome()?b(["Chrome","CriOS","HeadlessChrome"]):(a=a[2])&&a[1]||""}goog.labs.userAgent.browser.getVersion=module$contents$goog$labs$userAgent$browser_getVersion;
function module$contents$goog$labs$userAgent$browser_isVersionOrHigher(a){return 0<=(0,goog.string.internal.compareVersions)(module$contents$goog$labs$userAgent$browser_getVersion(),a)}goog.labs.userAgent.browser.isVersionOrHigher=module$contents$goog$labs$userAgent$browser_isVersionOrHigher;
function module$contents$goog$labs$userAgent$browser_getIEVersion(a){var b=/rv: *([\d\.]*)/.exec(a);if(b&&b[1])return b[1];b="";const c=/MSIE +([\d\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\/(\d.\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0"}else b="7.0";else b=c[1];return b}
function module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a){var b=module$contents$goog$labs$userAgent$util_getUserAgent();if(a===module$contents$goog$labs$userAgent$browser_Brand.IE)return module$contents$goog$labs$userAgent$browser_matchIE()?module$contents$goog$labs$userAgent$browser_getIEVersion(b):"";b=module$contents$goog$labs$userAgent$util_extractVersionTuples(b);const c=module$contents$goog$labs$userAgent$browser_createVersionMap(b);switch(a){case module$contents$goog$labs$userAgent$browser_Brand.OPERA:if(module$contents$goog$labs$userAgent$browser_matchOpera())return c(["Version",
"Opera"]);if(module$contents$goog$labs$userAgent$browser_matchOperaChromium())return c(["OPR"]);break;case module$contents$goog$labs$userAgent$browser_Brand.EDGE:if(module$contents$goog$labs$userAgent$browser_matchEdgeHtml())return c(["Edge"]);if(module$contents$goog$labs$userAgent$browser_matchEdgeChromium())return c(["Edg"]);break;case module$contents$goog$labs$userAgent$browser_Brand.CHROMIUM:if(module$contents$goog$labs$userAgent$browser_matchChrome())return c(["Chrome","CriOS","HeadlessChrome"])}return a===
module$contents$goog$labs$userAgent$browser_Brand.FIREFOX&&module$contents$goog$labs$userAgent$browser_matchFirefox()||a===module$contents$goog$labs$userAgent$browser_Brand.SAFARI&&module$contents$goog$labs$userAgent$browser_matchSafari()||a===module$contents$goog$labs$userAgent$browser_Brand.ANDROID_BROWSER&&module$contents$goog$labs$userAgent$browser_matchAndroidBrowser()||a===module$contents$goog$labs$userAgent$browser_Brand.SILK&&module$contents$goog$labs$userAgent$browser_isSilk()?(a=b[2])&&
a[1]||"":""}
function module$contents$goog$labs$userAgent$browser_versionOf_(a){if(module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand()&&a!==module$contents$goog$labs$userAgent$browser_Brand.SILK){var b=module$contents$goog$labs$userAgent$util_getUserAgentData().brands.find(({brand:c})=>c===a);if(!b||!b.version)return NaN;b=b.version.split(".")}else{b=module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a);if(""===b)return NaN;b=b.split(".")}return 0===b.length?NaN:Number(b[0])}
function module$contents$goog$labs$userAgent$browser_isAtLeast(a,b){(0,goog.asserts.assert)(Math.floor(b)===b,"Major version must be an integer");return module$contents$goog$labs$userAgent$browser_versionOf_(a)>=b}goog.labs.userAgent.browser.isAtLeast=module$contents$goog$labs$userAgent$browser_isAtLeast;
function module$contents$goog$labs$userAgent$browser_isAtMost(a,b){(0,goog.asserts.assert)(Math.floor(b)===b,"Major version must be an integer");return module$contents$goog$labs$userAgent$browser_versionOf_(a)<=b}goog.labs.userAgent.browser.isAtMost=module$contents$goog$labs$userAgent$browser_isAtMost;
class module$contents$goog$labs$userAgent$browser_HighEntropyBrandVersion{constructor(a,b,c){this.brand_=a;this.version_=new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.Version(c);this.useUach_=b}getIfLoaded(){if(this.useUach_){var a=module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.getIfLoaded();if(void 0!==a)return a=a.find(({brand:b})=>this.brand_===b),(0,goog.asserts.assertExists)(a),new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.Version(a.version)}if(module$contents$goog$labs$userAgent$browser_preUachHasLoaded)return this.version_}async load(){if(this.useUach_){var a=
await module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.load();if(void 0!==a)return a=a.find(({brand:b})=>this.brand_===b),(0,goog.asserts.assertExists)(a),new module$exports$goog$labs$userAgent$highEntropy$highEntropyValue.Version(a.version)}else await 0;module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!0;return this.version_}}let module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!1;
async function module$contents$goog$labs$userAgent$browser_loadFullVersions(){module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(!0)&&await module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.load();module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!0}goog.labs.userAgent.browser.loadFullVersions=module$contents$goog$labs$userAgent$browser_loadFullVersions;
goog.labs.userAgent.browser.resetForTesting=()=>{module$contents$goog$labs$userAgent$browser_preUachHasLoaded=!1;module$exports$goog$labs$userAgent$highEntropy$highEntropyData.fullVersionList.resetForTesting()};
function module$contents$goog$labs$userAgent$browser_fullVersionOf(a){let b="";module$contents$goog$labs$userAgent$browser_hasFullVersionList()||(b=module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a));const c=a!==module$contents$goog$labs$userAgent$browser_Brand.SILK&&module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(!0);if(c){if(!module$contents$goog$labs$userAgent$util_getUserAgentData().brands.find(({brand:d})=>d===a))return}else if(""===b)return;return new module$contents$goog$labs$userAgent$browser_HighEntropyBrandVersion(a,
c,b)}goog.labs.userAgent.browser.fullVersionOf=module$contents$goog$labs$userAgent$browser_fullVersionOf;
function module$contents$goog$labs$userAgent$browser_getVersionStringForLogging(a){if(module$contents$goog$labs$userAgent$browser_useUserAgentDataBrand(!0)){var b=module$contents$goog$labs$userAgent$browser_fullVersionOf(a);if(b){if(b=b.getIfLoaded())return b.toVersionStringForLogging();b=module$contents$goog$labs$userAgent$util_getUserAgentData().brands.find(({brand:c})=>c===a);(0,goog.asserts.assertExists)(b);return b.version}return""}return module$contents$goog$labs$userAgent$browser_getFullVersionFromUserAgentString(a)}
goog.labs.userAgent.browser.getVersionStringForLogging=module$contents$goog$labs$userAgent$browser_getVersionStringForLogging;goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};const module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE={};
class module$contents$goog$html$SafeHtml_SafeHtml{constructor(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=b===module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE?a:"";this.implementsGoogStringTypedString=!0}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}toString(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}static unwrap(a){return module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(a).toString()}static unwrapTrustedHTML(a){if(a instanceof module$contents$goog$html$SafeHtml_SafeHtml&&
a.constructor===module$contents$goog$html$SafeHtml_SafeHtml)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail(`expected object of type SafeHtml, got '${a}' of type `+goog.typeOf(a));return"type_error:SafeHtml"}static htmlEscape(a){if(a instanceof module$contents$goog$html$SafeHtml_SafeHtml)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a))}static htmlEscapePreservingNewlines(a){if(a instanceof
module$contents$goog$html$SafeHtml_SafeHtml)return a;a=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(a);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(a)))}static htmlEscapePreservingNewlinesAndSpaces(a){if(a instanceof module$contents$goog$html$SafeHtml_SafeHtml)return a;a=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(a);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(a)))}static comment(a){return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!--"+
goog.string.internal.htmlEscape(a)+"--\x3e")}static create(a,b,c){module$contents$goog$html$SafeHtml_SafeHtml.verifyTagName(String(a));return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)}static verifyTagName(a){if(!module$contents$goog$html$SafeHtml_VALID_NAMES_IN_TAG.test(a))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Invalid tag name <${a}>.`:"");if(a.toUpperCase()in module$contents$goog$html$SafeHtml_NOT_ALLOWED_TAG_NAMES)throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?
`Tag name <${a}> is not allowed for SafeHtml.`:"");}static createIframe(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);const e={};e.src=a||null;e.srcdoc=b&&module$contents$goog$html$SafeHtml_SafeHtml.unwrap(b);a=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes(e,{sandbox:""},c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)}static createSandboxIframe(a,b,c,d){if(!module$contents$goog$html$SafeHtml_SafeHtml.canUseSandboxIframe())throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?
"The browser does not support sandboxed iframes.":"");const e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox="";a=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes(e,{},c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)}static canUseSandboxIframe(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype}static createScriptSrc(a,b){goog.html.TrustedResourceUrl.unwrap(a);
a=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes({src:a},{},b);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",a)}static createScript(a,b){for(var c in b)if(Object.prototype.hasOwnProperty.call(b,c)){var d=c.toLowerCase();if("language"==d||"src"==d||"text"==d)throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Cannot set "${d}" attribute`:"");}c="";a=module$contents$goog$array_concat(a);for(d=0;d<
a.length;d++)c+=module$contents$goog$html$SafeScript_SafeScript.unwrap(a[d]);a=module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",b,a)}static createStyle(a,b){b=module$contents$goog$html$SafeHtml_SafeHtml.combineAttributes({type:"text/css"},{},b);let c="";a=module$contents$goog$array_concat(a);for(let d=0;d<a.length;d++)c+=module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.unwrap(a[d]);
a=module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",b,a)}static createMetaRefresh(a,b){a=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(module$contents$goog$labs$userAgent$browser_matchIE()||module$contents$goog$labs$userAgent$browser_matchEdgeHtml())&&goog.string.internal.contains(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'");return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",
{"http-equiv":"refresh",content:(b||0)+"; url="+a})}static join(a,b){a=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(a);const c=[],d=e=>{Array.isArray(e)?e.forEach(d):(e=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape(e),c.push(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(e)))};b.forEach(d);return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c.join(module$contents$goog$html$SafeHtml_SafeHtml.unwrap(a)))}static concat(a){return module$contents$goog$html$SafeHtml_SafeHtml.join(module$contents$goog$html$SafeHtml_SafeHtml.EMPTY,
Array.prototype.slice.call(arguments))}static createSafeHtmlSecurityPrivateDoNotAccessOrElse(a){const b=goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createHTML(a):a;return new module$contents$goog$html$SafeHtml_SafeHtml(a,module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE)}static createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(a,b,c){b=`<${a}`+module$contents$goog$html$SafeHtml_SafeHtml.stringifyAttributes(a,b);null==c?c=[]:Array.isArray(c)||(c=[c]);goog.dom.tags.isVoidTag(a.toLowerCase())?
(goog.asserts.assert(!c.length,`Void tag <${a}> does not allow content.`),b+=">"):(c=module$contents$goog$html$SafeHtml_SafeHtml.concat(c),b+=">"+module$contents$goog$html$SafeHtml_SafeHtml.unwrap(c)+"</"+a+">");return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b)}static stringifyAttributes(a,b){let c="";if(b)for(let d in b)if(Object.prototype.hasOwnProperty.call(b,d)){if(!module$contents$goog$html$SafeHtml_VALID_NAMES_IN_TAG.test(d))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?
`Invalid attribute name "${d}".`:"");const e=b[d];null!=e&&(c+=" "+module$contents$goog$html$SafeHtml_getAttrNameAndValue(a,d,e))}return c}static combineAttributes(a,b,c){const d={};for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=a[e]);for(const f in b)Object.prototype.hasOwnProperty.call(b,f)&&(goog.asserts.assert(f.toLowerCase()==f,"Must be lower case"),d[f]=b[f]);if(c)for(const f in c)if(Object.prototype.hasOwnProperty.call(c,
f)){e=f.toLowerCase();if(e in a)throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Cannot override "${e}" attribute, got "`+f+'" with value "'+c[f]+'"':"");e in b&&delete d[e];d[f]=c[f]}return d}}module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES=goog.DEBUG;module$contents$goog$html$SafeHtml_SafeHtml.SUPPORT_STYLE_ATTRIBUTE=!0;module$contents$goog$html$SafeHtml_SafeHtml.from=module$contents$goog$html$SafeHtml_SafeHtml.htmlEscape;
const module$contents$goog$html$SafeHtml_VALID_NAMES_IN_TAG=/^[a-zA-Z0-9-]+$/,module$contents$goog$html$SafeHtml_URL_ATTRIBUTES={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0},module$contents$goog$html$SafeHtml_NOT_ALLOWED_TAG_NAMES={[goog.dom.TagName.APPLET]:!0,[goog.dom.TagName.BASE]:!0,[goog.dom.TagName.EMBED]:!0,[goog.dom.TagName.IFRAME]:!0,[goog.dom.TagName.LINK]:!0,[goog.dom.TagName.MATH]:!0,[goog.dom.TagName.META]:!0,[goog.dom.TagName.OBJECT]:!0,[goog.dom.TagName.SCRIPT]:!0,
[goog.dom.TagName.STYLE]:!0,[goog.dom.TagName.SVG]:!0,[goog.dom.TagName.TEMPLATE]:!0};
function module$contents$goog$html$SafeHtml_getAttrNameAndValue(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if("style"==b.toLowerCase())if(module$contents$goog$html$SafeHtml_SafeHtml.SUPPORT_STYLE_ATTRIBUTE)c=module$contents$goog$html$SafeHtml_getStyleValue(c);else throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute "style" not supported.':"");else{if(/^on/i.test(b))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?
`Attribute "${b}`+'" requires goog.string.Const value, "'+c+'" given.':"");if(b.toLowerCase()in module$contents$goog$html$SafeHtml_URL_ATTRIBUTES)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);else if("string"===typeof c)c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?`Attribute "${b}" on tag "${a}`+'" requires goog.html.SafeUrl, goog.string.Const, or string, value "'+
c+'" given.':"");}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());goog.asserts.assert("string"===typeof c||"number"===typeof c,"String or number value expected, got "+typeof c+" with value: "+c);return`${b}="`+goog.string.internal.htmlEscape(String(c))+'"'}
function module$contents$goog$html$SafeHtml_getStyleValue(a){if(!goog.isObject(a))throw Error(module$contents$goog$html$SafeHtml_SafeHtml.ENABLE_ERROR_MESSAGES?'The "style" attribute requires goog.html.SafeStyle or map of style properties, '+typeof a+" given: "+a:"");a instanceof module$contents$goog$html$SafeStyle_SafeStyle||(a=module$contents$goog$html$SafeStyle_SafeStyle.create(a));return module$contents$goog$html$SafeStyle_SafeStyle.unwrap(a)}
module$contents$goog$html$SafeHtml_SafeHtml.DOCTYPE_HTML=function(){return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>")}();module$contents$goog$html$SafeHtml_SafeHtml.EMPTY=new module$contents$goog$html$SafeHtml_SafeHtml(goog.global.trustedTypes&&goog.global.trustedTypes.emptyHTML||"",module$contents$goog$html$SafeHtml_CONSTRUCTOR_TOKEN_PRIVATE);module$contents$goog$html$SafeHtml_SafeHtml.BR=function(){return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>")}();
goog.html.SafeHtml=module$contents$goog$html$SafeHtml_SafeHtml;goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeHtml_SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeScript_SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeStyle_SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return module$contents$goog$html$SafeStyleSheet_SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};
goog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue(function(){if(goog.DEBUG&&"undefined"===typeof document)return!1;var a=document.createElement("div"),b=document.createElement("div");b.appendChild(document.createElement("div"));a.appendChild(b);if(goog.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(module$contents$goog$html$SafeHtml_SafeHtml.EMPTY);return!b.parentElement});
goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS&&a.tagName){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+a.tagName+".");}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};
goog.dom.safe.setInnerHtmlFromConstant=function(a,b){goog.dom.safe.setInnerHtml(a,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Constant HTML to be immediatelly used."),goog.string.Const.unwrap(b)))};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setFormElementAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLFormElement(a).action=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setButtonFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLButtonElement(a).formAction=goog.html.SafeUrl.unwrap(b)};
goog.dom.safe.setInputFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLInputElement(a).formAction=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=module$contents$goog$html$SafeStyle_SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b))};
goog.dom.safe.setAnchorHref=function(a,b){goog.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setAudioSrc=function(a,b){goog.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:audio\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};
goog.dom.safe.setVideoSrc=function(a,b){goog.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:video\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setEmbedSrc=function(a,b){goog.dom.asserts.assertIsHTMLEmbedElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setFrameSrc=function(a,b){goog.dom.asserts.assertIsHTMLFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};
goog.dom.safe.setIframeSrc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};goog.dom.safe.setIframeSrcdoc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.asserts.assertIsHTMLLinkElement(a);a.rel=c;goog.string.internal.caseInsensitiveContains(c,"stylesheet")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'),a.href=goog.html.TrustedResourceUrl.unwrap(b),(b=goog.dom.safe.getStyleNonce(a.ownerDocument&&a.ownerDocument.defaultView))&&a.setAttribute("nonce",b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrap(b):
b instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrap(b):goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitizeAssertUnchanged(b))};goog.dom.safe.setObjectData=function(a,b){goog.dom.asserts.assertIsHTMLObjectElement(a);a.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);goog.dom.safe.setNonceForScriptElement_(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};
goog.dom.safe.setScriptContent=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);goog.dom.safe.setNonceForScriptElement_(a);a.textContent=module$contents$goog$html$SafeScript_SafeScript.unwrapTrustedScript(b)};goog.dom.safe.setNonceForScriptElement_=function(a){const b=goog.dom.safe.getScriptNonce(a.ownerDocument&&a.ownerDocument.defaultView);b&&a.setAttribute("nonce",b)};
goog.dom.safe.setLocationHref=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.assignLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(goog.html.SafeUrl.unwrap(b))};
goog.dom.safe.replaceLocation=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(goog.html.SafeUrl.unwrap(b))};goog.dom.safe.openInWindow=function(a,b,c,d){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitizeAssertUnchanged(a);b=b||goog.global;c=c instanceof goog.string.Const?goog.string.Const.unwrap(c):c||"";return void 0!==d?b.open(goog.html.SafeUrl.unwrap(a),c,d):b.open(goog.html.SafeUrl.unwrap(a),c)};
goog.dom.safe.parseFromStringHtml=function(a,b){return goog.dom.safe.parseFromString(a,b,"text/html")};goog.dom.safe.parseFromString=function(a,b,c){return a.parseFromString(module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b),c)};
goog.dom.safe.createImageFromBlob=function(a){if(!/^image\/.*/g.test(a.type))throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");var b=goog.global.URL.createObjectURL(a);a=new goog.global.Image;a.onload=function(){goog.global.URL.revokeObjectURL(b)};a.src=b;return a};goog.dom.safe.createContextualFragment=function(a,b){return a.createContextualFragment(module$contents$goog$html$SafeHtml_SafeHtml.unwrapTrustedHTML(b))};
goog.dom.safe.getScriptNonce=function(a){return goog.dom.safe.getNonce_("script[nonce]",a)};goog.dom.safe.getStyleNonce=function(a){return goog.dom.safe.getNonce_('style[nonce],link[rel="stylesheet"][nonce]',a)};goog.dom.safe.NONCE_PATTERN_=/^[\w+/_-]+[=]{0,2}$/;goog.dom.safe.getNonce_=function(a,b){b=(b||goog.global).document;return b.querySelector?(a=b.querySelector(a))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.dom.safe.NONCE_PATTERN_.test(a)?a:"":""};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\u00a0",ZERO_WIDTH_SPACE:"\u200b"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;
goog.string.subs=function(a,b){const c=a.split("%s");let d="";const e=Array.prototype.slice.call(arguments,1);for(;e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\t\n\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};
goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\u0080"<=a&&"\ufffd">=a};goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n")};goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ")};
goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")};goog.string.trim=goog.string.internal.trim;goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"")};goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;
goog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;const d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length);for(let g=0;g<f;g++){c=d[g];const h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\D+/g)};
goog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\.\d+|\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "))};goog.string.newLineToBr=goog.string.internal.newLineToBr;
goog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};
goog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};
goog.string.unescapeEntitiesUsingDom_=function(a,b){const c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'};let d;d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(e,f){let g=c[e];if(g)return g;"#"==f.charAt(0)&&(f=Number("0"+f.slice(1)),isNaN(f)||(g=String.fromCharCode(f)));g||(goog.dom.safe.setInnerHtml(d,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."),
e+" ")),g=d.firstChild.nodeValue.slice(0,-1));return c[e]=g})};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(b,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return'"';default:return"#"!=c.charAt(0)||(c=Number("0"+c.slice(1)),isNaN(c))?b:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};
goog.string.preserveSpaces=function(a){return a.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){const c=b.length;for(let d=0;d<c;d++){const e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};
goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"};goog.string.jsEscapeCache_={"'":"\\'"};
goog.string.quote=function(a){a=String(a);const b=['"'];for(let c=0;c<a.length;c++){const d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push('"');return b.join("")};goog.string.escapeString=function(a){const b=[];for(let c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};
goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];let b;const c=a.charCodeAt(0);if(31<c&&127>c)b=a;else{if(256>c){if(b="\\x",16>c||256<c)b+="0"}else b="\\u",4096>c&&(b+="0");b+=c.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=b};goog.string.contains=goog.string.internal.contains;
goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){let d=a;0<=b&&b<a.length&&0<c&&(d=a.slice(0,b)+a.slice(b+c));return d};goog.string.remove=function(a,b){return a.replace(b,"")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,"")};
goog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,c.replace(/\$/g,"$$$$"))};goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};
goog.string.padNumber=function(a,b,c){if(!Number.isFinite(a))return String(a);a=void 0!==c?a.toFixed(c):String(a);c=a.indexOf(".");-1===c&&(c=a.length);const d="-"===a[0]?"-":"";d&&(a=a.substring(1));return d+goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};
goog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){let b=0;for(let c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){const b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};
goog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(b,c){return c.toUpperCase()})};goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};goog.string.toTitleCase=function(a,b){b="string"===typeof b?goog.string.regExpEscape(b):"\\s";return a.replace(new RegExp("(^"+(b?"|["+b+"]+":"")+")([a-z])","g"),function(c,d,e){return d+e.toUpperCase()})};
goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.slice(1)).toLowerCase()};goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return"string"===typeof a?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);const d=[];for(;0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};
goog.string.lastComponent=function(a,b){if(b)"string"==typeof b&&(b=[b]);else return a;let c=-1;for(let d=0;d<b.length;d++){if(""==b[d])continue;const e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};
goog.string.editDistance=function(a,b){const c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.string.path={};goog.string.path.baseName=function(a){const b=a.lastIndexOf("/")+1;return a.slice(b)};goog.string.path.basename=goog.string.path.baseName;goog.string.path.dirname=function(a){const b=a.lastIndexOf("/")+1;a=a.slice(0,b);/^\/+$/.test(a)||(a=a.replace(/\/+$/,""));return a};goog.string.path.extension=function(a){a=goog.string.path.baseName(a).replace(/\.+/g,".");const b=a.lastIndexOf(".");return 0>=b?"":a.slice(b+1)};
goog.string.path.join=function(a){let b=arguments[0];for(let c=1;c<arguments.length;c++){const d=arguments[c];b=goog.string.startsWith(d,"/")?d:""==b||goog.string.endsWith(b,"/")?b+d:b+("/"+d)}return b};
goog.string.path.normalizePath=function(a){if(""==a)return".";let b="";goog.string.startsWith(a,"/")&&(b="/",goog.string.startsWith(a,"//")&&!goog.string.startsWith(a,"///")&&(b="//"));a=a.split("/");const c=[];for(let d=0;d<a.length;d++){const e=a[d];""!=e&&"."!=e&&(".."!=e||!b&&!c.length||".."==module$contents$goog$array_peek(c)?c.push(e):c.pop())}return b+c.join("/")||"."};goog.string.path.split=function(a){const b=goog.string.path.dirname(a);a=goog.string.path.baseName(a);return[b,a]};const DEBUG_WASI$$module$src$filesystem$wasi=!1;function assertLeadingSlash$$module$src$filesystem$wasi(a){return/^\//g.test(a)?a:`/${a}`}function removeLeadingSlash$$module$src$filesystem$wasi(a){return a.replace(/^\//g,"")}function shouldOpenReader$$module$src$filesystem$wasi(a){return(a&(WASI_RIGHT_FD_READ$$module$src$filesystem$constants|WASI_RIGHT_FD_READDIR$$module$src$filesystem$constants))!==goog.global.BigInt(0)}
function performanceNowPoly$$module$src$filesystem$wasi(){if("undefined"===typeof performance||"undefined"===typeof performance.now){const a=Date.now();return Date.now()-a}return performance.now()}function concatUint8Arrays$$module$src$filesystem$wasi(a){var b=a.reduce((d,e)=>d+e.length,0);if(0!==a.length){b=new Uint8Array(b);var c=0;for(const d of a)b.set(d,c),c+=d.length;return b}}
const WASI$$module$src$filesystem$wasi=function({}){this.fd=Array.from({length:4});this.fd[0]={fd:0,path:"/dev/stdin",seekPos:goog.global.BigInt(0),buffers:[]};this.fd[1]={fd:1,path:"/dev/stdout",seekPos:goog.global.BigInt(0),buffers:[]};this.fd[2]={fd:2,path:"/dev/stderr",seekPos:goog.global.BigInt(0),buffers:[]};this.fd[3]={fd:3,path:"/",seekPos:goog.global.BigInt(0),buffers:[]};this.getMemory=this.getMemory.bind(this);this.CPUTIME_START=0};
WASI$$module$src$filesystem$wasi.prototype.start=function(a){this.CPUTIME_START=performanceNowPoly$$module$src$filesystem$wasi();a.exports._start()};WASI$$module$src$filesystem$wasi.prototype.getImports=function(a){const b={};a=WebAssembly.Module.imports(a);for(const c of a)"function"===c.kind&&c.module.startsWith("wasi_")&&("object"!==typeof b[c.module]&&(b[c.module]={}),b[c.module][c.name]=this[c.name].bind(this));return b};
WASI$$module$src$filesystem$wasi.prototype.setMemory=function(a){this.memory=a};WASI$$module$src$filesystem$wasi.prototype.getMemory=function(){this.view&&this.view.buffer&&this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer));return this.view};WASI$$module$src$filesystem$wasi.prototype.msToNs=function(a){const b=Math.trunc(a);a=goog.global.BigInt(Math.round(1E6*(a-b)));return goog.global.BigInt(b)*goog.global.BigInt(1E6)+a};
WASI$$module$src$filesystem$wasi.prototype.now=function(a){switch(a){case WASI_CLOCK_MONOTONIC$$module$src$filesystem$constants:return Math.floor(performanceNowPoly$$module$src$filesystem$wasi());case WASI_CLOCK_REALTIME$$module$src$filesystem$constants:return this.msToNs(Date.now());case WASI_CLOCK_PROCESS_CPUTIME_ID$$module$src$filesystem$constants:case WASI_CLOCK_THREAD_CPUTIME_ID$$module$src$filesystem$constants:return Math.floor(performanceNowPoly$$module$src$filesystem$wasi()-this.CPUTIME_START);
default:return 0}};WASI$$module$src$filesystem$wasi.prototype.args_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("args_get",a,b,module$src$filesystem$constants);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.args_sizes_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("args_sizes_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.clock_res_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("args_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.clock_time_get=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("clock_time_get",a,b,c,arguments);const d=this.getMemory(),e=this.now(a);d.setBigUint64(c,goog.global.BigInt(e),!0);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.environ_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("environ_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.environ_sizes_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("environ_sizes_get",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_advise=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_advise",a,b,c,d,arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_allocate=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_allocate",a,b,c,arguments);return WASI_ENOSYS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_close=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_close",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_datasync=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_datasync",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_fdstat_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_fdstat_get",a,b,arguments);const c=this.getMemory();c.setUint8(b+4,WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants);c.setUint16(b+2,0,!0);c.setUint16(b+4,0,!0);c.setBigUint64(b+8,goog.global.BigInt(RIGHTS_REGULAR_FILE_BASE$$module$src$filesystem$constants),!0);c.setBigUint64(b+8+8,goog.global.BigInt(RIGHTS_REGULAR_FILE_INHERITING$$module$src$filesystem$constants),
!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_fdstat_set_flags=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_fdstat_set_flags",a,b,arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_fdstat_set_rights=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_fdstat_set_rights",a,b,c,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_filestat_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_filestat_get",a,b,arguments);let c=0;this.fd[a]&&(c=this.fd[a].buffers.reduce(function(e,f){return e+(null==f?void 0:f.byteLength)?null==f?void 0:f.byteLength:0},0));const d=this.getMemory();d.setBigUint64(b,goog.global.BigInt(a),!0);b+=8;d.setBigUint64(b,goog.global.BigInt(a),!0);b+=8;d.setUint8(b,WASI_FILETYPE_REGULAR_FILE$$module$src$filesystem$constants);b+=8;d.setBigUint64(b,
goog.global.BigInt(1),!0);b+=8;d.setBigUint64(b,goog.global.BigInt(c),!0);b+=8;d.setBigUint64(b,this.msToNs(this.CPUTIME_START),!0);b+=8;d.setBigUint64(b,this.msToNs(this.CPUTIME_START),!0);d.setBigUint64(b+8,this.msToNs(this.CPUTIME_START),!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_filestat_set_size=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_filestat_set_size",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_filestat_set_times=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_filestat_set_times",a,b,c,d,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_pread=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_pread",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_prestat_dir_name=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_prestat_dir_name",a,b,c,this.fd[a]);if(!this.fd[a]&&!this.fd[a-1])return WASI_EBADF$$module$src$filesystem$constants;({path:c}=this.fd[a]);a=this.getMemory();c=encoder$$module$src$utils$text_encoders.encode(c);(new Uint8Array(a.buffer)).set(c,b);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_prestat_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_prestat_get",a,b,this.fd[a]);if(!this.fd[a])return WASI_EBADF$$module$src$filesystem$constants;var {path:c}=this.fd[a];a=this.getMemory();c=encoder$$module$src$utils$text_encoders.encode(c);a.setUint8(b,WASI_PREOPENTYPE_DIR$$module$src$filesystem$constants);a.setUint32(b+4,c.byteLength,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_pwrite=function(a,b,c,d,e){console.log("fd_pwrite",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_read=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_read",a,b,c,d,arguments);const e=this.fd[a]&&this.fd[a].buffers;var f=e.reduce((l,p)=>l+p.length,0);const g=this.getMemory();if(e&&0!==e.length){var h=Number(this.fd[a].seekPos),k=0,m=!1;if(h>=f)return k=g.getUint32(b,!0),g.setUint8(k,"\x00"),g.setUint32(d,0,!0),WASI_ESUCCESS$$module$src$filesystem$constants;for(f=0;f<c;f++){var n=b+8*f;const l=g.getUint32(n,!0);n=g.getUint32(n+
4,!0);m||(k+=n,Array.from({length:n},(p,q)=>q).reduce((p,q)=>{if(m)return p;const [u,t]=p;let x=p=0,r=!1,y=0,v;if(0===q)for(;!r;)v=e[p]?e[p].byteLength:0,y<=h&&v+y>h?(r=!0,x=h-y):(y+=v,p+=1);else p=u,x=t;e[p]?(g.setUint8(l+q,e[p][x]),x+1>=e[p].byteLength?(p=u+1,x=0):x+=1):(g.setUint8(l+q,"\x00"),h+=q,m=!0);return[p,x]},[0,0]),m||(h+=n))}this.fd[a].seekPos=goog.global.BigInt(h);g.setUint32(d,k,!0);return WASI_ESUCCESS$$module$src$filesystem$constants}console.error("Reading non existent file",a,this.fd[a])};
WASI$$module$src$filesystem$wasi.prototype.fd_readdir=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_readdir",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_renumber=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_renumber",a,b,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_seek=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_seek",a,b,c,d,arguments);const e=this.getMemory();switch(c){case WASI_WHENCE_CUR$$module$src$filesystem$constants:var f;this.fd[a].seekPos=(null!=(f=this.fd[a].seekPos)?f:goog.global.BigInt(0))+goog.global.BigInt(b);break;case WASI_WHENCE_END$$module$src$filesystem$constants:f=(this.fd[a].buffers||[]).reduce((g,h)=>g+h.length,0);this.fd[a].seekPos=BigInt(f)+BigInt(b);break;
case WASI_WHENCE_SET$$module$src$filesystem$constants:this.fd[a].seekPos=BigInt(b)}e.setBigUint64(d,this.fd[a].seekPos,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.fd_sync=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_sync",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_tell=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_tell",a,b,arguments);const c=this.getMemory();this.fd[a].seekPos||(this.fd[a].seekPos=goog.global.BigInt(0));c.setBigUint64(b,this.fd[a].seekPos,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.fd_write=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("fd_write",{fd:a,iovs:b,iovsLength:c,nwritten:d});let e=!1;const f=this.getMemory();this.fd[a].buffers=this.fd[a].buffers||[];this.fd[a].seekPos===goog.global.BigInt(0)&&0<this.fd[a].buffers.length&&(e=!0);let g=0;for(let m=0;m<c;m++){var h=b+8*m,k=f.getUint32(h,!0);h=f.getUint32(h+4,!0);g+=h;k=new Uint8Array(f.buffer,k,h);e?this.fd[a].buffers.unshift(k.slice(0,h)):this.fd[a].buffers.push(k.slice(0,
h))}this.fd[a].seekPos+=goog.global.BigInt(g);f.setUint32(d,g,!0);[1,2].includes(a)&&console.log(decoder$$module$src$utils$text_encoders.decode(concatUint8Arrays$$module$src$filesystem$wasi(this.fd[a].buffers)));return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_create_directory=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_create_directory",a,b,c,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.path_filestat_get=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_filestat_get",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_filestat_set_times=function(a,b,c,d,e,f,g){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_filestat_set_times",a,b,c,d,e,f,g,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.path_link=function(a,b,c,d,e,f,g){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_link",a,b,c,d,e,f,g,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.path_open=function(a,b,c,d,e,f,g,h,k){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_open",a,b,c,d,e,f,g,h,k,arguments);const m=this.getMemory();var n=(this.fd[a]||{path:"/"}).path,l=new Uint8Array(m.buffer,c,d);l=decoder$$module$src$utils$text_encoders.decode(l);const p=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(goog.string.path.join(3===a?"":n,l)));DEBUG_WASI$$module$src$filesystem$wasi&&console.log(";; opening path",
p,"withREader",shouldOpenReader$$module$src$filesystem$wasi(f));if(p.startsWith("/..")||"/._"===p||"/.AppleDouble"===p)return WASI_EBADF$$module$src$filesystem$constants;(n=Object.values(this.fd).find(q=>q.path===p&&Array.isArray(q.buffers)))?l=n.fd:(l=this.fd.length,this.fd[l]={fd:l});this.fd[l]={...this.fd[l],path:p,type:"file",seekPos:goog.global.BigInt(0),buffers:n?this.fd[l].buffers:[]};shouldOpenReader$$module$src$filesystem$wasi(f)&&DEBUG_WASI$$module$src$filesystem$wasi&&console.log("should open a read handle for",
p);m.setUint32(k,l,!0);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_readlink=function(a,b,c,d,e,f){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_readlink",a,b,c,d,e,f,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_remove_directory=function(a,b,c){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_remove_directory",a,b,c);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.path_rename=function(a,b,c,d,e,f){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_rename",a,b,c,d,e,f,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.path_symlink=function(a,b,c,d,e){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_symlink",a,b,c,d,e,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.path_unlink_file=function(a,b,c){3<a&&DEBUG_WASI$$module$src$filesystem$wasi&&console.log("path_unlink_file",a,b,c,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.poll_oneoff=function(a,b,c,d){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("poll_oneoff",a,b,c,d,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.proc_exit=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("proc_exit",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.proc_raise=function(a){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("proc_raise",a,arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.random_get=function(a,b){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("random_get",a,b);return WASI_ESUCCESS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.sched_yield=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sched_yield",arguments);return WASI_ESUCCESS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.sock_recv=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sock_recv",arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.sock_send=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sock_send",arguments);return WASI_ENOSYS$$module$src$filesystem$constants};
WASI$$module$src$filesystem$wasi.prototype.sock_shutdown=function(){DEBUG_WASI$$module$src$filesystem$wasi&&console.log("sock_shutdown",arguments);return WASI_ENOSYS$$module$src$filesystem$constants};WASI$$module$src$filesystem$wasi.prototype.findBuffers=function(a){const b=Object.values(this.fd).find(({path:c})=>c===a);return b&&b.buffers};
WASI$$module$src$filesystem$wasi.prototype.readdir=function(a){const b=(assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a))+"/").replace("//","/"),c=[];Object.values(this.fd).forEach(({path:d})=>!/\//g.test(d.replace(b,""))&&c.push(d));return c.map(d=>removeLeadingSlash$$module$src$filesystem$wasi(d.replace(b,""))).filter(d=>!!d)};
WASI$$module$src$filesystem$wasi.prototype.writeFile=function(a,b){const c=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));a=Object.keys(this.fd).length;const d=Object.values(this.fd).find(({path:e})=>e===c);this.fd[a]={fd:a,path:c,seekPos:goog.global.BigInt(0),buffers:[b]};d&&delete this.fd[d]};
WASI$$module$src$filesystem$wasi.prototype.appendFile=function(a,b){var c=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));(c=this.findBuffers(c))?c.push(b):console.error(`Can't append to non-existing file ${a}`)};WASI$$module$src$filesystem$wasi.prototype.readFile=function(a){a=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));if(a=this.findBuffers(a))return concatUint8Arrays$$module$src$filesystem$wasi(a)};
WASI$$module$src$filesystem$wasi.prototype.readStdOut=function(){const a=Object.values(this.fd[0]);return concatUint8Arrays$$module$src$filesystem$wasi(a&&a.buffers||[])};WASI$$module$src$filesystem$wasi.prototype.unlink=function(a){const b=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a));(a=Object.values(this.fd).find(({path:c})=>c===b))?delete this.fd[a]:console.error(`While trying to unlink ${b}, path not found`)};
WASI$$module$src$filesystem$wasi.prototype.mkdir=function(a){const b=assertLeadingSlash$$module$src$filesystem$wasi((0,goog.string.path.normalizePath)(a)),c=[];Object.values(this.fd).forEach(({path:d})=>d.startsWith(b)&&c.push(d));0<c.length?console.warn(`mkdir: path ${a} already exists`):(a=Object.keys(this.fd).length,this.fd[a]={fd:a,path:b})};var module$src$filesystem$wasi={};module$src$filesystem$wasi.WASI=WASI$$module$src$filesystem$wasi;const CompressionMethod$$module$src$zlib$zlib={DEFLATE:8,RESERVED:15};var module$src$zlib$zlib={};module$src$zlib$zlib.CompressionMethod=CompressionMethod$$module$src$zlib$zlib;/*
 zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */
function Huffman$$module$src$zlib$huffman(a){const b=a.length;let c=0,d=Number.POSITIVE_INFINITY,e,f,g,h;let k,m;for(k=0;k<b;++k)a[k]>c&&(c=a[k]),a[k]<d&&(d=a[k]);const n=1<<c,l=new Uint32Array(n);e=1;f=0;for(g=2;e<=c;){for(k=0;k<b;++k)if(a[k]===e){h=0;var p=f;for(m=0;m<e;++m)h=h<<1|p&1,p>>=1;p=e<<16|k;for(m=h;m<n;m+=g)l[m]=p;++f}++e;f<<=1;g<<=1}return[l,c,d]}var module$src$zlib$huffman={};module$src$zlib$huffman.Huffman=Huffman$$module$src$zlib$huffman;const ZLIB_RAW_INFLATE_BUFFER_SIZE$$module$src$zlib$rawinflate=32768;
function RawInflate$$module$src$zlib$rawinflate(a,b){this.blocks=[];this.bufferSize=ZLIB_RAW_INFLATE_BUFFER_SIZE$$module$src$zlib$rawinflate;this.bitsbuflen=this.bitsbuf=this.ip=this.totalpos=0;this.input=new Uint8Array(a);this.bfinal=!1;this.bufferType=RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE;this.resize=!1;if(b||!(b={}))b.index&&(this.ip=b.index),b.bufferSize&&(this.bufferSize=b.bufferSize),b.bufferType&&(this.bufferType=b.bufferType),b.resize&&(this.resize=b.resize);switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:this.op=
RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength;this.output=new Uint8Array(RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength+this.bufferSize+RawInflate$$module$src$zlib$rawinflate.MaxCopyLength);break;case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:this.op=0;this.output=new Uint8Array(this.bufferSize);break;default:throw Error("invalid inflate mode");}}RawInflate$$module$src$zlib$rawinflate.BufferType={BLOCK:0,ADAPTIVE:1};
RawInflate$$module$src$zlib$rawinflate.prototype.decompress=function(){for(;!this.bfinal;)this.parseBlock();switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:return this.concatBufferBlock();case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:return this.concatBufferDynamic();default:throw Error("invalid inflate mode");}};RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength=32768;RawInflate$$module$src$zlib$rawinflate.MaxCopyLength=258;
RawInflate$$module$src$zlib$rawinflate.Order=function(a){return new Uint16Array(a)}([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);RawInflate$$module$src$zlib$rawinflate.LengthCodeTable=function(a){return new Uint16Array(a)}([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258]);RawInflate$$module$src$zlib$rawinflate.LengthExtraTable=function(a){return new Uint8Array(a)}([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0]);
RawInflate$$module$src$zlib$rawinflate.DistCodeTable=function(a){return new Uint16Array(a)}([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]);RawInflate$$module$src$zlib$rawinflate.DistExtraTable=function(a){return new Uint8Array(a)}([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);
RawInflate$$module$src$zlib$rawinflate.FixedLiteralLengthTable=function(a){return a}(function(){const a=new Uint8Array(288);let b,c;b=0;for(c=a.length;b<c;++b)a[b]=143>=b?8:255>=b?9:279>=b?7:8;return Huffman$$module$src$zlib$huffman(a)}());RawInflate$$module$src$zlib$rawinflate.FixedDistanceTable=function(a){return a}(function(){const a=new Uint8Array(30);let b,c;b=0;for(c=a.length;b<c;++b)a[b]=5;return Huffman$$module$src$zlib$huffman(a)}());
RawInflate$$module$src$zlib$rawinflate.prototype.parseBlock=function(){let a=this.readBits(3);a&1&&(this.bfinal=!0);a>>>=1;switch(a){case 0:this.parseUncompressedBlock();break;case 1:this.parseFixedHuffmanBlock();break;case 2:this.parseDynamicHuffmanBlock();break;default:throw Error("unknown BTYPE: "+a);}};
RawInflate$$module$src$zlib$rawinflate.prototype.readBits=function(a){let b=this.bitsbuf,c=this.bitsbuflen;const d=this.input;let e=this.ip;if(e+(a-c+7>>3)>=d.length)throw Error("input buffer is broken");for(;c<a;)b|=d[e++]<<c,c+=8;this.bitsbuf=b>>>a;this.bitsbuflen=c-a;this.ip=e;return b&(1<<a)-1};
RawInflate$$module$src$zlib$rawinflate.prototype.readCodeByTable=function(a){let b=this.bitsbuf,c=this.bitsbuflen;var d=this.input;let e=this.ip;var f=d.length;const g=a[0];for(a=a[1];c<a&&!(e>=f);)b|=d[e++]<<c,c+=8;d=g[b&(1<<a)-1];f=d>>>16;if(f>c)throw Error("invalid code length: "+f);this.bitsbuf=b>>f;this.bitsbuflen=c-f;this.ip=e;return d&65535};
RawInflate$$module$src$zlib$rawinflate.prototype.parseUncompressedBlock=function(){const a=this.input;let b=this.ip,c=this.output,d=this.op;var e=a.length;let f;const g=c.length;this.bitsbuflen=this.bitsbuf=0;if(b+1>=e)throw Error("invalid uncompressed block header: LEN");f=a[b++]|a[b++]<<8;if(b+1>=e)throw Error("invalid uncompressed block header: NLEN");e=a[b++]|a[b++]<<8;if(f===~e)throw Error("invalid uncompressed block header: length verify");if(b+f>a.length)throw Error("input buffer is broken");
switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:for(;d+f>c.length;)e=g-d,f-=e,c.set(a.subarray(b,b+e),d),d+=e,b+=e,this.op=d,c=this.expandBufferBlock(),d=this.op;break;case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:for(;d+f>c.length;)c=this.expandBufferAdaptive({fixRatio:2});break;default:throw Error("invalid inflate mode");}c.set(a.subarray(b,b+f),d);this.ip=b+f;this.op=d+f;this.output=c};
RawInflate$$module$src$zlib$rawinflate.prototype.parseFixedHuffmanBlock=function(){switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(RawInflate$$module$src$zlib$rawinflate.FixedLiteralLengthTable,RawInflate$$module$src$zlib$rawinflate.FixedDistanceTable);break;case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:this.decodeHuffmanBlock(RawInflate$$module$src$zlib$rawinflate.FixedLiteralLengthTable,RawInflate$$module$src$zlib$rawinflate.FixedDistanceTable);
break;default:throw Error("invalid inflate mode");}};
RawInflate$$module$src$zlib$rawinflate.prototype.parseDynamicHuffmanBlock=function(){var a=this.readBits(5)+257,b=this.readBits(5)+1,c=this.readBits(4)+4,d=new Uint8Array(RawInflate$$module$src$zlib$rawinflate.Order.length);let e;for(e=0;e<c;++e)d[RawInflate$$module$src$zlib$rawinflate.Order[e]]=this.readBits(3);d=Huffman$$module$src$zlib$huffman(d);c=new Uint8Array(a+b);e=0;for(b=a+b;e<b;){var f=this.readCodeByTable(d);switch(f){case 16:for(f=3+this.readBits(2);f--;)c[e++]=g;break;case 17:for(f=
3+this.readBits(3);f--;)c[e++]=0;var g=0;break;case 18:for(f=11+this.readBits(7);f--;)c[e++]=0;g=0;break;default:g=c[e++]=f}}g=Huffman$$module$src$zlib$huffman(c.subarray(0,a));a=Huffman$$module$src$zlib$huffman(c.subarray(a));switch(this.bufferType){case RawInflate$$module$src$zlib$rawinflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(g,a);break;case RawInflate$$module$src$zlib$rawinflate.BufferType.BLOCK:this.decodeHuffmanBlock(g,a);break;default:throw Error("invalid inflate mode");}};
RawInflate$$module$src$zlib$rawinflate.prototype.decodeHuffmanBlock=function(a,b){let c=this.output,d=this.op;this.currentLitlenTable=a;const e=c.length-RawInflate$$module$src$zlib$rawinflate.MaxCopyLength;var f;let g,h;const k=RawInflate$$module$src$zlib$rawinflate.LengthCodeTable,m=RawInflate$$module$src$zlib$rawinflate.LengthExtraTable,n=RawInflate$$module$src$zlib$rawinflate.DistCodeTable,l=RawInflate$$module$src$zlib$rawinflate.DistExtraTable;for(;256!==(f=this.readCodeByTable(a));)if(256>f)d>=
e&&(this.op=d,c=this.expandBufferBlock(),d=this.op),c[d++]=f;else for(f-=257,h=k[f],0<m[f]&&(h+=this.readBits(m[f])),f=this.readCodeByTable(b),g=n[f],0<l[f]&&(g+=this.readBits(l[f])),d>=e&&(this.op=d,c=this.expandBufferBlock(),d=this.op);h--;)c[d]=c[d++-g];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=d};
RawInflate$$module$src$zlib$rawinflate.prototype.decodeHuffmanAdaptive=function(a,b){let c=this.output,d=this.op;this.currentLitlenTable=a;let e=c.length;var f;let g,h;const k=RawInflate$$module$src$zlib$rawinflate.LengthCodeTable,m=RawInflate$$module$src$zlib$rawinflate.LengthExtraTable,n=RawInflate$$module$src$zlib$rawinflate.DistCodeTable,l=RawInflate$$module$src$zlib$rawinflate.DistExtraTable;for(;256!==(f=this.readCodeByTable(a));)if(256>f)d>=e&&(c=this.expandBufferAdaptive(),e=c.length),c[d++]=
f;else for(f-=257,h=k[f],0<m[f]&&(h+=this.readBits(m[f])),f=this.readCodeByTable(b),g=n[f],0<l[f]&&(g+=this.readBits(l[f])),d+h>e&&(c=this.expandBufferAdaptive(),e=c.length);h--;)c[d]=c[d++-g];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=d};
RawInflate$$module$src$zlib$rawinflate.prototype.expandBufferBlock=function(a){a=new Uint8Array(this.op-RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength);const b=this.op-RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength,c=this.output;a.set(c.subarray(RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength,a.length));this.blocks.push(a);this.totalpos+=a.length;c.set(c.subarray(b,b+RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength));this.op=RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength;
return c};RawInflate$$module$src$zlib$rawinflate.prototype.expandBufferAdaptive=function(a){let b=Math.trunc(this.input.length/this.ip+1);const c=this.input,d=this.output;a&&("number"===typeof a.fixRatio&&(b=a.fixRatio),"number"===typeof a.addRatio&&(b+=a.addRatio));2>b?(a=(c.length-this.ip)/this.currentLitlenTable[2],a=Math.trunc(a/2*258),a=a<d.length?d.length+a:d.length<<1):a=d.length*b;a=new Uint8Array(a);a.set(d);return this.output=a};
RawInflate$$module$src$zlib$rawinflate.prototype.concatBufferBlock=function(){let a=0;const b=this.output,c=this.blocks;let d;const e=new Uint8Array(this.totalpos+(this.op-RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength));let f,g,h,k;if(0===c.length)return this.output.subarray(RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength,this.op);f=0;for(g=c.length;f<g;++f)for(d=c[f],h=0,k=d.length;h<k;++h)e[a++]=d[h];f=RawInflate$$module$src$zlib$rawinflate.MaxBackwardLength;for(g=this.op;f<
g;++f)e[a++]=b[f];this.blocks=[];return this.buffer=e};RawInflate$$module$src$zlib$rawinflate.prototype.concatBufferDynamic=function(){let a;const b=this.op;this.resize?(a=new Uint8Array(b),a.set(this.output.subarray(0,b))):a=this.output.subarray(0,b);return this.buffer=a};var module$src$zlib$rawinflate={};module$src$zlib$rawinflate.RawInflate=RawInflate$$module$src$zlib$rawinflate;function Util$$module$src$zlib$util(){}Util$$module$src$zlib$util.stringToByteArray=function(a){a=[...a];let b,c;b=0;for(c=a.length;b<c;b++)a[b]=(a[b].charPointAt(0)&255)>>>0;return new Uint8Array([a])};var module$src$zlib$util={};module$src$zlib$util.Util=Util$$module$src$zlib$util;function Adler32$$module$src$zlib$adler32(a){"string"===typeof a&&(a=Util$$module$src$zlib$util.stringToByteArray(a));return Adler32$$module$src$zlib$adler32.update(1,a)}Adler32$$module$src$zlib$adler32.update=function(a,b){let c=a&65535;a=a>>>16&65535;let d=b.length,e,f=0;for(;0<d;){e=d>Adler32$$module$src$zlib$adler32.OptimizationParameter?Adler32$$module$src$zlib$adler32.OptimizationParameter:d;d-=e;do c+=b[f++],a+=c;while(--e);c%=65521;a%=65521}return(a<<16|c)>>>0};
Adler32$$module$src$zlib$adler32.OptimizationParameter=1024;var module$src$zlib$adler32={};module$src$zlib$adler32.Adler32=Adler32$$module$src$zlib$adler32;function Inflate$$module$src$zlib$inflate(a,b){this.input=a;this.ip=0;if(b||!(b={}))b.index&&(this.ip=b.index),b.verify&&(this.verify=b.verify);const c=a[this.ip++],d=a[this.ip++];switch(c&15){case CompressionMethod$$module$src$zlib$zlib.DEFLATE:this.method=CompressionMethod$$module$src$zlib$zlib.DEFLATE;break;default:throw Error("unsupported compression method");}if(0!==((c<<8)+d)%31)throw Error("invalid fcheck flag:"+((c<<8)+d)%31);if(d&32)throw Error("fdict flag is not supported");this.rawinflate=
new RawInflate$$module$src$zlib$rawinflate(a,{index:this.ip,bufferSize:b.bufferSize,bufferType:b.bufferType,resize:b.resize})}Inflate$$module$src$zlib$inflate.BufferType=RawInflate$$module$src$zlib$rawinflate.BufferType;
Inflate$$module$src$zlib$inflate.prototype.decompress=function(){var a=this.input;const b=this.rawinflate.decompress();this.ip=this.rawinflate.ip;if(this.verify&&(a=(a[this.ip++]<<24|a[this.ip++]<<16|a[this.ip++]<<8|a[this.ip++])>>>0,a!==Adler32$$module$src$zlib$adler32(b)))throw Error("invalid adler-32 checksum");return b};var module$src$zlib$inflate={};module$src$zlib$inflate.Inflate=Inflate$$module$src$zlib$inflate;const PAGE_SIZE$$module$src$module=65536,PAGES_PER_MB$$module$src$module=16,csoundWasiJsMessageCallback$$module$src$module=({memory:a,messagePort:b,streamBuffer:c})=>function(d,e,f,g){if(a){d=new Uint8Array(a.buffer,g,f);d=uint2String$$module$src$utils$text_encoders(d);var h=/\n$/g.test(d);e=/^\n/g.test(d);var k=d.split("\n").filter(n=>0<n.length),m=[];if(0===k.length&&h||e)m.push(c.join("")),clearArray$$module$src$utils$clear_array(c);k.forEach((n,l)=>{l+1===k.length?h?0===l?(m.push(c.join("")+n),
clearArray$$module$src$utils$clear_array(c)):m.push(n):c.push(n):0===l?(m.push(c.join("")+n),clearArray$$module$src$utils$clear_array(c)):m.push(n)});m.forEach(n=>{n.replace(/(\r\n|\n|\r)/gm,"")&&b.post({log:n})})}},assertPluginExports$$module$src$module=a=>{if(a&&"object"===typeof a&&"object"===typeof a.exports){if(a.exports.__wasm_call_ctors){if(a.exports.csoundModuleCreate||a.exports.csound_opcode_init||a.exports.csound_fgen_init)return!0;console.error(a.exports,"A csound plugin turns out to be neither a plugin, opcode or module.\nPerhaps csdl.h or module.h wasn't imported correctly?");
return!1}console.error("A csound plugin didn't export __wasm_call_ctors.\nPlease re-run wasm-ld with either --export-all or include --export=__wasm_call_ctors");return!1}console.error("Error instantiating a csound plugin, instance and/or export is missing!");return!1},getBinaryHeaderData$$module$src$module=a=>{function b(){let m=0,n=1;for(;;){const l=a[c++];m+=(l&127)*n;n*=128;if(!(l&128))break}return m}1836278016!==(new Uint32Array((new Uint8Array(a.subarray(0,24))).buffer))[0]&&console.error("Wasm magic number is missing!");
if(0!==a[8])return logWasmModule$$module$src$logger("Dylink section wasn't found in wasm binary, assuming static wasm."),"static";let c=9;const d=b();c++;(0,goog.asserts.assert)(a[c]==="d".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="y".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="l".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="i".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="n".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="k".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]===
".".codePointAt(0));c++;(0,goog.asserts.assert)(a[c]==="0".codePointAt(0));c+=3;const e=b(),f=b(),g=b(),h=b(),k=b();return{sectionSize:d,memorySize:e,memoryAlign:f,neededDynlibsCount:k,tableSize:g,tableAlign:h}},loadStaticWasm$$module$src$module=async({wasmBytes:a,wasi:b,messagePort:c})=>{const d=await WebAssembly.compile(a);a=new WebAssembly.Memory({initial:16384});const e=b.getImports(d);e.env=e.env||{};e.env.csoundLoadModules=()=>0;e.env.memory=a;e.env.csoundWasiJsMessageCallback=csoundWasiJsMessageCallback$$module$src$module({memory:e.env.memory,
streamBuffer:[],messagePort:c});c=await WebAssembly.instantiate(d,e);b.setMemory(a);b.start(c);c.exports.__wasi_js_csoundSetMessageStringCallback();return[c,b]};
var $jscompDefaultExport$$module$src$module=async function({wasmDataURI:a,withPlugins:b=[],messagePort:c}){var d={};const e=new WASI$$module$src$filesystem$wasi({preopens:{"/":"/"}});a=new Uint8Array(a);a=(new Inflate$$module$src$zlib$inflate(a)).decompress();var f=getBinaryHeaderData$$module$src$module(a);if("static"===f)return await loadStaticWasm$$module$src$module({messagePort:c,wasmBytes:a,wasmFs:d,wasi:e});const {memorySize:g,memoryAlign:h,tableSize:k}=f;b=await b.reduce(async(v,z)=>{v=await v;
let B,w;try{B=new Uint8Array(z),w=getBinaryHeaderData$$module$src$module(B)}catch(C){console.error("Error in plugin",C)}w&&v.push({headerData:w,wasmPluginBytes:B});return v},[]);var m=128*PAGES_PER_MB$$module$src$module;d=Math.ceil((g+h)/PAGE_SIZE$$module$src$module);f=Math.ceil(b.reduce((v,{headerData:z})=>"static"===z?0:v+(z.memorySize+h),0)/PAGE_SIZE$$module$src$module);f=d+f+m;const n=new WebAssembly.Memory({initial:f,maximum:1024*PAGES_PER_MB$$module$src$module}),l=new WebAssembly.Table({initial:k+
1,element:"anyfunc"});e.setMemory(n);const p=new WebAssembly.Global({value:"i32",mutable:!0},f*PAGE_SIZE$$module$src$module);f=new WebAssembly.Global({value:"i32",mutable:!0},f*PAGE_SIZE$$module$src$module);m=new WebAssembly.Global({value:"i32",mutable:!1},m);const q=new WebAssembly.Global({value:"i32",mutable:!1},1),u=new WebAssembly.Global({value:"i32",mutable:!0},0);a=await WebAssembly.compile(a);const t=e.getImports(a);let x=[],r=d;t.env=t.env||{};t.env.memory=n;t.env.__indirect_function_table=
l;t.env.__stack_pointer=p;t.env.__memory_base=m;t.env.__table_base=q;t.env.csoundLoadModules=v=>{x.forEach(z=>{void 0===y?console.error("csound-wasm internal: timing problem detected!"):dlinit$$module$src$dlinit(y,z,l,v)});return 0};t.env._ZTH5errno=function(){};t.env.csoundWasiJsMessageCallback=csoundWasiJsMessageCallback$$module$src$module({memory:n,messagePort:c,streamBuffer:[]});t.env.printDebugCallback=(v,z)=>{v=new Uint8Array(n.buffer,v,z);v=uint2String$$module$src$utils$text_encoders(v);console.log(v)};
t["GOT.mem"]=t["GOT.mem"]||{};t["GOT.mem"].__heap_base=f;t["GOT.func"]=t["GOT.func"]||{};const y=await WebAssembly.instantiate(a,t);c=Object.assign({},y.exports);a={};a.exports=Object.assign(c,{memory:n});x=await b.reduce(async(v,{headerData:z,wasmPluginBytes:B})=>{v=await v;try{const {memorySize:w,memoryAlign:C,tableSize:F}=z,E=await WebAssembly.compile(B),A=e.getImports(E),G=new WebAssembly.Global({value:"i32",mutable:!1},r*PAGE_SIZE$$module$src$module);l.grow(F);A.env=Object.assign({},A.env);A.env.memory=
n;A.env.__indirect_function_table=l;A.env.__memory_base=G;A.env.__stack_pointer=p;A.env.__table_base=q;A.env.csoundLoadModules=u;delete A.env.csoundWasiJsMessageCallback;r+=Math.ceil((w+C)/PAGE_SIZE$$module$src$module);const D=await WebAssembly.instantiate(E,A);assertPluginExports$$module$src$module(D)&&(D.exports.__wasm_call_ctors(),v.push(D))}catch(w){console.error("Error while compiling csound-plugin",w)}return v},[]);e.start(a);a.exports.__wasi_js_csoundSetMessageStringCallback();return[a,e]},
module$src$module={};module$src$module.csoundWasiJsMessageCallback=csoundWasiJsMessageCallback$$module$src$module;module$src$module.default=$jscompDefaultExport$$module$src$module;function MessagePortState$$module$src$utils$message_port_state(){}MessagePortState$$module$src$utils$message_port_state.prototype.ready=!1;MessagePortState$$module$src$utils$message_port_state.prototype.port=void 0;MessagePortState$$module$src$utils$message_port_state.prototype.post=()=>{};MessagePortState$$module$src$utils$message_port_state.prototype.broadcastPlayState=()=>{};MessagePortState$$module$src$utils$message_port_state.prototype.workerState=void 0;
MessagePortState$$module$src$utils$message_port_state.prototype.vanillaWorkerState=void 0;var $jscompDefaultExport$$module$src$utils$message_port_state=MessagePortState$$module$src$utils$message_port_state,module$src$utils$message_port_state={};module$src$utils$message_port_state.MessagePortState=MessagePortState$$module$src$utils$message_port_state;module$src$utils$message_port_state.default=$jscompDefaultExport$$module$src$utils$message_port_state;class ScriptProcessorNodeSingleThread$$module$src$mains$spn_main{constructor({audioContext:a,inputChannelCount:b=1,outputChannelCount:c=2}){this.publicEvents=new PublicEventAPI$$module$src$events(this);this.eventPromises=new EventPromises$$module$src$utils$event_promises;this.audioContext=a;this.onaudioprocess=this.onaudioprocess.bind(this);this.currentPlayState=void 0;this.onPlayStateChange=this.onPlayStateChange.bind(this);this.start=this.start.bind(this);this.stop=this.stop.bind(this);this.pause=
this.pause.bind(this);this.resume=this.resume.bind(this);this.csoundApi=this.csoundInstance=this.wasm=void 0;this.exportApi={};this.spn=a.createScriptProcessor(0,b,c);this.spn.audioContext=a;this.spn.inputChannelCount=b;this.spn.outputChannelCount=c;this.spn.onaudioprocess=this.onaudioprocess;this.node=this.spn;this.exportApi.getNode=async()=>this.spn;this.sampleRate=a.sampleRate;this.messagePort=new $jscompDefaultExport$$module$src$utils$message_port_state;this.messagePort.post=d=>messageEventHandler$$module$src$mains$messages_main(this)({data:{log:d}});
this.messagePort.ready=!0;this.started=this.running=!1}async terminateInstance(){this.spn&&(this.spn.disconnect(),delete this.spn);this.audioContext&&("closed"!==this.audioContext.state&&await this.audioContext.close(),delete this.audioContext);this.publicEvents&&(this.publicEvents.terminateInstance(),delete this.publicEvents);Object.keys(this.exportApi).forEach(a=>delete this.exportApi[a]);Object.keys(this).forEach(a=>delete this[a])}async onPlayStateChange(a){if(this.publicEvents&&this.currentPlayState!==
a)switch(this.currentPlayState=a,a){case "realtimePerformanceStarted":this.publicEvents.triggerRealtimePerformanceStarted(this);break;case "realtimePerformanceEnded":this.publicEvents.triggerRealtimePerformanceEnded(this);break;case "realtimePerformancePaused":this.publicEvents.triggerRealtimePerformancePaused(this);break;case "realtimePerformanceResumed":this.publicEvents.triggerRealtimePerformanceResumed(this);break;case "renderStarted":this.publicEvents.triggerRenderStarted(this);break;case "renderEnded":this.publicEvents.triggerRenderEnded(this)}}async pause(){this.started&&
this.running&&(this.running=!1,this.onPlayStateChange("realtimePerformancePaused"))}async resume(){this.started&&!this.running&&(this.running=!0,this.onPlayStateChange("realtimePerformanceResumed"))}async stop(){if(this.started){this.eventPromises.createStopPromise();const a=this.csoundApi.csoundStop(this.csoundInstance);await this.eventPromises.waitForStop();this.watcherStdOut&&(this.watcherStdOut.close(),delete this.watcherStdOut);this.watcherStdErr&&(this.watcherStdErr.close(),delete this.watcherStdErr);
delete this.csoundInputBuffer;delete this.csoundOutputBuffer;delete this.currentPlayState;return a}}async start(){if(this.csoundApi){var a=(this.csoundApi.csoundGetOutputName(this.csoundInstance)||"test.wav").includes("dac");if(a&&"realtimePerformanceStarted"!==this.currentPlayState){this.result=0;this.csoundApi.csoundSetOption(this.csoundInstance,"--sample-rate="+this.sampleRate);this.nchnls_i=this.nchnls=-1;this.cnt=this.ksmps=a=this.csoundApi.csoundGetKsmps(this.csoundInstance);this.nchnls=this.csoundApi.csoundGetNchnls(this.csoundInstance);
this.nchnls_i=this.csoundApi.csoundGetNchnlsInput(this.csoundInstance);var b=this.csoundApi.csoundGetSpout(this.csoundInstance);this.csoundOutputBuffer=new Float64Array(this.wasm.wasi.memory.buffer,b,a*this.nchnls);b=this.csoundApi.csoundGetSpin(this.csoundInstance);this.csoundInputBuffer=new Float64Array(this.wasm.wasi.memory.buffer,b,a*this.nchnls_i);this.zerodBFS=this.csoundApi.csoundGet0dBFS(this.csoundInstance);this.publicEvents.triggerOnAudioNodeCreated(this.spn);this.eventPromises.createStartPromise();
a=this.csoundApi.csoundStart(this.csoundInstance);this.csoundApi._isRequestingRtMidiInput(this.csoundInstance)&&requestMidi$$module$src$utils$request_midi({onMidiMessage:({data:c})=>this.csoundApi.csoundPushMidiMessage(this.csoundInstance,c[0],c[1],c[2])});this.running=!0;await this.eventPromises.waitForStart();return a}if(!a&&"renderStarted"!==this.currentPlayState)return a=this.csoundApi.csoundStart(this.csoundInstance),this.onPlayStateChange("renderStarted"),setTimeout(()=>{let c=0;for(;0===c&&
this.csoundApi&&this.csoundInstance;)c=this.csoundApi.csoundPerformKsmps(this.csoundInstance);this.onPlayStateChange&&this.onPlayStateChange("renderEnded")},0),a}else console.error("starting csound failed because csound instance wasn't created")}async initialize({wasmDataURI:a,withPlugins:b,autoConnect:c}){this.plugins||!b||isEmpty$$module$node_modules$rambda$dist$rambda_mjs(b)||(b=await fetchPlugins$$module$src$utils(b));if(!this.wasm){const [f,g]=await $jscompDefaultExport$$module$src$module({wasmDataURI:a(),
withPlugins:b,messagePort:this.messagePort});this.wasm=f;this.wasi=g;f.wasi=g}const d=$jscompDefaultExport$$module$src$libcsound(this.wasm);this.csoundApi=d;const e=await d.csoundCreate(0);this.csoundInstance=e;c&&this.spn.connect(this.audioContext.destination);this.resetCsound(!1);Object.keys(d).reduce((f,g)=>{if(["mkdir","readdir","writeFile"].includes(g)){f.fs=f.fs||{};var h=async(...k)=>makeSingleThreadCallback$$module$src$utils(this.wasm,d[g]).apply({},k);h.toString=d[g].toString;f.fs[g]=h}else h=
csoundApiRename$$module$src$utils(g),f[h]=(...k)=>makeSingleThreadCallback$$module$src$utils(e,d[g]).apply({},k),f[h].toString=d[g].toString;return f},this.exportApi);this.exportApi.pause=this.pause.bind(this);this.exportApi.resume=this.resume.bind(this);this.exportApi.start=this.start.bind(this);this.exportApi.stop=this.stop.bind(this);this.exportApi.terminateInstance=this.terminateInstance.bind(this);this.exportApi.getAudioContext=async()=>this.audioContext;this.exportApi.name="Csound: ScriptProcessor Node, Single-threaded";
this.exportApi=this.publicEvents.decorateAPI(this.exportApi);this.exportApi.reset=()=>this.resetCsound(!0);this.exportApi.addListener("message",console.log);return this.exportApi}async resetCsound(a){if(a&&"realtimePerformanceEnded"!==this.currentPlayState&&"realtimePerformanceStarted"!==this.currentPlayState)return-1;if("realtimePerformanceStarted"===this.currentPlayState)this.onPlayStateChange("realtimePerformanceEnded");this.started=this.running=!1;this.result=0;const b=this.csoundInstance,c=this.csoundApi;
a&&c.csoundReset(b);c.csoundSetOption(b,"--sample-rate="+this.sampleRate);this.nchnls_i=this.nchnls=-1;delete this.csoundOutputBuffer;delete this.csoundInputBuffer}onaudioprocess(a){if(this.csoundApi&&!["renderStarted","renderEnded"].includes(this.currentPlayState)){if(null===this.csoundOutputBuffer||!1===this.running){var b=a.outputBuffer,c=b.getChannelData(0);if(c){c=c.length;for(var d=0;d<c;d++)for(var e=0;e<b.numberOfChannels;e++)b.getChannelData(e)[d]=0}}this.running&&!this.started&&(this.started=
!0,this.onPlayStateChange("realtimePerformanceStarted"),this.eventPromises&&this.eventPromises.releaseStartPromise());b=a.inputBuffer;a=a.outputBuffer;c=a.getChannelData(0).length;d=this.csoundOutputBuffer;e=this.csoundInputBuffer;var f=this.ksmps,g=this.zerodBFS,h=this.nchnls,k=this.nchnls_i,m=this.cnt||0,n=this.result||0;for(let u=0;u<c;u++,m++){m===f&&0===n&&(n=this.csoundApi.csoundPerformKsmps(this.csoundInstance),m=0,0!==n&&(this.started=this.running=!1,this.onPlayStateChange("realtimePerformanceEnded"),
this.eventPromises&&this.eventPromises.releaseStopPromise()));d&&0!==d.length||(d=this.csoundOutputBuffer=new Float64Array(this.wasm.wasi.memory.buffer,this.csoundApi.csoundGetSpout(this.csoundInstance),f*h));e&&0!==e.length||(e=this.csoundInputBuffer=new Float64Array(this.wasm.wasi.memory.buffer,this.csoundApi.csoundGetSpin(this.csoundInstance),f*k));var l=Math.min(this.nchnls_i,b.numberOfChannels);for(var p=0;p<l;p++){var q=b.getChannelData(p);e[m*k+p]=q[u]*g}if(this.nchnls===a.numberOfChannels)for(l=
0;l<a.numberOfChannels;l++)a.getChannelData(l)[u]=0===n?d[m*h+l]/g:0;else 2===this.nchnls&&1===a.numberOfChannels?a.getChannelData(0)[u]=0===n?.5*(d[m*h]/g+d[m*h+1]/g):0:1===this.nchnls&&2===a.numberOfChannels&&(l=a.getChannelData(0),p=a.getChannelData(1),0===n?(q=d[m*h]/g,l[u]=q,p[u]=q):(l[u]=0,p[u]=0))}this.cnt=m;this.result=n}}}var $jscompDefaultExport$$module$src$mains$spn_main=ScriptProcessorNodeSingleThread$$module$src$mains$spn_main,module$src$mains$spn_main={};
module$src$mains$spn_main.default=$jscompDefaultExport$$module$src$mains$spn_main;var $jscompDefaultExport$$module$dist$__compiled_worklet_singlethread_worker_inline=()=>"data:application/javascript;base64,",
module$dist$__compiled_worklet_singlethread_worker_inline={};module$dist$__compiled_worklet_singlethread_worker_inline.default=$jscompDefaultExport$$module$dist$__compiled_worklet_singlethread_worker_inline;const initializeModule$$module$src$mains$worklet_singlethread_main=async a=>{logSinglethreadWorkletMain$$module$src$logger("Initialize Module")();try{await a.audioWorklet.addModule($jscompDefaultExport$$module$dist$__compiled_worklet_singlethread_worker_inline())}catch(b){return console.error("Error calling audioWorklet.addModule",b),!1}return!0};
class SingleThreadAudioWorkletMainThread$$module$src$mains$worklet_singlethread_main{constructor({audioContext:a,inputChannelCount:b=1,outputChannelCount:c=2}){this.exportApi={};this.ipcMessagePorts=new IPCMessagePorts$$module$src$mains$messages_main;this.publicEvents=new PublicEventAPI$$module$src$events(this);this.eventPromises=new EventPromises$$module$src$utils$event_promises;this.audioContext=a;this.inputChannelCount=b;this.outputChannelCount=c;this.messageCallbacks=[];this.onPlayStateChange=
this.onPlayStateChange.bind(this);this.currentPlayState=void 0}async terminateInstance(){this.node&&(this.node.disconnect(),delete this.node);this.audioContext&&("closed"!==this.audioContext.state&&await this.audioContext.close(),delete this.audioContext);this.workletProxy&&(this.workletProxy[releaseProxy$$module$node_modules$comlink$dist$esm$comlink_mjs](),delete this.workletProxy);this.publicEvents&&(this.publicEvents.terminateInstance(),delete this.publicEvents);Object.keys(this.exportApi).forEach(a=>
delete this.exportApi[a]);Object.keys(this).forEach(a=>delete this[a])}async onPlayStateChange(a){if(this.currentPlayState!==a&&this.publicEvents)switch(this.currentPlayState=a,a){case "realtimePerformanceStarted":this.eventPromises.isWaitingToStart()&&(logSinglethreadWorkletMain$$module$src$logger("Start promise resolved")(),this.eventPromises.releaseStartPromise());this.publicEvents.triggerRealtimePerformanceStarted(this);break;case "realtimePerformanceEnded":this.midiPortStarted=!1;this.currentPlayState=
void 0;this.publicEvents&&this.publicEvents.triggerRealtimePerformanceEnded(this);this.eventPromises&&this.eventPromises.isWaitingToStop()&&this.eventPromises.releaseStopPromise();this.eventPromises&&this.eventPromises.releaseStartPromise();break;case "realtimePerformancePaused":this.publicEvents.triggerRealtimePerformancePaused(this);break;case "realtimePerformanceResumed":this.publicEvents.triggerRealtimePerformanceResumed(this);break;case "renderStarted":this.eventPromises.isWaitingToStart()&&
(logSinglethreadWorkletMain$$module$src$logger("Start promise resolved")(),this.publicEvents.triggerRenderStarted(this),this.eventPromises.releaseStartPromise());break;case "renderEnded":this.publicEvents.triggerRenderEnded(this),this.eventPromises&&this.eventPromises.isWaitingToStop()&&this.eventPromises.releaseStopPromise(),this.eventPromises&&this.eventPromises.releaseStartPromise()}}async csoundPause(){void 0!==this.workletProxy&&await this.workletProxy.pause()}async csoundResume(){void 0!==this.workletProxy&&
await this.workletProxy.resume()}handleMidiInput({data:a}){this.ipcMessagePorts.csoundMainRtMidiPort.postMessage&&this.ipcMessagePorts.csoundMainRtMidiPort.postMessage(a)}async initialize({wasmDataURI:a,withPlugins:b,autoConnect:c}){b&&0<b.length&&(b=await fetchPlugins$$module$src$utils(b));await initializeModule$$module$src$mains$worklet_singlethread_main(this.audioContext);this.node=new AudioWorkletNode(this.audioContext,"csound-singlethread-worklet-processor",{inputChannelCount:this.inputChannelCount?
[this.inputChannelCount]:0,outputChannelCount:[this.outputChannelCount||2]});c&&this.node.connect(this.audioContext.destination);try{logSinglethreadWorkletMain$$module$src$logger("wrapping Comlink proxy endpoint on the audioWorkletNode.port")(),this.workletProxy=wrap$$module$node_modules$comlink$dist$esm$comlink_mjs(this.node.port)}catch(e){console.error("COMLINK ERROR",e)}await this.workletProxy.initializeMessagePort(transfer$$module$node_modules$comlink$dist$esm$comlink_mjs({messagePort:this.ipcMessagePorts.workerMessagePort,
rtmidiPort:this.ipcMessagePorts.csoundWorkerRtMidiPort},[this.ipcMessagePorts.workerMessagePort,this.ipcMessagePorts.csoundWorkerRtMidiPort]));this.ipcMessagePorts.mainMessagePort.addEventListener("message",messageEventHandler$$module$src$mains$messages_main(this));this.ipcMessagePorts.mainMessagePort.start();await this.workletProxy.initialize(a(),b);const d=await makeProxyCallback$$module$src$utils(this.workletProxy,void 0,"csoundCreate",this.currentPlayState)();this.csoundInstance=d;await makeProxyCallback$$module$src$utils(this.workletProxy,
d,"csoundInitialize",this.currentPlayState)(0);this.exportApi.pause=this.csoundPause.bind(this);this.exportApi.resume=this.csoundResume.bind(this);this.exportApi.terminateInstance=this.terminateInstance.bind(this);this.exportApi.getAudioContext=async()=>this.audioContext;this.exportApi.getNode=async()=>this.node;this.exportApi.enableAudioInput=enableAudioInput$$module$src$mains$io_utils.bind(this.exportApi);this.exportApi.name="Csound: Audio Worklet, Single-threaded";this.exportApi=this.publicEvents.decorateAPI(this.exportApi);
this.exportApi.addListener("message",console.log);for(const e of Object.keys(api$$module$src$libcsound)){const f=api$$module$src$libcsound[e],g=makeProxyCallback$$module$src$utils(this.workletProxy,d,e,this.currentPlayState);switch(e){case "csoundCreate":break;case "csoundStart":a=async function(){this.eventPromises.createStartPromise();var h=await this.workletProxy.isRequestingInput();if(await this.workletProxy.isRequestingRealtimeOutput())return h&&this.exportApi.enableAudioInput(),await this.exportApi._isRequestingRtMidiInput(d)&&
requestMidi$$module$src$utils$request_midi({onMidiMessage:this.handleMidiInput.bind(this)}),h=await g({csound:d}),this.publicEvents.triggerOnAudioNodeCreated(this.node),await this.eventPromises.waitForStart(),h;g({csound:d});this.publicEvents.triggerOnAudioNodeCreated(this.node);await this.eventPromises.waitForStart();return 0};a.toString=()=>f.toString();this.exportApi.start=a.bind(this);break;case "csoundStop":a=async()=>{if(this.eventPromises.isWaitingToStop())return logSinglethreadWorkletMain$$module$src$logger("already waiting to stop, doing nothing")(),
-1;this.eventPromises.createStopPromise();const h=await g();await this.eventPromises.waitForStop();return h};a.toString=()=>f.toString();this.exportApi.stop=a.bind(this);break;case "fs":this.exportApi.fs={};Object.keys(f).forEach(h=>{const k=makeProxyCallback$$module$src$utils(this.workletProxy,d,h,this.currentPlayState);k.toString=()=>f[h].toString();this.exportApi.fs[h]=k});break;default:g.toString=()=>f.toString(),this.exportApi[csoundApiRename$$module$src$utils(e)]=g}}return this.exportApi}}
var $jscompDefaultExport$$module$src$mains$worklet_singlethread_main=SingleThreadAudioWorkletMainThread$$module$src$mains$worklet_singlethread_main,module$src$mains$worklet_singlethread_main={};module$src$mains$worklet_singlethread_main.default=$jscompDefaultExport$$module$src$mains$worklet_singlethread_main;(0,module$node_modules$unmute_ios_audio$index.default)();
const Csound$$module$src$index=async function({audioContext:a,inputChannelCount:b,outputChannelCount:c,autoConnect:d=!0,withPlugins:e=[],useWorker:f=!1,useSAB:g=!0,useSPN:h=!1}={}){const k=a&&WebkitAudioContext$$module$src$utils()&&a instanceof WebkitAudioContext$$module$src$utils();k||(a=a||new (WebkitAudioContext$$module$src$utils())({latencyHint:"interactive"}));isSafari$$module$src$utils()&&a.resume();const m=areWorkletsSupported$$module$src$utils(),n=isScriptProcessorNodeSupported$$module$src$utils();
if(f){m?logIndex$$module$src$logger("worklet support detected")():n?logIndex$$module$src$logger("scriptProcessorNode support detected")():console.error("No WebAudio Support detected");var l;!h&&m?l=new $jscompDefaultExport$$module$src$mains$worklet_main({audioContext:a,audioContextIsProvided:k,autoConnect:d}):n&&(l=new $jscompDefaultExport$$module$src$mains$old_spn_main({audioContext:a,audioContextIsProvided:k,autoConnect:d}));if(l)return(d=isSabSupported$$module$src$utils())?g&&logIndex$$module$src$logger("using SharedArrayBuffers")():
logIndex$$module$src$logger("SharedArrayBuffers not found, falling back to Vanilla concurrency")(),a=d&&m&&g?new $jscompDefaultExport$$module$src$mains$sab_main({audioWorker:l,audioContext:a,audioContextIsProvided:k,inputChannelCount:b,outputChannelCount:c}):new $jscompDefaultExport$$module$src$mains$vanilla_main({audioWorker:l,audioContextIsProvided:k}),logIndex$$module$src$logger("starting Csound thread initialization via WebWorker")(),await a.initialize({wasmDataURI:$jscompDefaultExport$$module$dist$__csound_wasm_inline,
withPlugins:e}),e=a.api}else{if(m&&!h)return logIndex$$module$src$logger("Single Thread AudioWorklet")(),(new $jscompDefaultExport$$module$src$mains$worklet_singlethread_main({audioContext:a,inputChannelCount:b||2,outputChannelCount:c||2})).initialize({wasmDataURI:$jscompDefaultExport$$module$dist$__csound_wasm_inline,withPlugins:e,autoConnect:d});if(n)return logIndex$$module$src$logger("Single Thread ScriptProcessorNode")(),await (new $jscompDefaultExport$$module$src$mains$spn_main({audioContext:a,
inputChannelCount:b||2,outputChannelCount:c||2})).initialize({wasmDataURI:$jscompDefaultExport$$module$dist$__csound_wasm_inline,withPlugins:e,autoConnect:d})}console.error("No detectable WebAudioAPI in current environment")};goog.exportSymbol("Csound$$module$src$index",Csound$$module$src$index);var module$src$index={};module$src$index.Csound=Csound$$module$src$index;
const Csound = Csound$$module$src$index;
Csound.toString = () => 'async (options) => CsoundObj;';
export { Csound }
export default Csound
//# sourceMappingURL=csound.js.map
